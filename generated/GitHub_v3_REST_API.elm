module GitHub_v3_REST_API exposing (..)

{-| 
-}


import Debug
import Http
import Json.Decode
import Json.Decode.Extra
import Json.Encode
import Result


metaRoot : (expectJsonUnpack -> toMsg) -> Cmd toMsg
metaRoot toMsg =
    Http.get { url = "/", expect = Http.expectJson toMsg (Debug.todo "todo") }


appsGetAuthenticated : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsGetAuthenticated toMsg =
    Http.get
        { url = "/app", expect = Http.expectJson toMsg (Debug.todo "todo") }


appsGetWebhookConfigForApp : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsGetWebhookConfigForApp toMsg =
    Http.get
        { url = "/app/hook/config"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsListWebhookDeliveries : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsListWebhookDeliveries toMsg =
    Http.get
        { url = "/app/hook/deliveries"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsGetWebhookDelivery : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsGetWebhookDelivery toMsg =
    Http.get
        { url = "/app/hook/deliveries/{delivery_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsListInstallations : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsListInstallations toMsg =
    Http.get
        { url = "/app/installations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsGetInstallation : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsGetInstallation toMsg =
    Http.get
        { url = "/app/installations/{installation_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsGetBySlug : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsGetBySlug toMsg =
    Http.get
        { url = "/apps/{app_slug}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codesOfConductGetAllCodesOfConduct : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codesOfConductGetAllCodesOfConduct toMsg =
    Http.get
        { url = "/codes_of_conduct"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codesOfConductGetConductCode : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codesOfConductGetConductCode toMsg =
    Http.get
        { url = "/codes_of_conduct/{key}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


emojisGet : (expectJsonUnpack -> toMsg) -> Cmd toMsg
emojisGet toMsg =
    Http.get
        { url = "/emojis", expect = Http.expectJson toMsg (Debug.todo "todo") }


enterpriseAdminGetServerStatistics : (expectJsonUnpack -> toMsg) -> Cmd toMsg
enterpriseAdminGetServerStatistics toMsg =
    Http.get
        { url = "/enterprise-installation/{enterprise_or_org}/server-statistics"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetActionsCacheUsageForEnterprise :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetActionsCacheUsageForEnterprise toMsg =
    Http.get
        { url = "/enterprises/{enterprise}/actions/cache/usage"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


enterpriseAdminGetGithubActionsPermissionsEnterprise :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
enterpriseAdminGetGithubActionsPermissionsEnterprise toMsg =
    Http.get
        { url = "/enterprises/{enterprise}/actions/permissions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise toMsg =
    Http.get
        { url = "/enterprises/{enterprise}/actions/permissions/organizations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


enterpriseAdminGetAllowedActionsEnterprise :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
enterpriseAdminGetAllowedActionsEnterprise toMsg =
    Http.get
        { url = "/enterprises/{enterprise}/actions/permissions/selected-actions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetGithubActionsDefaultWorkflowPermissionsEnterprise :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetGithubActionsDefaultWorkflowPermissionsEnterprise toMsg =
    Http.get
        { url = "/enterprises/{enterprise}/actions/permissions/workflow"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


enterpriseAdminListSelfHostedRunnerGroupsForEnterprise :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
enterpriseAdminListSelfHostedRunnerGroupsForEnterprise toMsg =
    Http.get
        { url = "/enterprises/{enterprise}/actions/runner-groups"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


enterpriseAdminGetSelfHostedRunnerGroupForEnterprise :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
enterpriseAdminGetSelfHostedRunnerGroupForEnterprise toMsg =
    Http.get
        { url =
            "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise toMsg =
    Http.get
        { url =
            "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


enterpriseAdminListSelfHostedRunnersInGroupForEnterprise :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
enterpriseAdminListSelfHostedRunnersInGroupForEnterprise toMsg =
    Http.get
        { url =
            "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


enterpriseAdminListSelfHostedRunnersForEnterprise :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
enterpriseAdminListSelfHostedRunnersForEnterprise toMsg =
    Http.get
        { url = "/enterprises/{enterprise}/actions/runners"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


enterpriseAdminListRunnerApplicationsForEnterprise :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
enterpriseAdminListRunnerApplicationsForEnterprise toMsg =
    Http.get
        { url = "/enterprises/{enterprise}/actions/runners/downloads"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


enterpriseAdminGetSelfHostedRunnerForEnterprise :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
enterpriseAdminGetSelfHostedRunnerForEnterprise toMsg =
    Http.get
        { url = "/enterprises/{enterprise}/actions/runners/{runner_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise toMsg =
    Http.get
        { url = "/enterprises/{enterprise}/actions/runners/{runner_id}/labels"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codeScanningListAlertsForEnterprise : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codeScanningListAlertsForEnterprise toMsg =
    Http.get
        { url = "/enterprises/{enterprise}/code-scanning/alerts"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


secretScanningListAlertsForEnterprise : (expectJsonUnpack -> toMsg) -> Cmd toMsg
secretScanningListAlertsForEnterprise toMsg =
    Http.get
        { url = "/enterprises/{enterprise}/secret-scanning/alerts"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


billingGetGithubAdvancedSecurityBillingGhe :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
billingGetGithubAdvancedSecurityBillingGhe toMsg =
    Http.get
        { url = "/enterprises/{enterprise}/settings/billing/advanced-security"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListPublicEvents : (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListPublicEvents toMsg =
    Http.get
        { url = "/events", expect = Http.expectJson toMsg (Debug.todo "todo") }


activityGetFeeds : (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityGetFeeds toMsg =
    Http.get
        { url = "/feeds", expect = Http.expectJson toMsg (Debug.todo "todo") }


gistsList : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gistsList toMsg =
    Http.get
        { url = "/gists", expect = Http.expectJson toMsg (Debug.todo "todo") }


gistsListPublic : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gistsListPublic toMsg =
    Http.get
        { url = "/gists/public"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gistsListStarred : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gistsListStarred toMsg =
    Http.get
        { url = "/gists/starred"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gistsGet : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gistsGet toMsg =
    Http.get
        { url = "/gists/{gist_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gistsListComments : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gistsListComments toMsg =
    Http.get
        { url = "/gists/{gist_id}/comments"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gistsGetComment : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gistsGetComment toMsg =
    Http.get
        { url = "/gists/{gist_id}/comments/{comment_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gistsListCommits : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gistsListCommits toMsg =
    Http.get
        { url = "/gists/{gist_id}/commits"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gistsListForks : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gistsListForks toMsg =
    Http.get
        { url = "/gists/{gist_id}/forks"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gistsCheckIsStarred : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gistsCheckIsStarred toMsg =
    Http.get
        { url = "/gists/{gist_id}/star"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gistsGetRevision : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gistsGetRevision toMsg =
    Http.get
        { url = "/gists/{gist_id}/{sha}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gitignoreGetAllTemplates : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gitignoreGetAllTemplates toMsg =
    Http.get
        { url = "/gitignore/templates"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gitignoreGetTemplate : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gitignoreGetTemplate toMsg =
    Http.get
        { url = "/gitignore/templates/{name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsListReposAccessibleToInstallation : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsListReposAccessibleToInstallation toMsg =
    Http.get
        { url = "/installation/repositories"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesList : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesList toMsg =
    Http.get
        { url = "/issues", expect = Http.expectJson toMsg (Debug.todo "todo") }


licensesGetAllCommonlyUsed : (expectJsonUnpack -> toMsg) -> Cmd toMsg
licensesGetAllCommonlyUsed toMsg =
    Http.get
        { url = "/licenses"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


licensesGet : (expectJsonUnpack -> toMsg) -> Cmd toMsg
licensesGet toMsg =
    Http.get
        { url = "/licenses/{license}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsGetSubscriptionPlanForAccount : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsGetSubscriptionPlanForAccount toMsg =
    Http.get
        { url = "/marketplace_listing/accounts/{account_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsListPlans : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsListPlans toMsg =
    Http.get
        { url = "/marketplace_listing/plans"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsListAccountsForPlan : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsListAccountsForPlan toMsg =
    Http.get
        { url = "/marketplace_listing/plans/{plan_id}/accounts"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsGetSubscriptionPlanForAccountStubbed :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsGetSubscriptionPlanForAccountStubbed toMsg =
    Http.get
        { url = "/marketplace_listing/stubbed/accounts/{account_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsListPlansStubbed : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsListPlansStubbed toMsg =
    Http.get
        { url = "/marketplace_listing/stubbed/plans"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsListAccountsForPlanStubbed : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsListAccountsForPlanStubbed toMsg =
    Http.get
        { url = "/marketplace_listing/stubbed/plans/{plan_id}/accounts"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


metaGet : (expectJsonUnpack -> toMsg) -> Cmd toMsg
metaGet toMsg =
    Http.get
        { url = "/meta", expect = Http.expectJson toMsg (Debug.todo "todo") }


activityListPublicEventsForRepoNetwork :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListPublicEventsForRepoNetwork toMsg =
    Http.get
        { url = "/networks/{owner}/{repo}/events"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListNotificationsForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListNotificationsForAuthenticatedUser toMsg =
    Http.get
        { url = "/notifications"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityGetThread : (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityGetThread toMsg =
    Http.get
        { url = "/notifications/threads/{thread_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityGetThreadSubscriptionForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityGetThreadSubscriptionForAuthenticatedUser toMsg =
    Http.get
        { url = "/notifications/threads/{thread_id}/subscription"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


metaGetOctocat : (expectJsonUnpack -> toMsg) -> Cmd toMsg
metaGetOctocat toMsg =
    Http.get
        { url = "/octocat", expect = Http.expectJson toMsg (Debug.todo "todo") }


orgsList : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsList toMsg =
    Http.get
        { url = "/organizations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListCustomRoles : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListCustomRoles toMsg =
    Http.get
        { url = "/organizations/{organization_id}/custom_roles"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsGet : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsGet toMsg =
    Http.get
        { url = "/orgs/{org}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetActionsCacheUsageForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetActionsCacheUsageForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/actions/cache/usage"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetActionsCacheUsageByRepoForOrg :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetActionsCacheUsageByRepoForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/actions/cache/usage-by-repository"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetGithubActionsPermissionsOrganization :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetGithubActionsPermissionsOrganization toMsg =
    Http.get
        { url = "/orgs/{org}/actions/permissions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListSelectedRepositoriesEnabledGithubActionsOrganization :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListSelectedRepositoriesEnabledGithubActionsOrganization toMsg =
    Http.get
        { url = "/orgs/{org}/actions/permissions/repositories"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetAllowedActionsOrganization : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetAllowedActionsOrganization toMsg =
    Http.get
        { url = "/orgs/{org}/actions/permissions/selected-actions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetGithubActionsDefaultWorkflowPermissionsOrganization :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetGithubActionsDefaultWorkflowPermissionsOrganization toMsg =
    Http.get
        { url = "/orgs/{org}/actions/permissions/workflow"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListSelfHostedRunnerGroupsForOrg :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListSelfHostedRunnerGroupsForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/actions/runner-groups"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetSelfHostedRunnerGroupForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetSelfHostedRunnerGroupForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/actions/runner-groups/{runner_group_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListRepoAccessToSelfHostedRunnerGroupInOrg :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListRepoAccessToSelfHostedRunnerGroupInOrg toMsg =
    Http.get
        { url =
            "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListSelfHostedRunnersInGroupForOrg :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListSelfHostedRunnersInGroupForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListSelfHostedRunnersForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListSelfHostedRunnersForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/actions/runners"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListRunnerApplicationsForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListRunnerApplicationsForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/actions/runners/downloads"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetSelfHostedRunnerForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetSelfHostedRunnerForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/actions/runners/{runner_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListLabelsForSelfHostedRunnerForOrg :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListLabelsForSelfHostedRunnerForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/actions/runners/{runner_id}/labels"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListOrgSecrets : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListOrgSecrets toMsg =
    Http.get
        { url = "/orgs/{org}/actions/secrets"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetOrgPublicKey : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetOrgPublicKey toMsg =
    Http.get
        { url = "/orgs/{org}/actions/secrets/public-key"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetOrgSecret : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetOrgSecret toMsg =
    Http.get
        { url = "/orgs/{org}/actions/secrets/{secret_name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListSelectedReposForOrgSecret : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListSelectedReposForOrgSecret toMsg =
    Http.get
        { url = "/orgs/{org}/actions/secrets/{secret_name}/repositories"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListBlockedUsers : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListBlockedUsers toMsg =
    Http.get
        { url = "/orgs/{org}/blocks"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsCheckBlockedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsCheckBlockedUser toMsg =
    Http.get
        { url = "/orgs/{org}/blocks/{username}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codeScanningListAlertsForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codeScanningListAlertsForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/code-scanning/alerts"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesListInOrganization : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesListInOrganization toMsg =
    Http.get
        { url = "/orgs/{org}/codespaces"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesListOrgSecrets : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesListOrgSecrets toMsg =
    Http.get
        { url = "/orgs/{org}/codespaces/secrets"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesGetOrgPublicKey : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesGetOrgPublicKey toMsg =
    Http.get
        { url = "/orgs/{org}/codespaces/secrets/public-key"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesGetOrgSecret : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesGetOrgSecret toMsg =
    Http.get
        { url = "/orgs/{org}/codespaces/secrets/{secret_name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesListSelectedReposForOrgSecret :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesListSelectedReposForOrgSecret toMsg =
    Http.get
        { url = "/orgs/{org}/codespaces/secrets/{secret_name}/repositories"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


dependabotListOrgSecrets : (expectJsonUnpack -> toMsg) -> Cmd toMsg
dependabotListOrgSecrets toMsg =
    Http.get
        { url = "/orgs/{org}/dependabot/secrets"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


dependabotGetOrgPublicKey : (expectJsonUnpack -> toMsg) -> Cmd toMsg
dependabotGetOrgPublicKey toMsg =
    Http.get
        { url = "/orgs/{org}/dependabot/secrets/public-key"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


dependabotGetOrgSecret : (expectJsonUnpack -> toMsg) -> Cmd toMsg
dependabotGetOrgSecret toMsg =
    Http.get
        { url = "/orgs/{org}/dependabot/secrets/{secret_name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


dependabotListSelectedReposForOrgSecret :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
dependabotListSelectedReposForOrgSecret toMsg =
    Http.get
        { url = "/orgs/{org}/dependabot/secrets/{secret_name}/repositories"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListPublicOrgEvents : (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListPublicOrgEvents toMsg =
    Http.get
        { url = "/orgs/{org}/events"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListFailedInvitations : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListFailedInvitations toMsg =
    Http.get
        { url = "/orgs/{org}/failed_invitations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListFineGrainedPermissions : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListFineGrainedPermissions toMsg =
    Http.get
        { url = "/orgs/{org}/fine_grained_permissions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListWebhooks : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListWebhooks toMsg =
    Http.get
        { url = "/orgs/{org}/hooks"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsGetWebhook : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsGetWebhook toMsg =
    Http.get
        { url = "/orgs/{org}/hooks/{hook_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsGetWebhookConfigForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsGetWebhookConfigForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/hooks/{hook_id}/config"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListWebhookDeliveries : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListWebhookDeliveries toMsg =
    Http.get
        { url = "/orgs/{org}/hooks/{hook_id}/deliveries"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsGetWebhookDelivery : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsGetWebhookDelivery toMsg =
    Http.get
        { url = "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsGetOrgInstallation : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsGetOrgInstallation toMsg =
    Http.get
        { url = "/orgs/{org}/installation"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListAppInstallations : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListAppInstallations toMsg =
    Http.get
        { url = "/orgs/{org}/installations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


interactionsGetRestrictionsForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
interactionsGetRestrictionsForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/interaction-limits"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListPendingInvitations : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListPendingInvitations toMsg =
    Http.get
        { url = "/orgs/{org}/invitations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListInvitationTeams : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListInvitationTeams toMsg =
    Http.get
        { url = "/orgs/{org}/invitations/{invitation_id}/teams"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesListForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesListForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/issues"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListMembers : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListMembers toMsg =
    Http.get
        { url = "/orgs/{org}/members"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsCheckMembershipForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsCheckMembershipForUser toMsg =
    Http.get
        { url = "/orgs/{org}/members/{username}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesGetCodespacesForUserInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesGetCodespacesForUserInOrg toMsg =
    Http.get
        { url = "/orgs/{org}/members/{username}/codespaces"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsGetMembershipForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsGetMembershipForUser toMsg =
    Http.get
        { url = "/orgs/{org}/memberships/{username}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


migrationsListForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
migrationsListForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/migrations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


migrationsGetStatusForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
migrationsGetStatusForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/migrations/{migration_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


migrationsDownloadArchiveForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
migrationsDownloadArchiveForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/migrations/{migration_id}/archive"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


migrationsListReposForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
migrationsListReposForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/migrations/{migration_id}/repositories"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListOutsideCollaborators : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListOutsideCollaborators toMsg =
    Http.get
        { url = "/orgs/{org}/outside_collaborators"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


packagesListPackagesForOrganization : (expectJsonUnpack -> toMsg) -> Cmd toMsg
packagesListPackagesForOrganization toMsg =
    Http.get
        { url = "/orgs/{org}/packages"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


packagesGetPackageForOrganization : (expectJsonUnpack -> toMsg) -> Cmd toMsg
packagesGetPackageForOrganization toMsg =
    Http.get
        { url = "/orgs/{org}/packages/{package_type}/{package_name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


packagesGetAllPackageVersionsForPackageOwnedByOrg :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
packagesGetAllPackageVersionsForPackageOwnedByOrg toMsg =
    Http.get
        { url = "/orgs/{org}/packages/{package_type}/{package_name}/versions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


packagesGetPackageVersionForOrganization :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
packagesGetPackageVersionForOrganization toMsg =
    Http.get
        { url =
            "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


projectsListForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
projectsListForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/projects"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListPublicMembers : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListPublicMembers toMsg =
    Http.get
        { url = "/orgs/{org}/public_members"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsCheckPublicMembershipForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsCheckPublicMembershipForUser toMsg =
    Http.get
        { url = "/orgs/{org}/public_members/{username}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/repos"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


secretScanningListAlertsForOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
secretScanningListAlertsForOrg toMsg =
    Http.get
        { url = "/orgs/{org}/secret-scanning/alerts"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListSecurityManagerTeams : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListSecurityManagerTeams toMsg =
    Http.get
        { url = "/orgs/{org}/security-managers"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


billingGetGithubActionsBillingOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
billingGetGithubActionsBillingOrg toMsg =
    Http.get
        { url = "/orgs/{org}/settings/billing/actions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


billingGetGithubAdvancedSecurityBillingOrg :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
billingGetGithubAdvancedSecurityBillingOrg toMsg =
    Http.get
        { url = "/orgs/{org}/settings/billing/advanced-security"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


billingGetGithubPackagesBillingOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
billingGetGithubPackagesBillingOrg toMsg =
    Http.get
        { url = "/orgs/{org}/settings/billing/packages"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


billingGetSharedStorageBillingOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
billingGetSharedStorageBillingOrg toMsg =
    Http.get
        { url = "/orgs/{org}/settings/billing/shared-storage"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsList : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsList toMsg =
    Http.get
        { url = "/orgs/{org}/teams"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsGetByName : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsGetByName toMsg =
    Http.get
        { url = "/orgs/{org}/teams/{team_slug}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListDiscussionsInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListDiscussionsInOrg toMsg =
    Http.get
        { url = "/orgs/{org}/teams/{team_slug}/discussions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsGetDiscussionInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsGetDiscussionInOrg toMsg =
    Http.get
        { url = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListDiscussionCommentsInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListDiscussionCommentsInOrg toMsg =
    Http.get
        { url =
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsGetDiscussionCommentInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsGetDiscussionCommentInOrg toMsg =
    Http.get
        { url =
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reactionsListForTeamDiscussionCommentInOrg :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
reactionsListForTeamDiscussionCommentInOrg toMsg =
    Http.get
        { url =
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reactionsListForTeamDiscussionInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reactionsListForTeamDiscussionInOrg toMsg =
    Http.get
        { url =
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListPendingInvitationsInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListPendingInvitationsInOrg toMsg =
    Http.get
        { url = "/orgs/{org}/teams/{team_slug}/invitations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListMembersInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListMembersInOrg toMsg =
    Http.get
        { url = "/orgs/{org}/teams/{team_slug}/members"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsGetMembershipForUserInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsGetMembershipForUserInOrg toMsg =
    Http.get
        { url = "/orgs/{org}/teams/{team_slug}/memberships/{username}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListProjectsInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListProjectsInOrg toMsg =
    Http.get
        { url = "/orgs/{org}/teams/{team_slug}/projects"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsCheckPermissionsForProjectInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsCheckPermissionsForProjectInOrg toMsg =
    Http.get
        { url = "/orgs/{org}/teams/{team_slug}/projects/{project_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListReposInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListReposInOrg toMsg =
    Http.get
        { url = "/orgs/{org}/teams/{team_slug}/repos"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsCheckPermissionsForRepoInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsCheckPermissionsForRepoInOrg toMsg =
    Http.get
        { url = "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListChildInOrg : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListChildInOrg toMsg =
    Http.get
        { url = "/orgs/{org}/teams/{team_slug}/teams"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


projectsGetCard : (expectJsonUnpack -> toMsg) -> Cmd toMsg
projectsGetCard toMsg =
    Http.get
        { url = "/projects/columns/cards/{card_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


projectsGetColumn : (expectJsonUnpack -> toMsg) -> Cmd toMsg
projectsGetColumn toMsg =
    Http.get
        { url = "/projects/columns/{column_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


projectsListCards : (expectJsonUnpack -> toMsg) -> Cmd toMsg
projectsListCards toMsg =
    Http.get
        { url = "/projects/columns/{column_id}/cards"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


projectsGet : (expectJsonUnpack -> toMsg) -> Cmd toMsg
projectsGet toMsg =
    Http.get
        { url = "/projects/{project_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


projectsListCollaborators : (expectJsonUnpack -> toMsg) -> Cmd toMsg
projectsListCollaborators toMsg =
    Http.get
        { url = "/projects/{project_id}/collaborators"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


projectsGetPermissionForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
projectsGetPermissionForUser toMsg =
    Http.get
        { url = "/projects/{project_id}/collaborators/{username}/permission"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


projectsListColumns : (expectJsonUnpack -> toMsg) -> Cmd toMsg
projectsListColumns toMsg =
    Http.get
        { url = "/projects/{project_id}/columns"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


rateLimitGet : (expectJsonUnpack -> toMsg) -> Cmd toMsg
rateLimitGet toMsg =
    Http.get
        { url = "/rate_limit"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGet : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGet toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListArtifactsForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListArtifactsForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/artifacts"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetArtifact : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetArtifact toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsDownloadArtifact : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsDownloadArtifact toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetActionsCacheUsage : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetActionsCacheUsage toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/cache/usage"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetActionsCacheList : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetActionsCacheList toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/caches"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetJobForWorkflowRun : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetJobForWorkflowRun toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/jobs/{job_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsDownloadJobLogsForWorkflowRun : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsDownloadJobLogsForWorkflowRun toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetGithubActionsPermissionsRepository :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetGithubActionsPermissionsRepository toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/permissions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetWorkflowAccessToRepository : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetWorkflowAccessToRepository toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/permissions/access"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetAllowedActionsRepository : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetAllowedActionsRepository toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/permissions/selected-actions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetGithubActionsDefaultWorkflowPermissionsRepository :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetGithubActionsDefaultWorkflowPermissionsRepository toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/permissions/workflow"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListSelfHostedRunnersForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListSelfHostedRunnersForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/runners"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListRunnerApplicationsForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListRunnerApplicationsForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/runners/downloads"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetSelfHostedRunnerForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetSelfHostedRunnerForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/runners/{runner_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListLabelsForSelfHostedRunnerForRepo :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListLabelsForSelfHostedRunnerForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListWorkflowRunsForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListWorkflowRunsForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/runs"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetWorkflowRun : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetWorkflowRun toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/runs/{run_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetReviewsForRun : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetReviewsForRun toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListWorkflowRunArtifacts : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListWorkflowRunArtifacts toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetWorkflowRunAttempt : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetWorkflowRunAttempt toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListJobsForWorkflowRunAttempt : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListJobsForWorkflowRunAttempt toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsDownloadWorkflowRunAttemptLogs : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsDownloadWorkflowRunAttemptLogs toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListJobsForWorkflowRun : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListJobsForWorkflowRun toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsDownloadWorkflowRunLogs : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsDownloadWorkflowRunLogs toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/runs/{run_id}/logs"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetPendingDeploymentsForRun : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetPendingDeploymentsForRun toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetWorkflowRunUsage : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetWorkflowRunUsage toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/runs/{run_id}/timing"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListRepoSecrets : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListRepoSecrets toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/secrets"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetRepoPublicKey : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetRepoPublicKey toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/secrets/public-key"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetRepoSecret : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetRepoSecret toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/secrets/{secret_name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListRepoWorkflows : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListRepoWorkflows toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/workflows"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetWorkflow : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetWorkflow toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListWorkflowRuns : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListWorkflowRuns toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetWorkflowUsage : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetWorkflowUsage toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesListAssignees : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesListAssignees toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/assignees"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesCheckUserCanBeAssigned : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesCheckUserCanBeAssigned toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/assignees/{assignee}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListAutolinks : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListAutolinks toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/autolinks"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetAutolink : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetAutolink toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/autolinks/{autolink_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListBranches : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListBranches toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/branches"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetBranch : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetBranch toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/branches/{branch}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetBranchProtection : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetBranchProtection toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/branches/{branch}/protection"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetAdminBranchProtection : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetAdminBranchProtection toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetPullRequestReviewProtection : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetPullRequestReviewProtection toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetCommitSignatureProtection : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetCommitSignatureProtection toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetStatusChecksProtection : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetStatusChecksProtection toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetAllStatusCheckContexts : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetAllStatusCheckContexts toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetAccessRestrictions : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetAccessRestrictions toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetAppsWithAccessToProtectedBranch :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetAppsWithAccessToProtectedBranch toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetTeamsWithAccessToProtectedBranch :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetTeamsWithAccessToProtectedBranch toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetUsersWithAccessToProtectedBranch :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetUsersWithAccessToProtectedBranch toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


checksGet : (expectJsonUnpack -> toMsg) -> Cmd toMsg
checksGet toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/check-runs/{check_run_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


checksListAnnotations : (expectJsonUnpack -> toMsg) -> Cmd toMsg
checksListAnnotations toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


checksGetSuite : (expectJsonUnpack -> toMsg) -> Cmd toMsg
checksGetSuite toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/check-suites/{check_suite_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


checksListForSuite : (expectJsonUnpack -> toMsg) -> Cmd toMsg
checksListForSuite toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codeScanningListAlertsForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codeScanningListAlertsForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/code-scanning/alerts"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codeScanningGetAlert : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codeScanningGetAlert toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codeScanningListAlertInstances : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codeScanningListAlertInstances toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codeScanningListRecentAnalyses : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codeScanningListRecentAnalyses toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/code-scanning/analyses"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codeScanningGetAnalysis : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codeScanningGetAnalysis toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codeScanningListCodeqlDatabases : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codeScanningListCodeqlDatabases toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/code-scanning/codeql/databases"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codeScanningGetCodeqlDatabase : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codeScanningGetCodeqlDatabase toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codeScanningGetSarif : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codeScanningGetSarif toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposCodeownersErrors : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposCodeownersErrors toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/codeowners/errors"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesListInRepositoryForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesListInRepositoryForAuthenticatedUser toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/codespaces"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesListDevcontainersInRepositoryForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesListDevcontainersInRepositoryForAuthenticatedUser toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/codespaces/devcontainers"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesRepoMachinesForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesRepoMachinesForAuthenticatedUser toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/codespaces/machines"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesPreFlightWithRepoForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesPreFlightWithRepoForAuthenticatedUser toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/codespaces/new"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesListRepoSecrets : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesListRepoSecrets toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/codespaces/secrets"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesGetRepoPublicKey : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesGetRepoPublicKey toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/codespaces/secrets/public-key"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesGetRepoSecret : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesGetRepoSecret toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListCollaborators : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListCollaborators toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/collaborators"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposCheckCollaborator : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposCheckCollaborator toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/collaborators/{username}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetCollaboratorPermissionLevel : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetCollaboratorPermissionLevel toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/collaborators/{username}/permission"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListCommitCommentsForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListCommitCommentsForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/comments"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetCommitComment : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetCommitComment toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/comments/{comment_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reactionsListForCommitComment : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reactionsListForCommitComment toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/comments/{comment_id}/reactions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListCommits : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListCommits toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/commits"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListBranchesForHeadCommit : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListBranchesForHeadCommit toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListCommentsForCommit : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListCommentsForCommit toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/commits/{commit_sha}/comments"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListPullRequestsAssociatedWithCommit :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListPullRequestsAssociatedWithCommit toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/commits/{commit_sha}/pulls"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetCommit : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetCommit toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/commits/{ref}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


checksListForRef : (expectJsonUnpack -> toMsg) -> Cmd toMsg
checksListForRef toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/commits/{ref}/check-runs"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


checksListSuitesForRef : (expectJsonUnpack -> toMsg) -> Cmd toMsg
checksListSuitesForRef toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/commits/{ref}/check-suites"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetCombinedStatusForRef : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetCombinedStatusForRef toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/commits/{ref}/status"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListCommitStatusesForRef : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListCommitStatusesForRef toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/commits/{ref}/statuses"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetCommunityProfileMetrics : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetCommunityProfileMetrics toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/community/profile"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposCompareCommits : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposCompareCommits toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/compare/{basehead}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetContent : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetContent toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/contents/{path}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListContributors : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListContributors toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/contributors"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


dependabotListAlertsForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
dependabotListAlertsForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/dependabot/alerts"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


dependabotGetAlert : (expectJsonUnpack -> toMsg) -> Cmd toMsg
dependabotGetAlert toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


dependabotListRepoSecrets : (expectJsonUnpack -> toMsg) -> Cmd toMsg
dependabotListRepoSecrets toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/dependabot/secrets"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


dependabotGetRepoPublicKey : (expectJsonUnpack -> toMsg) -> Cmd toMsg
dependabotGetRepoPublicKey toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/dependabot/secrets/public-key"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


dependabotGetRepoSecret : (expectJsonUnpack -> toMsg) -> Cmd toMsg
dependabotGetRepoSecret toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


dependencyGraphDiffRange : (expectJsonUnpack -> toMsg) -> Cmd toMsg
dependencyGraphDiffRange toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListDeployments : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListDeployments toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/deployments"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetDeployment : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetDeployment toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/deployments/{deployment_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListDeploymentStatuses : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListDeploymentStatuses toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetDeploymentStatus : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetDeploymentStatus toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetAllEnvironments : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetAllEnvironments toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/environments"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetEnvironment : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetEnvironment toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/environments/{environment_name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListDeploymentBranchPolicies : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListDeploymentBranchPolicies toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetDeploymentBranchPolicy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetDeploymentBranchPolicy toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListRepoEvents : (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListRepoEvents toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/events"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListForks : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListForks toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/forks"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gitGetBlob : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gitGetBlob toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/git/blobs/{file_sha}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gitGetCommit : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gitGetCommit toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/git/commits/{commit_sha}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gitListMatchingRefs : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gitListMatchingRefs toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/git/matching-refs/{ref}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gitGetRef : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gitGetRef toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/git/ref/{ref}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gitGetTag : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gitGetTag toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/git/tags/{tag_sha}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gitGetTree : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gitGetTree toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/git/trees/{tree_sha}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListWebhooks : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListWebhooks toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/hooks"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetWebhook : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetWebhook toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/hooks/{hook_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetWebhookConfigForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetWebhookConfigForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListWebhookDeliveries : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListWebhookDeliveries toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetWebhookDelivery : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetWebhookDelivery toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


migrationsGetImportStatus : (expectJsonUnpack -> toMsg) -> Cmd toMsg
migrationsGetImportStatus toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/import"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


migrationsGetCommitAuthors : (expectJsonUnpack -> toMsg) -> Cmd toMsg
migrationsGetCommitAuthors toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/import/authors"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


migrationsGetLargeFiles : (expectJsonUnpack -> toMsg) -> Cmd toMsg
migrationsGetLargeFiles toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/import/large_files"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsGetRepoInstallation : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsGetRepoInstallation toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/installation"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


interactionsGetRestrictionsForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
interactionsGetRestrictionsForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/interaction-limits"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListInvitations : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListInvitations toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/invitations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesListForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesListForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/issues"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesListCommentsForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesListCommentsForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/issues/comments"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesGetComment : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesGetComment toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/issues/comments/{comment_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reactionsListForIssueComment : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reactionsListForIssueComment toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesListEventsForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesListEventsForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/issues/events"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesGetEvent : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesGetEvent toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/issues/events/{event_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesGet : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesGet toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/issues/{issue_number}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesListComments : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesListComments toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/issues/{issue_number}/comments"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesListEvents : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesListEvents toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/issues/{issue_number}/events"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesListLabelsOnIssue : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesListLabelsOnIssue toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/issues/{issue_number}/labels"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reactionsListForIssue : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reactionsListForIssue toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/issues/{issue_number}/reactions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesListEventsForTimeline : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesListEventsForTimeline toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/issues/{issue_number}/timeline"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListDeployKeys : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListDeployKeys toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/keys"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetDeployKey : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetDeployKey toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/keys/{key_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesListLabelsForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesListLabelsForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/labels"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesGetLabel : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesGetLabel toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/labels/{name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListLanguages : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListLanguages toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/languages"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


licensesGetForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
licensesGetForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/license"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesListMilestones : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesListMilestones toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/milestones"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesGetMilestone : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesGetMilestone toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/milestones/{milestone_number}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesListLabelsForMilestone : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesListLabelsForMilestone toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/milestones/{milestone_number}/labels"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListRepoNotificationsForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListRepoNotificationsForAuthenticatedUser toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/notifications"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetPages : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetPages toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pages"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListPagesBuilds : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListPagesBuilds toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pages/builds"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetLatestPagesBuild : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetLatestPagesBuild toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pages/builds/latest"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetPagesBuild : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetPagesBuild toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pages/builds/{build_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetPagesHealthCheck : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetPagesHealthCheck toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pages/health"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


projectsListForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
projectsListForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/projects"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


pullsList : (expectJsonUnpack -> toMsg) -> Cmd toMsg
pullsList toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pulls"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


pullsListReviewCommentsForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
pullsListReviewCommentsForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pulls/comments"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


pullsGetReviewComment : (expectJsonUnpack -> toMsg) -> Cmd toMsg
pullsGetReviewComment toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pulls/comments/{comment_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reactionsListForPullRequestReviewComment :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
reactionsListForPullRequestReviewComment toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


pullsGet : (expectJsonUnpack -> toMsg) -> Cmd toMsg
pullsGet toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pulls/{pull_number}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


pullsListReviewComments : (expectJsonUnpack -> toMsg) -> Cmd toMsg
pullsListReviewComments toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pulls/{pull_number}/comments"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


pullsListCommits : (expectJsonUnpack -> toMsg) -> Cmd toMsg
pullsListCommits toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pulls/{pull_number}/commits"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


pullsListFiles : (expectJsonUnpack -> toMsg) -> Cmd toMsg
pullsListFiles toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pulls/{pull_number}/files"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


pullsCheckIfMerged : (expectJsonUnpack -> toMsg) -> Cmd toMsg
pullsCheckIfMerged toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pulls/{pull_number}/merge"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


pullsListRequestedReviewers : (expectJsonUnpack -> toMsg) -> Cmd toMsg
pullsListRequestedReviewers toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


pullsListReviews : (expectJsonUnpack -> toMsg) -> Cmd toMsg
pullsListReviews toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


pullsGetReview : (expectJsonUnpack -> toMsg) -> Cmd toMsg
pullsGetReview toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


pullsListCommentsForReview : (expectJsonUnpack -> toMsg) -> Cmd toMsg
pullsListCommentsForReview toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetReadme : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetReadme toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/readme"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetReadmeInDirectory : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetReadmeInDirectory toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/readme/{dir}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListReleases : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListReleases toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/releases"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetReleaseAsset : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetReleaseAsset toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/releases/assets/{asset_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetLatestRelease : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetLatestRelease toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/releases/latest"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetReleaseByTag : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetReleaseByTag toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/releases/tags/{tag}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetRelease : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetRelease toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/releases/{release_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListReleaseAssets : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListReleaseAssets toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/releases/{release_id}/assets"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reactionsListForRelease : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reactionsListForRelease toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/releases/{release_id}/reactions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


secretScanningListAlertsForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
secretScanningListAlertsForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/secret-scanning/alerts"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


secretScanningGetAlert : (expectJsonUnpack -> toMsg) -> Cmd toMsg
secretScanningGetAlert toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


secretScanningListLocationsForAlert : (expectJsonUnpack -> toMsg) -> Cmd toMsg
secretScanningListLocationsForAlert toMsg =
    Http.get
        { url =
            "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListStargazersForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListStargazersForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/stargazers"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetCodeFrequencyStats : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetCodeFrequencyStats toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/stats/code_frequency"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetCommitActivityStats : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetCommitActivityStats toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/stats/commit_activity"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetContributorsStats : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetContributorsStats toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/stats/contributors"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetParticipationStats : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetParticipationStats toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/stats/participation"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetPunchCardStats : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetPunchCardStats toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/stats/punch_card"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListWatchersForRepo : (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListWatchersForRepo toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/subscribers"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityGetRepoSubscription : (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityGetRepoSubscription toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/subscription"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListTags : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListTags toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/tags"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListTagProtection : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListTagProtection toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/tags/protection"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposDownloadTarballArchive : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposDownloadTarballArchive toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/tarball/{ref}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListTeams : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListTeams toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/teams"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetAllTopics : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetAllTopics toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/topics"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetClones : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetClones toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/traffic/clones"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetTopPaths : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetTopPaths toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/traffic/popular/paths"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetTopReferrers : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetTopReferrers toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/traffic/popular/referrers"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposGetViews : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposGetViews toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/traffic/views"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposCheckVulnerabilityAlerts : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposCheckVulnerabilityAlerts toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/vulnerability-alerts"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposDownloadZipballArchive : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposDownloadZipballArchive toMsg =
    Http.get
        { url = "/repos/{owner}/{repo}/zipball/{ref}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListPublic : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListPublic toMsg =
    Http.get
        { url = "/repositories"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsListEnvironmentSecrets : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsListEnvironmentSecrets toMsg =
    Http.get
        { url =
            "/repositories/{repository_id}/environments/{environment_name}/secrets"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetEnvironmentPublicKey : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetEnvironmentPublicKey toMsg =
    Http.get
        { url =
            "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


actionsGetEnvironmentSecret : (expectJsonUnpack -> toMsg) -> Cmd toMsg
actionsGetEnvironmentSecret toMsg =
    Http.get
        { url =
            "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


searchCode : (expectJsonUnpack -> toMsg) -> Cmd toMsg
searchCode toMsg =
    Http.get
        { url = "/search/code"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


searchCommits : (expectJsonUnpack -> toMsg) -> Cmd toMsg
searchCommits toMsg =
    Http.get
        { url = "/search/commits"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


searchIssuesAndPullRequests : (expectJsonUnpack -> toMsg) -> Cmd toMsg
searchIssuesAndPullRequests toMsg =
    Http.get
        { url = "/search/issues"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


searchLabels : (expectJsonUnpack -> toMsg) -> Cmd toMsg
searchLabels toMsg =
    Http.get
        { url = "/search/labels"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


searchRepos : (expectJsonUnpack -> toMsg) -> Cmd toMsg
searchRepos toMsg =
    Http.get
        { url = "/search/repositories"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


searchTopics : (expectJsonUnpack -> toMsg) -> Cmd toMsg
searchTopics toMsg =
    Http.get
        { url = "/search/topics"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


searchUsers : (expectJsonUnpack -> toMsg) -> Cmd toMsg
searchUsers toMsg =
    Http.get
        { url = "/search/users"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsGetLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsGetLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListDiscussionsLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListDiscussionsLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}/discussions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsGetDiscussionLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsGetDiscussionLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}/discussions/{discussion_number}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListDiscussionCommentsLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListDiscussionCommentsLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}/discussions/{discussion_number}/comments"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsGetDiscussionCommentLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsGetDiscussionCommentLegacy toMsg =
    Http.get
        { url =
            "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reactionsListForTeamDiscussionCommentLegacy :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
reactionsListForTeamDiscussionCommentLegacy toMsg =
    Http.get
        { url =
            "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reactionsListForTeamDiscussionLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reactionsListForTeamDiscussionLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}/discussions/{discussion_number}/reactions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListPendingInvitationsLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListPendingInvitationsLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}/invitations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListMembersLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListMembersLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}/members"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsGetMemberLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsGetMemberLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}/members/{username}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsGetMembershipForUserLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsGetMembershipForUserLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}/memberships/{username}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListProjectsLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListProjectsLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}/projects"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsCheckPermissionsForProjectLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsCheckPermissionsForProjectLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}/projects/{project_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListReposLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListReposLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}/repos"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsCheckPermissionsForRepoLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsCheckPermissionsForRepoLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}/repos/{owner}/{repo}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListChildLegacy : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListChildLegacy toMsg =
    Http.get
        { url = "/teams/{team_id}/teams"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersGetAuthenticated : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersGetAuthenticated toMsg =
    Http.get
        { url = "/user", expect = Http.expectJson toMsg (Debug.todo "todo") }


usersListBlockedByAuthenticatedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersListBlockedByAuthenticatedUser toMsg =
    Http.get
        { url = "/user/blocks"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersCheckBlocked : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersCheckBlocked toMsg =
    Http.get
        { url = "/user/blocks/{username}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesListForAuthenticatedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesListForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/codespaces"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesListSecretsForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesListSecretsForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/codespaces/secrets"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesGetPublicKeyForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesGetPublicKeyForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/codespaces/secrets/public-key"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesGetSecretForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesGetSecretForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/codespaces/secrets/{secret_name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesListRepositoriesForSecretForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesListRepositoriesForSecretForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/codespaces/secrets/{secret_name}/repositories"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesGetForAuthenticatedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesGetForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/codespaces/{codespace_name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesGetExportDetailsForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesGetExportDetailsForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/codespaces/{codespace_name}/exports/{export_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


codespacesCodespaceMachinesForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
codespacesCodespaceMachinesForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/codespaces/{codespace_name}/machines"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersListEmailsForAuthenticatedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersListEmailsForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/emails"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersListFollowersForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersListFollowersForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/followers"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersListFollowedByAuthenticatedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersListFollowedByAuthenticatedUser toMsg =
    Http.get
        { url = "/user/following"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersCheckPersonIsFollowedByAuthenticated :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersCheckPersonIsFollowedByAuthenticated toMsg =
    Http.get
        { url = "/user/following/{username}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersListGpgKeysForAuthenticatedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersListGpgKeysForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/gpg_keys"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersGetGpgKeyForAuthenticatedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersGetGpgKeyForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/gpg_keys/{gpg_key_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsListInstallationsForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsListInstallationsForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/installations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsListInstallationReposForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsListInstallationReposForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/installations/{installation_id}/repositories"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


interactionsGetRestrictionsForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
interactionsGetRestrictionsForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/interaction-limits"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


issuesListForAuthenticatedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
issuesListForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/issues"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersListPublicSshKeysForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersListPublicSshKeysForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/keys"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersGetPublicSshKeyForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersGetPublicSshKeyForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/keys/{key_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsListSubscriptionsForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsListSubscriptionsForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/marketplace_purchases"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsListSubscriptionsForAuthenticatedUserStubbed :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsListSubscriptionsForAuthenticatedUserStubbed toMsg =
    Http.get
        { url = "/user/marketplace_purchases/stubbed"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListMembershipsForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListMembershipsForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/memberships/orgs"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsGetMembershipForAuthenticatedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsGetMembershipForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/memberships/orgs/{org}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


migrationsListForAuthenticatedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
migrationsListForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/migrations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


migrationsGetStatusForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
migrationsGetStatusForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/migrations/{migration_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


migrationsGetArchiveForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
migrationsGetArchiveForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/migrations/{migration_id}/archive"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


migrationsListReposForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
migrationsListReposForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/migrations/{migration_id}/repositories"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListForAuthenticatedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/orgs"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


packagesListPackagesForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
packagesListPackagesForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/packages"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


packagesGetPackageForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
packagesGetPackageForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/packages/{package_type}/{package_name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser toMsg =
    Http.get
        { url = "/user/packages/{package_type}/{package_name}/versions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


packagesGetPackageVersionForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
packagesGetPackageVersionForAuthenticatedUser toMsg =
    Http.get
        { url =
            "/user/packages/{package_type}/{package_name}/versions/{package_version_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersListPublicEmailsForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersListPublicEmailsForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/public_emails"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListForAuthenticatedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/repos"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListInvitationsForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListInvitationsForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/repository_invitations"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersListSshSigningKeysForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersListSshSigningKeysForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/ssh_signing_keys"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersGetSshSigningKeyForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersGetSshSigningKeyForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/ssh_signing_keys/{ssh_signing_key_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListReposStarredByAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListReposStarredByAuthenticatedUser toMsg =
    Http.get
        { url = "/user/starred"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityCheckRepoIsStarredByAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityCheckRepoIsStarredByAuthenticatedUser toMsg =
    Http.get
        { url = "/user/starred/{owner}/{repo}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListWatchedReposForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListWatchedReposForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/subscriptions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


teamsListForAuthenticatedUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
teamsListForAuthenticatedUser toMsg =
    Http.get
        { url = "/user/teams"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersList : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersList toMsg =
    Http.get
        { url = "/users", expect = Http.expectJson toMsg (Debug.todo "todo") }


usersGetByUsername : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersGetByUsername toMsg =
    Http.get
        { url = "/users/{username}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListEventsForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListEventsForAuthenticatedUser toMsg =
    Http.get
        { url = "/users/{username}/events"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListOrgEventsForAuthenticatedUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListOrgEventsForAuthenticatedUser toMsg =
    Http.get
        { url = "/users/{username}/events/orgs/{org}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListPublicEventsForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListPublicEventsForUser toMsg =
    Http.get
        { url = "/users/{username}/events/public"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersListFollowersForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersListFollowersForUser toMsg =
    Http.get
        { url = "/users/{username}/followers"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersListFollowingForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersListFollowingForUser toMsg =
    Http.get
        { url = "/users/{username}/following"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersCheckFollowingForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersCheckFollowingForUser toMsg =
    Http.get
        { url = "/users/{username}/following/{target_user}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


gistsListForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
gistsListForUser toMsg =
    Http.get
        { url = "/users/{username}/gists"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersListGpgKeysForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersListGpgKeysForUser toMsg =
    Http.get
        { url = "/users/{username}/gpg_keys"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersGetContextForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersGetContextForUser toMsg =
    Http.get
        { url = "/users/{username}/hovercard"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


appsGetUserInstallation : (expectJsonUnpack -> toMsg) -> Cmd toMsg
appsGetUserInstallation toMsg =
    Http.get
        { url = "/users/{username}/installation"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersListPublicKeysForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersListPublicKeysForUser toMsg =
    Http.get
        { url = "/users/{username}/keys"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


orgsListForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
orgsListForUser toMsg =
    Http.get
        { url = "/users/{username}/orgs"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


packagesListPackagesForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
packagesListPackagesForUser toMsg =
    Http.get
        { url = "/users/{username}/packages"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


packagesGetPackageForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
packagesGetPackageForUser toMsg =
    Http.get
        { url = "/users/{username}/packages/{package_type}/{package_name}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


packagesGetAllPackageVersionsForPackageOwnedByUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
packagesGetAllPackageVersionsForPackageOwnedByUser toMsg =
    Http.get
        { url =
            "/users/{username}/packages/{package_type}/{package_name}/versions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


packagesGetPackageVersionForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
packagesGetPackageVersionForUser toMsg =
    Http.get
        { url =
            "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


projectsListForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
projectsListForUser toMsg =
    Http.get
        { url = "/users/{username}/projects"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListReceivedEventsForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListReceivedEventsForUser toMsg =
    Http.get
        { url = "/users/{username}/received_events"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListReceivedPublicEventsForUser :
    (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListReceivedPublicEventsForUser toMsg =
    Http.get
        { url = "/users/{username}/received_events/public"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


reposListForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
reposListForUser toMsg =
    Http.get
        { url = "/users/{username}/repos"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


billingGetGithubActionsBillingUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
billingGetGithubActionsBillingUser toMsg =
    Http.get
        { url = "/users/{username}/settings/billing/actions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


billingGetGithubPackagesBillingUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
billingGetGithubPackagesBillingUser toMsg =
    Http.get
        { url = "/users/{username}/settings/billing/packages"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


billingGetSharedStorageBillingUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
billingGetSharedStorageBillingUser toMsg =
    Http.get
        { url = "/users/{username}/settings/billing/shared-storage"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


usersListSshSigningKeysForUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
usersListSshSigningKeysForUser toMsg =
    Http.get
        { url = "/users/{username}/ssh_signing_keys"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListReposStarredByUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListReposStarredByUser toMsg =
    Http.get
        { url = "/users/{username}/starred"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


activityListReposWatchedByUser : (expectJsonUnpack -> toMsg) -> Cmd toMsg
activityListReposWatchedByUser toMsg =
    Http.get
        { url = "/users/{username}/subscriptions"
        , expect = Http.expectJson toMsg (Debug.todo "todo")
        }


metaGetZen : (expectJsonUnpack -> toMsg) -> Cmd toMsg
metaGetZen toMsg =
    Http.get
        { url = "/zen", expect = Http.expectJson toMsg (Debug.todo "todo") }


type Nullable value
    = Null
    | Present value


type alias WorkflowUsage =
    { billable :
        { uBUNTU : { totalMs : Int }
        , mACOS : { totalMs : Int }
        , wINDOWS : { totalMs : Int }
        }
    }


decodeWorkflowUsage : Json.Decode.Decoder WorkflowUsage
decodeWorkflowUsage =
    Json.Decode.succeed (\billable -> { billable = billable })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "billable"
                (Json.Decode.succeed
                  (\uBUNTU mACOS wINDOWS ->
                      { uBUNTU = uBUNTU, mACOS = mACOS, wINDOWS = wINDOWS }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "UBUNTU"
                            (Json.Decode.succeed
                                (\totalMs -> { totalMs = totalMs })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "total_ms"
                                        Json.Decode.int
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "MACOS"
                            (Json.Decode.succeed
                                (\totalMs -> { totalMs = totalMs })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "total_ms"
                                        Json.Decode.int
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "WINDOWS"
                            (Json.Decode.succeed
                                (\totalMs -> { totalMs = totalMs })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "total_ms"
                                        Json.Decode.int
                                    )
                            )
                        )
                )
            )


encodeWorkflowUsage : WorkflowUsage -> Json.Encode.Value
encodeWorkflowUsage rec =
    Json.Encode.object
        [ ( "billable"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "UBUNTU"
                      , (\rec_0_1_1_1_0_1_1_0_0 ->
                            Json.Encode.object
                                [ ( "total_ms"
                                  , Json.Encode.int
                                        rec_0_1_1_1_0_1_1_0_0.totalMs
                                  )
                                ]
                        )
                            rec0.uBUNTU
                      )
                    , ( "MACOS"
                      , (\rec_0_2_1_1_0_1_1_0_0 ->
                            Json.Encode.object
                                [ ( "total_ms"
                                  , Json.Encode.int
                                        rec_0_2_1_1_0_1_1_0_0.totalMs
                                  )
                                ]
                        )
                            rec0.mACOS
                      )
                    , ( "WINDOWS"
                      , (\rec_0_3_1_1_0_1_1_0_0 ->
                            Json.Encode.object
                                [ ( "total_ms"
                                  , Json.Encode.int
                                        rec_0_3_1_1_0_1_1_0_0.totalMs
                                  )
                                ]
                        )
                            rec0.wINDOWS
                      )
                    ]
            )
                rec.billable
          )
        ]


type alias WorkflowRunUsage =
    { billable :
        { uBUNTU :
            { totalMs : Int
            , jobs : Int
            , jobRuns : List { jobId : Int, durationMs : Int }
            }
        , mACOS :
            { totalMs : Int
            , jobs : Int
            , jobRuns : List { jobId : Int, durationMs : Int }
            }
        , wINDOWS :
            { totalMs : Int
            , jobs : Int
            , jobRuns : List { jobId : Int, durationMs : Int }
            }
        }
    , runDurationMs : Int
    }


decodeWorkflowRunUsage : Json.Decode.Decoder WorkflowRunUsage
decodeWorkflowRunUsage =
    Json.Decode.succeed
     (\billable runDurationMs ->
         { billable = billable, runDurationMs = runDurationMs }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "billable"
                (Json.Decode.succeed
                  (\uBUNTU mACOS wINDOWS ->
                      { uBUNTU = uBUNTU, mACOS = mACOS, wINDOWS = wINDOWS }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "UBUNTU"
                            (Json.Decode.succeed
                              (\totalMs jobs jobRuns ->
                                  { totalMs = totalMs
                                  , jobs = jobs
                                  , jobRuns = jobRuns
                                  }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "total_ms"
                                        Json.Decode.int
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "jobs" Json.Decode.int)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "job_runs"
                                        (Json.Decode.list
                                            (Json.Decode.succeed
                                              (\jobId durationMs ->
                                                  { jobId = jobId
                                                  , durationMs = durationMs
                                                  }
                                              )
                                                |> Json.Decode.Extra.andMap
                                                    (Json.Decode.field
                                                        "job_id"
                                                        Json.Decode.int
                                                    )
                                                |> Json.Decode.Extra.andMap
                                                    (Json.Decode.field
                                                        "duration_ms"
                                                        Json.Decode.int
                                                    )
                                            )
                                        )
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "MACOS"
                            (Json.Decode.succeed
                              (\totalMs jobs jobRuns ->
                                  { totalMs = totalMs
                                  , jobs = jobs
                                  , jobRuns = jobRuns
                                  }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "total_ms"
                                        Json.Decode.int
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "jobs" Json.Decode.int)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "job_runs"
                                        (Json.Decode.list
                                            (Json.Decode.succeed
                                              (\jobId durationMs ->
                                                  { jobId = jobId
                                                  , durationMs = durationMs
                                                  }
                                              )
                                                |> Json.Decode.Extra.andMap
                                                    (Json.Decode.field
                                                        "job_id"
                                                        Json.Decode.int
                                                    )
                                                |> Json.Decode.Extra.andMap
                                                    (Json.Decode.field
                                                        "duration_ms"
                                                        Json.Decode.int
                                                    )
                                            )
                                        )
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "WINDOWS"
                            (Json.Decode.succeed
                              (\totalMs jobs jobRuns ->
                                  { totalMs = totalMs
                                  , jobs = jobs
                                  , jobRuns = jobRuns
                                  }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "total_ms"
                                        Json.Decode.int
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "jobs" Json.Decode.int)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "job_runs"
                                        (Json.Decode.list
                                            (Json.Decode.succeed
                                              (\jobId durationMs ->
                                                  { jobId = jobId
                                                  , durationMs = durationMs
                                                  }
                                              )
                                                |> Json.Decode.Extra.andMap
                                                    (Json.Decode.field
                                                        "job_id"
                                                        Json.Decode.int
                                                    )
                                                |> Json.Decode.Extra.andMap
                                                    (Json.Decode.field
                                                        "duration_ms"
                                                        Json.Decode.int
                                                    )
                                            )
                                        )
                                    )
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "run_duration_ms" Json.Decode.int)


encodeWorkflowRunUsage : WorkflowRunUsage -> Json.Encode.Value
encodeWorkflowRunUsage rec =
    Json.Encode.object
        [ ( "billable"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "UBUNTU"
                      , (\rec_0_1_1_1_0_1_1_0_0 ->
                            Json.Encode.object
                                [ ( "total_ms"
                                  , Json.Encode.int
                                        rec_0_1_1_1_0_1_1_0_0.totalMs
                                  )
                                , ( "jobs"
                                  , Json.Encode.int rec_0_1_1_1_0_1_1_0_0.jobs
                                  )
                                , ( "job_runs"
                                  , Json.Encode.list
                                        (\rec_1_0_3_1_1_0_1_1_1_0_1_1_0_0 ->
                                            Json.Encode.object
                                                [ ( "job_id"
                                                  , Json.Encode.int
                                                        rec_1_0_3_1_1_0_1_1_1_0_1_1_0_0.jobId
                                                  )
                                                , ( "duration_ms"
                                                  , Json.Encode.int
                                                        rec_1_0_3_1_1_0_1_1_1_0_1_1_0_0.durationMs
                                                  )
                                                ]
                                        )
                                        rec_0_1_1_1_0_1_1_0_0.jobRuns
                                  )
                                ]
                        )
                            rec0.uBUNTU
                      )
                    , ( "MACOS"
                      , (\rec_0_2_1_1_0_1_1_0_0 ->
                            Json.Encode.object
                                [ ( "total_ms"
                                  , Json.Encode.int
                                        rec_0_2_1_1_0_1_1_0_0.totalMs
                                  )
                                , ( "jobs"
                                  , Json.Encode.int rec_0_2_1_1_0_1_1_0_0.jobs
                                  )
                                , ( "job_runs"
                                  , Json.Encode.list
                                        (\rec_1_0_3_1_1_0_2_1_1_0_1_1_0_0 ->
                                            Json.Encode.object
                                                [ ( "job_id"
                                                  , Json.Encode.int
                                                        rec_1_0_3_1_1_0_2_1_1_0_1_1_0_0.jobId
                                                  )
                                                , ( "duration_ms"
                                                  , Json.Encode.int
                                                        rec_1_0_3_1_1_0_2_1_1_0_1_1_0_0.durationMs
                                                  )
                                                ]
                                        )
                                        rec_0_2_1_1_0_1_1_0_0.jobRuns
                                  )
                                ]
                        )
                            rec0.mACOS
                      )
                    , ( "WINDOWS"
                      , (\rec_0_3_1_1_0_1_1_0_0 ->
                            Json.Encode.object
                                [ ( "total_ms"
                                  , Json.Encode.int
                                        rec_0_3_1_1_0_1_1_0_0.totalMs
                                  )
                                , ( "jobs"
                                  , Json.Encode.int rec_0_3_1_1_0_1_1_0_0.jobs
                                  )
                                , ( "job_runs"
                                  , Json.Encode.list
                                        (\rec_1_0_3_1_1_0_3_1_1_0_1_1_0_0 ->
                                            Json.Encode.object
                                                [ ( "job_id"
                                                  , Json.Encode.int
                                                        rec_1_0_3_1_1_0_3_1_1_0_1_1_0_0.jobId
                                                  )
                                                , ( "duration_ms"
                                                  , Json.Encode.int
                                                        rec_1_0_3_1_1_0_3_1_1_0_1_1_0_0.durationMs
                                                  )
                                                ]
                                        )
                                        rec_0_3_1_1_0_1_1_0_0.jobRuns
                                  )
                                ]
                        )
                            rec0.wINDOWS
                      )
                    ]
            )
                rec.billable
          )
        , ( "run_duration_ms", Json.Encode.int rec.runDurationMs )
        ]


type alias WorkflowRun =
    { id : Int
    , name : Nullable String
    , nodeId : String
    , checkSuiteId : Int
    , checkSuiteNodeId : String
    , headBranch : Nullable String
    , headSha : String
    , path : String
    , runNumber : Int
    , runAttempt : Int
    , referencedWorkflows : Nullable (List ReferencedWorkflow)
    , event : String
    , status : Nullable String
    , conclusion : Nullable String
    , workflowId : Int
    , url : String
    , htmlUrl : String
    , pullRequests : Nullable (List PullRequestMinimal)
    , createdAt : String
    , updatedAt : String
    , actor : SimpleUser
    , triggeringActor : SimpleUser
    , runStartedAt : String
    , jobsUrl : String
    , logsUrl : String
    , checkSuiteUrl : String
    , artifactsUrl : String
    , cancelUrl : String
    , rerunUrl : String
    , previousAttemptUrl : Nullable String
    , workflowUrl : String
    , headCommit : Debug.Todo
    , repository : MinimalRepository
    , headRepository : MinimalRepository
    , headRepositoryId : Int
    , displayTitle : String
    }


decodeWorkflowRun : Json.Decode.Decoder WorkflowRun
decodeWorkflowRun =
    Json.Decode.succeed
     (\id name nodeId checkSuiteId checkSuiteNodeId headBranch headSha path runNumber runAttempt referencedWorkflows event status conclusion workflowId url htmlUrl pullRequests createdAt updatedAt actor triggeringActor runStartedAt jobsUrl logsUrl checkSuiteUrl artifactsUrl cancelUrl rerunUrl previousAttemptUrl workflowUrl headCommit repository headRepository headRepositoryId displayTitle ->
         { id = id
         , name = name
         , nodeId = nodeId
         , checkSuiteId = checkSuiteId
         , checkSuiteNodeId = checkSuiteNodeId
         , headBranch = headBranch
         , headSha = headSha
         , path = path
         , runNumber = runNumber
         , runAttempt = runAttempt
         , referencedWorkflows = referencedWorkflows
         , event = event
         , status = status
         , conclusion = conclusion
         , workflowId = workflowId
         , url = url
         , htmlUrl = htmlUrl
         , pullRequests = pullRequests
         , createdAt = createdAt
         , updatedAt = updatedAt
         , actor = actor
         , triggeringActor = triggeringActor
         , runStartedAt = runStartedAt
         , jobsUrl = jobsUrl
         , logsUrl = logsUrl
         , checkSuiteUrl = checkSuiteUrl
         , artifactsUrl = artifactsUrl
         , cancelUrl = cancelUrl
         , rerunUrl = rerunUrl
         , previousAttemptUrl = previousAttemptUrl
         , workflowUrl = workflowUrl
         , headCommit = headCommit
         , repository = repository
         , headRepository = headRepository
         , headRepositoryId = headRepositoryId
         , displayTitle = displayTitle
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "check_suite_id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "check_suite_node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "head_branch"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "head_sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "run_number" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "run_attempt" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "referenced_workflows"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list decodeReferencedWorkflow)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "status"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "conclusion"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "workflow_id" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pull_requests"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list decodePullRequestMinimal)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "triggering_actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "run_started_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "jobs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "logs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "check_suite_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "artifacts_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "cancel_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "rerun_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "previous_attempt_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "workflow_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "head_commit"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleCommit
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeMinimalRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "head_repository" decodeMinimalRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "head_repository_id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "display_title" Json.Decode.string)


encodeWorkflowRun : WorkflowRun -> Json.Encode.Value
encodeWorkflowRun rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.name
          )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "check_suite_id", Json.Encode.int rec.checkSuiteId )
        , ( "check_suite_node_id", Json.Encode.string rec.checkSuiteNodeId )
        , ( "head_branch"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.headBranch
          )
        , ( "head_sha", Json.Encode.string rec.headSha )
        , ( "path", Json.Encode.string rec.path )
        , ( "run_number", Json.Encode.int rec.runNumber )
        , ( "run_attempt", Json.Encode.int rec.runAttempt )
        , ( "referenced_workflows"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list encodeReferencedWorkflow value
            )
                rec.referencedWorkflows
          )
        , ( "event", Json.Encode.string rec.event )
        , ( "status"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.status
          )
        , ( "conclusion"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.conclusion
          )
        , ( "workflow_id", Json.Encode.int rec.workflowId )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "pull_requests"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list encodePullRequestMinimal value
            )
                rec.pullRequests
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "triggering_actor", encodeSimpleUser rec.triggeringActor )
        , ( "run_started_at", Json.Encode.string rec.runStartedAt )
        , ( "jobs_url", Json.Encode.string rec.jobsUrl )
        , ( "logs_url", Json.Encode.string rec.logsUrl )
        , ( "check_suite_url", Json.Encode.string rec.checkSuiteUrl )
        , ( "artifacts_url", Json.Encode.string rec.artifactsUrl )
        , ( "cancel_url", Json.Encode.string rec.cancelUrl )
        , ( "rerun_url", Json.Encode.string rec.rerunUrl )
        , ( "previous_attempt_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.previousAttemptUrl
          )
        , ( "workflow_url", Json.Encode.string rec.workflowUrl )
        , ( "head_commit", Debug.todo "decode anyOf" rec.headCommit )
        , ( "repository", encodeMinimalRepository rec.repository )
        , ( "head_repository", encodeMinimalRepository rec.headRepository )
        , ( "head_repository_id", Json.Encode.int rec.headRepositoryId )
        , ( "display_title", Json.Encode.string rec.displayTitle )
        ]


type alias Workflow =
    { id : Int
    , nodeId : String
    , name : String
    , path : String
    , state : String
    , createdAt : String
    , updatedAt : String
    , url : String
    , htmlUrl : String
    , badgeUrl : String
    , deletedAt : String
    }


decodeWorkflow : Json.Decode.Decoder Workflow
decodeWorkflow =
    Json.Decode.succeed
     (\id nodeId name path state createdAt updatedAt url htmlUrl badgeUrl deletedAt ->
         { id = id
         , nodeId = nodeId
         , name = name
         , path = path
         , state = state
         , createdAt = createdAt
         , updatedAt = updatedAt
         , url = url
         , htmlUrl = htmlUrl
         , badgeUrl = badgeUrl
         , deletedAt = deletedAt
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "badge_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deleted_at" Json.Decode.string)


encodeWorkflow : Workflow -> Json.Encode.Value
encodeWorkflow rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "path", Json.Encode.string rec.path )
        , ( "state", Json.Encode.string rec.state )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "badge_url", Json.Encode.string rec.badgeUrl )
        , ( "deleted_at", Json.Encode.string rec.deletedAt )
        ]


type alias WebhookMergeGroupChecksRequested =
    { action : String
    , installation : SimpleInstallation
    , mergeGroup : { baseRef : String, headRef : String, headSha : String }
    , organization : OrganizationSimple
    , repository : Repository
    , sender : SimpleUser
    }


decodeWebhookMergeGroupChecksRequested :
    Json.Decode.Decoder WebhookMergeGroupChecksRequested
decodeWebhookMergeGroupChecksRequested =
    Json.Decode.succeed
     (\action installation mergeGroup organization repository sender ->
         { action = action
         , installation = installation
         , mergeGroup = mergeGroup
         , organization = organization
         , repository = repository
         , sender = sender
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "action" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "installation" decodeSimpleInstallation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "merge_group"
                (Json.Decode.succeed
                  (\baseRef headRef headSha ->
                      { baseRef = baseRef
                      , headRef = headRef
                      , headSha = headSha
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "base_ref" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "head_ref" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "head_sha" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization" decodeOrganizationSimple)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "sender" decodeSimpleUser)


encodeWebhookMergeGroupChecksRequested :
    WebhookMergeGroupChecksRequested -> Json.Encode.Value
encodeWebhookMergeGroupChecksRequested rec =
    Json.Encode.object
        [ ( "action", Json.Encode.string rec.action )
        , ( "installation", encodeSimpleInstallation rec.installation )
        , ( "merge_group"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "base_ref", Json.Encode.string rec0.baseRef )
                    , ( "head_ref", Json.Encode.string rec0.headRef )
                    , ( "head_sha", Json.Encode.string rec0.headSha )
                    ]
            )
                rec.mergeGroup
          )
        , ( "organization", encodeOrganizationSimple rec.organization )
        , ( "repository", encodeRepository rec.repository )
        , ( "sender", encodeSimpleUser rec.sender )
        ]


type alias WebhookDependabotAlertReopened =
    { action : String
    , alert : DependabotAlert
    , installation : SimpleInstallation
    , organization : OrganizationSimple
    , enterprise : Enterprise
    , repository : Repository
    , sender : SimpleUser
    }


decodeWebhookDependabotAlertReopened :
    Json.Decode.Decoder WebhookDependabotAlertReopened
decodeWebhookDependabotAlertReopened =
    Json.Decode.succeed
     (\action alert installation organization enterprise repository sender ->
         { action = action
         , alert = alert
         , installation = installation
         , organization = organization
         , enterprise = enterprise
         , repository = repository
         , sender = sender
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "action" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "alert" decodeDependabotAlert)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "installation" decodeSimpleInstallation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization" decodeOrganizationSimple)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "enterprise" decodeEnterprise)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "sender" decodeSimpleUser)


encodeWebhookDependabotAlertReopened :
    WebhookDependabotAlertReopened -> Json.Encode.Value
encodeWebhookDependabotAlertReopened rec =
    Json.Encode.object
        [ ( "action", Json.Encode.string rec.action )
        , ( "alert", encodeDependabotAlert rec.alert )
        , ( "installation", encodeSimpleInstallation rec.installation )
        , ( "organization", encodeOrganizationSimple rec.organization )
        , ( "enterprise", encodeEnterprise rec.enterprise )
        , ( "repository", encodeRepository rec.repository )
        , ( "sender", encodeSimpleUser rec.sender )
        ]


type alias WebhookDependabotAlertReintroduced =
    { action : String
    , alert : DependabotAlert
    , installation : SimpleInstallation
    , organization : OrganizationSimple
    , enterprise : Enterprise
    , repository : Repository
    , sender : SimpleUser
    }


decodeWebhookDependabotAlertReintroduced :
    Json.Decode.Decoder WebhookDependabotAlertReintroduced
decodeWebhookDependabotAlertReintroduced =
    Json.Decode.succeed
     (\action alert installation organization enterprise repository sender ->
         { action = action
         , alert = alert
         , installation = installation
         , organization = organization
         , enterprise = enterprise
         , repository = repository
         , sender = sender
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "action" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "alert" decodeDependabotAlert)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "installation" decodeSimpleInstallation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization" decodeOrganizationSimple)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "enterprise" decodeEnterprise)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "sender" decodeSimpleUser)


encodeWebhookDependabotAlertReintroduced :
    WebhookDependabotAlertReintroduced -> Json.Encode.Value
encodeWebhookDependabotAlertReintroduced rec =
    Json.Encode.object
        [ ( "action", Json.Encode.string rec.action )
        , ( "alert", encodeDependabotAlert rec.alert )
        , ( "installation", encodeSimpleInstallation rec.installation )
        , ( "organization", encodeOrganizationSimple rec.organization )
        , ( "enterprise", encodeEnterprise rec.enterprise )
        , ( "repository", encodeRepository rec.repository )
        , ( "sender", encodeSimpleUser rec.sender )
        ]


type alias WebhookDependabotAlertFixed =
    { action : String
    , alert : DependabotAlert
    , installation : SimpleInstallation
    , organization : OrganizationSimple
    , enterprise : Enterprise
    , repository : Repository
    , sender : SimpleUser
    }


decodeWebhookDependabotAlertFixed :
    Json.Decode.Decoder WebhookDependabotAlertFixed
decodeWebhookDependabotAlertFixed =
    Json.Decode.succeed
     (\action alert installation organization enterprise repository sender ->
         { action = action
         , alert = alert
         , installation = installation
         , organization = organization
         , enterprise = enterprise
         , repository = repository
         , sender = sender
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "action" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "alert" decodeDependabotAlert)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "installation" decodeSimpleInstallation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization" decodeOrganizationSimple)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "enterprise" decodeEnterprise)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "sender" decodeSimpleUser)


encodeWebhookDependabotAlertFixed :
    WebhookDependabotAlertFixed -> Json.Encode.Value
encodeWebhookDependabotAlertFixed rec =
    Json.Encode.object
        [ ( "action", Json.Encode.string rec.action )
        , ( "alert", encodeDependabotAlert rec.alert )
        , ( "installation", encodeSimpleInstallation rec.installation )
        , ( "organization", encodeOrganizationSimple rec.organization )
        , ( "enterprise", encodeEnterprise rec.enterprise )
        , ( "repository", encodeRepository rec.repository )
        , ( "sender", encodeSimpleUser rec.sender )
        ]


type alias WebhookDependabotAlertDismissed =
    { action : String
    , alert : DependabotAlert
    , installation : SimpleInstallation
    , organization : OrganizationSimple
    , enterprise : Enterprise
    , repository : Repository
    , sender : SimpleUser
    }


decodeWebhookDependabotAlertDismissed :
    Json.Decode.Decoder WebhookDependabotAlertDismissed
decodeWebhookDependabotAlertDismissed =
    Json.Decode.succeed
     (\action alert installation organization enterprise repository sender ->
         { action = action
         , alert = alert
         , installation = installation
         , organization = organization
         , enterprise = enterprise
         , repository = repository
         , sender = sender
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "action" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "alert" decodeDependabotAlert)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "installation" decodeSimpleInstallation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization" decodeOrganizationSimple)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "enterprise" decodeEnterprise)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "sender" decodeSimpleUser)


encodeWebhookDependabotAlertDismissed :
    WebhookDependabotAlertDismissed -> Json.Encode.Value
encodeWebhookDependabotAlertDismissed rec =
    Json.Encode.object
        [ ( "action", Json.Encode.string rec.action )
        , ( "alert", encodeDependabotAlert rec.alert )
        , ( "installation", encodeSimpleInstallation rec.installation )
        , ( "organization", encodeOrganizationSimple rec.organization )
        , ( "enterprise", encodeEnterprise rec.enterprise )
        , ( "repository", encodeRepository rec.repository )
        , ( "sender", encodeSimpleUser rec.sender )
        ]


type alias WebhookDependabotAlertCreated =
    { action : String
    , alert : DependabotAlert
    , installation : SimpleInstallation
    , organization : OrganizationSimple
    , enterprise : Enterprise
    , repository : Repository
    , sender : SimpleUser
    }


decodeWebhookDependabotAlertCreated :
    Json.Decode.Decoder WebhookDependabotAlertCreated
decodeWebhookDependabotAlertCreated =
    Json.Decode.succeed
     (\action alert installation organization enterprise repository sender ->
         { action = action
         , alert = alert
         , installation = installation
         , organization = organization
         , enterprise = enterprise
         , repository = repository
         , sender = sender
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "action" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "alert" decodeDependabotAlert)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "installation" decodeSimpleInstallation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization" decodeOrganizationSimple)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "enterprise" decodeEnterprise)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "sender" decodeSimpleUser)


encodeWebhookDependabotAlertCreated :
    WebhookDependabotAlertCreated -> Json.Encode.Value
encodeWebhookDependabotAlertCreated rec =
    Json.Encode.object
        [ ( "action", Json.Encode.string rec.action )
        , ( "alert", encodeDependabotAlert rec.alert )
        , ( "installation", encodeSimpleInstallation rec.installation )
        , ( "organization", encodeOrganizationSimple rec.organization )
        , ( "enterprise", encodeEnterprise rec.enterprise )
        , ( "repository", encodeRepository rec.repository )
        , ( "sender", encodeSimpleUser rec.sender )
        ]


type alias WebhookConfigUrl =
    String


decodeWebhookConfigUrl : Json.Decode.Decoder WebhookConfigUrl
decodeWebhookConfigUrl =
    Json.Decode.string


encodeWebhookConfigUrl : WebhookConfigUrl -> Json.Encode.Value
encodeWebhookConfigUrl =
    Json.Encode.string


type alias WebhookConfigSecret =
    String


decodeWebhookConfigSecret : Json.Decode.Decoder WebhookConfigSecret
decodeWebhookConfigSecret =
    Json.Decode.string


encodeWebhookConfigSecret : WebhookConfigSecret -> Json.Encode.Value
encodeWebhookConfigSecret =
    Json.Encode.string


type alias WebhookConfigInsecureSsl =
    Json.Encode.Value


decodeWebhookConfigInsecureSsl : Json.Decode.Decoder WebhookConfigInsecureSsl
decodeWebhookConfigInsecureSsl =
    Json.Decode.value


encodeWebhookConfigInsecureSsl : WebhookConfigInsecureSsl -> Json.Encode.Value
encodeWebhookConfigInsecureSsl =
    Json.Decode.value


type alias WebhookConfigContentType =
    String


decodeWebhookConfigContentType : Json.Decode.Decoder WebhookConfigContentType
decodeWebhookConfigContentType =
    Json.Decode.string


encodeWebhookConfigContentType : WebhookConfigContentType -> Json.Encode.Value
encodeWebhookConfigContentType =
    Json.Encode.string


type alias WebhookConfig =
    { url : WebhookConfigUrl
    , contentType : WebhookConfigContentType
    , secret : WebhookConfigSecret
    , insecureSsl : WebhookConfigInsecureSsl
    }


decodeWebhookConfig : Json.Decode.Decoder WebhookConfig
decodeWebhookConfig =
    Json.Decode.succeed
     (\url contentType secret insecureSsl ->
         { url = url
         , contentType = contentType
         , secret = secret
         , insecureSsl = insecureSsl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "url" decodeWebhookConfigUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "content_type" decodeWebhookConfigContentType)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "secret" decodeWebhookConfigSecret)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "insecure_ssl" decodeWebhookConfigInsecureSsl)


encodeWebhookConfig : WebhookConfig -> Json.Encode.Value
encodeWebhookConfig rec =
    Json.Encode.object
        [ ( "url", encodeWebhookConfigUrl rec.url )
        , ( "content_type", encodeWebhookConfigContentType rec.contentType )
        , ( "secret", encodeWebhookConfigSecret rec.secret )
        , ( "insecure_ssl", encodeWebhookConfigInsecureSsl rec.insecureSsl )
        ]


type alias WaitTimer =
    Int


decodeWaitTimer : Json.Decode.Decoder WaitTimer
decodeWaitTimer =
    Json.Decode.int


encodeWaitTimer : WaitTimer -> Json.Encode.Value
encodeWaitTimer =
    Json.Encode.int


type alias ViewTraffic =
    { count : Int, uniques : Int, views : List Traffic }


decodeViewTraffic : Json.Decode.Decoder ViewTraffic
decodeViewTraffic =
    Json.Decode.succeed
     (\count uniques views ->
         { count = count, uniques = uniques, views = views }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "uniques" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "views" (Json.Decode.list decodeTraffic))


encodeViewTraffic : ViewTraffic -> Json.Encode.Value
encodeViewTraffic rec =
    Json.Encode.object
        [ ( "count", Json.Encode.int rec.count )
        , ( "uniques", Json.Encode.int rec.uniques )
        , ( "views", Json.Encode.list encodeTraffic rec.views )
        ]


type alias Verification =
    { verified : Bool
    , reason : String
    , payload : Nullable String
    , signature : Nullable String
    }


decodeVerification : Json.Decode.Decoder Verification
decodeVerification =
    Json.Decode.succeed
     (\verified reason payload signature ->
         { verified = verified
         , reason = reason
         , payload = payload
         , signature = signature
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "verified" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "reason" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "payload"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "signature"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeVerification : Verification -> Json.Encode.Value
encodeVerification rec =
    Json.Encode.object
        [ ( "verified", Json.Encode.bool rec.verified )
        , ( "reason", Json.Encode.string rec.reason )
        , ( "payload"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.payload
          )
        , ( "signature"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.signature
          )
        ]


type alias ValidationErrorSimple =
    { message : String, documentationUrl : String, errors : List String }


decodeValidationErrorSimple : Json.Decode.Decoder ValidationErrorSimple
decodeValidationErrorSimple =
    Json.Decode.succeed
     (\message documentationUrl errors ->
         { message = message
         , documentationUrl = documentationUrl
         , errors = errors
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "message" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "documentation_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "errors" (Json.Decode.list Json.Decode.string))


encodeValidationErrorSimple : ValidationErrorSimple -> Json.Encode.Value
encodeValidationErrorSimple rec =
    Json.Encode.object
        [ ( "message", Json.Encode.string rec.message )
        , ( "documentation_url", Json.Encode.string rec.documentationUrl )
        , ( "errors", Json.Encode.list Json.Encode.string rec.errors )
        ]


type alias ValidationError =
    { message : String
    , documentationUrl : String
    , errors :
        List { resource : String
        , field : String
        , message : String
        , code : String
        , index : Int
        , value : Json.Encode.Value
        }
    }


decodeValidationError : Json.Decode.Decoder ValidationError
decodeValidationError =
    Json.Decode.succeed
     (\message documentationUrl errors ->
         { message = message
         , documentationUrl = documentationUrl
         , errors = errors
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "message" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "documentation_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "errors"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\resource field message code index value ->
                          { resource = resource
                          , field = field
                          , message = message
                          , code = code
                          , index = index
                          , value = value
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "resource" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "field" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "message" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "code" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "index" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "value" Json.Decode.value)
                    )
                )
            )


encodeValidationError : ValidationError -> Json.Encode.Value
encodeValidationError rec =
    Json.Encode.object
        [ ( "message", Json.Encode.string rec.message )
        , ( "documentation_url", Json.Encode.string rec.documentationUrl )
        , ( "errors"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "resource", Json.Encode.string rec0.resource )
                        , ( "field", Json.Encode.string rec0.field )
                        , ( "message", Json.Encode.string rec0.message )
                        , ( "code", Json.Encode.string rec0.code )
                        , ( "index", Json.Encode.int rec0.index )
                        , ( "value", Json.Decode.value rec0.value )
                        ]
                )
                rec.errors
          )
        ]


type alias UserSearchResultItem =
    { login : String
    , id : Int
    , nodeId : String
    , avatarUrl : String
    , gravatarId : Nullable String
    , url : String
    , htmlUrl : String
    , followersUrl : String
    , subscriptionsUrl : String
    , organizationsUrl : String
    , reposUrl : String
    , receivedEventsUrl : String
    , type_ : String
    , score : Float
    , followingUrl : String
    , gistsUrl : String
    , starredUrl : String
    , eventsUrl : String
    , publicRepos : Int
    , publicGists : Int
    , followers : Int
    , following : Int
    , createdAt : String
    , updatedAt : String
    , name : Nullable String
    , bio : Nullable String
    , email : Nullable String
    , location : Nullable String
    , siteAdmin : Bool
    , hireable : Nullable Bool
    , textMatches : SearchResultTextMatches
    , blog : Nullable String
    , company : Nullable String
    , suspendedAt : Nullable String
    }


decodeUserSearchResultItem : Json.Decode.Decoder UserSearchResultItem
decodeUserSearchResultItem =
    Json.Decode.succeed
     (\login id nodeId avatarUrl gravatarId url htmlUrl followersUrl subscriptionsUrl organizationsUrl reposUrl receivedEventsUrl type_ score followingUrl gistsUrl starredUrl eventsUrl publicRepos publicGists followers following createdAt updatedAt name bio email location siteAdmin hireable textMatches blog company suspendedAt ->
         { login = login
         , id = id
         , nodeId = nodeId
         , avatarUrl = avatarUrl
         , gravatarId = gravatarId
         , url = url
         , htmlUrl = htmlUrl
         , followersUrl = followersUrl
         , subscriptionsUrl = subscriptionsUrl
         , organizationsUrl = organizationsUrl
         , reposUrl = reposUrl
         , receivedEventsUrl = receivedEventsUrl
         , type_ = type_
         , score = score
         , followingUrl = followingUrl
         , gistsUrl = gistsUrl
         , starredUrl = starredUrl
         , eventsUrl = eventsUrl
         , publicRepos = publicRepos
         , publicGists = publicGists
         , followers = followers
         , following = following
         , createdAt = createdAt
         , updatedAt = updatedAt
         , name = name
         , bio = bio
         , email = email
         , location = location
         , siteAdmin = siteAdmin
         , hireable = hireable
         , textMatches = textMatches
         , blog = blog
         , company = company
         , suspendedAt = suspendedAt
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "login" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "avatar_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "gravatar_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "followers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscriptions_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organizations_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repos_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "received_events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "score" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "following_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "gists_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "starred_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_repos" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_gists" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "followers" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "following" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "bio"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "email"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "location"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "site_admin" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "hireable"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "text_matches" decodeSearchResultTextMatches)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "blog"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "company"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "suspended_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeUserSearchResultItem : UserSearchResultItem -> Json.Encode.Value
encodeUserSearchResultItem rec =
    Json.Encode.object
        [ ( "login", Json.Encode.string rec.login )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "avatar_url", Json.Encode.string rec.avatarUrl )
        , ( "gravatar_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.gravatarId
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "followers_url", Json.Encode.string rec.followersUrl )
        , ( "subscriptions_url", Json.Encode.string rec.subscriptionsUrl )
        , ( "organizations_url", Json.Encode.string rec.organizationsUrl )
        , ( "repos_url", Json.Encode.string rec.reposUrl )
        , ( "received_events_url", Json.Encode.string rec.receivedEventsUrl )
        , ( "type", Json.Encode.string rec.type_ )
        , ( "score", Json.Encode.float rec.score )
        , ( "following_url", Json.Encode.string rec.followingUrl )
        , ( "gists_url", Json.Encode.string rec.gistsUrl )
        , ( "starred_url", Json.Encode.string rec.starredUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "public_repos", Json.Encode.int rec.publicRepos )
        , ( "public_gists", Json.Encode.int rec.publicGists )
        , ( "followers", Json.Encode.int rec.followers )
        , ( "following", Json.Encode.int rec.following )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.name
          )
        , ( "bio"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.bio
          )
        , ( "email"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.email
          )
        , ( "location"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.location
          )
        , ( "site_admin", Json.Encode.bool rec.siteAdmin )
        , ( "hireable"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.hireable
          )
        , ( "text_matches", encodeSearchResultTextMatches rec.textMatches )
        , ( "blog"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.blog
          )
        , ( "company"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.company
          )
        , ( "suspended_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.suspendedAt
          )
        ]


type alias UserMarketplacePurchase =
    { billingCycle : String
    , nextBillingDate : Nullable String
    , unitCount : Nullable Int
    , onFreeTrial : Bool
    , freeTrialEndsOn : Nullable String
    , updatedAt : Nullable String
    , account : MarketplaceAccount
    , plan : MarketplaceListingPlan
    }


decodeUserMarketplacePurchase : Json.Decode.Decoder UserMarketplacePurchase
decodeUserMarketplacePurchase =
    Json.Decode.succeed
     (\billingCycle nextBillingDate unitCount onFreeTrial freeTrialEndsOn updatedAt account plan ->
         { billingCycle = billingCycle
         , nextBillingDate = nextBillingDate
         , unitCount = unitCount
         , onFreeTrial = onFreeTrial
         , freeTrialEndsOn = freeTrialEndsOn
         , updatedAt = updatedAt
         , account = account
         , plan = plan
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "billing_cycle" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "next_billing_date"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "unit_count"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "on_free_trial" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "free_trial_ends_on"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "updated_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "account" decodeMarketplaceAccount)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "plan" decodeMarketplaceListingPlan)


encodeUserMarketplacePurchase : UserMarketplacePurchase -> Json.Encode.Value
encodeUserMarketplacePurchase rec =
    Json.Encode.object
        [ ( "billing_cycle", Json.Encode.string rec.billingCycle )
        , ( "next_billing_date"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.nextBillingDate
          )
        , ( "unit_count"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.unitCount
          )
        , ( "on_free_trial", Json.Encode.bool rec.onFreeTrial )
        , ( "free_trial_ends_on"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.freeTrialEndsOn
          )
        , ( "updated_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.updatedAt
          )
        , ( "account", encodeMarketplaceAccount rec.account )
        , ( "plan", encodeMarketplaceListingPlan rec.plan )
        ]


type alias UnlabeledIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , label : { name : String, color : String }
    }


decodeUnlabeledIssueEvent : Json.Decode.Decoder UnlabeledIssueEvent
decodeUnlabeledIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp label ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , label = label
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "label"
                (Json.Decode.succeed
                  (\name color -> { name = name, color = color })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "color" Json.Decode.string)
                )
            )


encodeUnlabeledIssueEvent : UnlabeledIssueEvent -> Json.Encode.Value
encodeUnlabeledIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "label"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "name", Json.Encode.string rec0.name )
                    , ( "color", Json.Encode.string rec0.color )
                    ]
            )
                rec.label
          )
        ]


type alias UnassignedIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , assignee : SimpleUser
    , assigner : SimpleUser
    }


decodeUnassignedIssueEvent : Json.Decode.Decoder UnassignedIssueEvent
decodeUnassignedIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp assignee assigner ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , assignee = assignee
         , assigner = assigner
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assignee" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assigner" decodeSimpleUser)


encodeUnassignedIssueEvent : UnassignedIssueEvent -> Json.Encode.Value
encodeUnassignedIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "assignee", encodeSimpleUser rec.assignee )
        , ( "assigner", encodeSimpleUser rec.assigner )
        ]


type alias Traffic =
    { timestamp : String, uniques : Int, count : Int }


decodeTraffic : Json.Decode.Decoder Traffic
decodeTraffic =
    Json.Decode.succeed
     (\timestamp uniques count ->
         { timestamp = timestamp, uniques = uniques, count = count }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "timestamp" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "uniques" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "count" Json.Decode.int)


encodeTraffic : Traffic -> Json.Encode.Value
encodeTraffic rec =
    Json.Encode.object
        [ ( "timestamp", Json.Encode.string rec.timestamp )
        , ( "uniques", Json.Encode.int rec.uniques )
        , ( "count", Json.Encode.int rec.count )
        ]


type alias TopicSearchResultItem =
    { name : String
    , displayName : Nullable String
    , shortDescription : Nullable String
    , description : Nullable String
    , createdBy : Nullable String
    , released : Nullable String
    , createdAt : String
    , updatedAt : String
    , featured : Bool
    , curated : Bool
    , score : Float
    , repositoryCount : Nullable Int
    , logoUrl : Nullable String
    , textMatches : SearchResultTextMatches
    , related :
        Nullable (List { topicRelation :
            { id : Int, name : String, topicId : Int, relationType : String }
        })
    , aliases :
        Nullable (List { topicRelation :
            { id : Int, name : String, topicId : Int, relationType : String }
        })
    }


decodeTopicSearchResultItem : Json.Decode.Decoder TopicSearchResultItem
decodeTopicSearchResultItem =
    Json.Decode.succeed
     (\name displayName shortDescription description createdBy released createdAt updatedAt featured curated score repositoryCount logoUrl textMatches related aliases ->
         { name = name
         , displayName = displayName
         , shortDescription = shortDescription
         , description = description
         , createdBy = createdBy
         , released = released
         , createdAt = createdAt
         , updatedAt = updatedAt
         , featured = featured
         , curated = curated
         , score = score
         , repositoryCount = repositoryCount
         , logoUrl = logoUrl
         , textMatches = textMatches
         , related = related
         , aliases = aliases
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "display_name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "short_description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "created_by"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "released"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "featured" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "curated" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "score" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "repository_count"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "logo_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "text_matches" decodeSearchResultTextMatches)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "related"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list
                            (Json.Decode.succeed
                                (\topicRelation ->
                                    { topicRelation = topicRelation }
                                )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "topic_relation"
                                        (Json.Decode.succeed
                                          (\id name topicId relationType ->
                                              { id = id
                                              , name = name
                                              , topicId = topicId
                                              , relationType = relationType
                                              }
                                          )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "id"
                                                    Json.Decode.int
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "name"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "topic_id"
                                                    Json.Decode.int
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "relation_type"
                                                    Json.Decode.string
                                                )
                                        )
                                    )
                            )
                        )
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "aliases"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list
                            (Json.Decode.succeed
                                (\topicRelation ->
                                    { topicRelation = topicRelation }
                                )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "topic_relation"
                                        (Json.Decode.succeed
                                          (\id name topicId relationType ->
                                              { id = id
                                              , name = name
                                              , topicId = topicId
                                              , relationType = relationType
                                              }
                                          )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "id"
                                                    Json.Decode.int
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "name"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "topic_id"
                                                    Json.Decode.int
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "relation_type"
                                                    Json.Decode.string
                                                )
                                        )
                                    )
                            )
                        )
                    , Json.Decode.null Null
                    ]
                )
            )


encodeTopicSearchResultItem : TopicSearchResultItem -> Json.Encode.Value
encodeTopicSearchResultItem rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "display_name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.displayName
          )
        , ( "short_description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.shortDescription
          )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "created_by"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.createdBy
          )
        , ( "released"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.released
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "featured", Json.Encode.bool rec.featured )
        , ( "curated", Json.Encode.bool rec.curated )
        , ( "score", Json.Encode.float rec.score )
        , ( "repository_count"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.repositoryCount
          )
        , ( "logo_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.logoUrl
          )
        , ( "text_matches", encodeSearchResultTextMatches rec.textMatches )
        , ( "related"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list
                            (\rec0 ->
                                Json.Encode.object
                                    [ ( "topic_relation"
                                      , (\rec_0_1_1_1_1_0_0_1_0_0_15_1_0_0 ->
                                            Json.Encode.object
                                                [ ( "id"
                                                  , Json.Encode.int
                                                        rec_0_1_1_1_1_0_0_1_0_0_15_1_0_0.id
                                                  )
                                                , ( "name"
                                                  , Json.Encode.string
                                                        rec_0_1_1_1_1_0_0_1_0_0_15_1_0_0.name
                                                  )
                                                , ( "topic_id"
                                                  , Json.Encode.int
                                                        rec_0_1_1_1_1_0_0_1_0_0_15_1_0_0.topicId
                                                  )
                                                , ( "relation_type"
                                                  , Json.Encode.string
                                                        rec_0_1_1_1_1_0_0_1_0_0_15_1_0_0.relationType
                                                  )
                                                ]
                                        )
                                            rec0.topicRelation
                                      )
                                    ]
                            )
                            value
            )
                rec.related
          )
        , ( "aliases"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list
                            (\rec0 ->
                                Json.Encode.object
                                    [ ( "topic_relation"
                                      , (\rec_0_1_1_1_1_0_0_1_0_0_16_1_0_0 ->
                                            Json.Encode.object
                                                [ ( "id"
                                                  , Json.Encode.int
                                                        rec_0_1_1_1_1_0_0_1_0_0_16_1_0_0.id
                                                  )
                                                , ( "name"
                                                  , Json.Encode.string
                                                        rec_0_1_1_1_1_0_0_1_0_0_16_1_0_0.name
                                                  )
                                                , ( "topic_id"
                                                  , Json.Encode.int
                                                        rec_0_1_1_1_1_0_0_1_0_0_16_1_0_0.topicId
                                                  )
                                                , ( "relation_type"
                                                  , Json.Encode.string
                                                        rec_0_1_1_1_1_0_0_1_0_0_16_1_0_0.relationType
                                                  )
                                                ]
                                        )
                                            rec0.topicRelation
                                      )
                                    ]
                            )
                            value
            )
                rec.aliases
          )
        ]


type alias Topic =
    { names : List String }


decodeTopic : Json.Decode.Decoder Topic
decodeTopic =
    Json.Decode.succeed (\names -> { names = names })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "names" (Json.Decode.list Json.Decode.string))


encodeTopic : Topic -> Json.Encode.Value
encodeTopic rec =
    Json.Encode.object
        [ ( "names", Json.Encode.list Json.Encode.string rec.names ) ]


type alias TimelineUnassignedIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , assignee : SimpleUser
    }


decodeTimelineUnassignedIssueEvent :
    Json.Decode.Decoder TimelineUnassignedIssueEvent
decodeTimelineUnassignedIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp assignee ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , assignee = assignee
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assignee" decodeSimpleUser)


encodeTimelineUnassignedIssueEvent :
    TimelineUnassignedIssueEvent -> Json.Encode.Value
encodeTimelineUnassignedIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "assignee", encodeSimpleUser rec.assignee )
        ]


type alias TimelineReviewedEvent =
    { event : String
    , id : Int
    , nodeId : String
    , user : SimpleUser
    , body : Nullable String
    , state : String
    , htmlUrl : String
    , pullRequestUrl : String
    , links : { html : { href : String }, pullRequest : { href : String } }
    , submittedAt : String
    , commitId : String
    , bodyHtml : String
    , bodyText : String
    , authorAssociation : AuthorAssociation
    }


decodeTimelineReviewedEvent : Json.Decode.Decoder TimelineReviewedEvent
decodeTimelineReviewedEvent =
    Json.Decode.succeed
     (\event id nodeId user body state htmlUrl pullRequestUrl links submittedAt commitId bodyHtml bodyText authorAssociation ->
         { event = event
         , id = id
         , nodeId = nodeId
         , user = user
         , body = body
         , state = state
         , htmlUrl = htmlUrl
         , pullRequestUrl = pullRequestUrl
         , links = links
         , submittedAt = submittedAt
         , commitId = commitId
         , bodyHtml = bodyHtml
         , bodyText = bodyText
         , authorAssociation = authorAssociation
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "user" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "body"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pull_request_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "_links"
                (Json.Decode.succeed
                  (\html pullRequest ->
                      { html = html, pullRequest = pullRequest }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "html"
                            (Json.Decode.succeed (\href -> { href = href })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "href" Json.Decode.string
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "pull_request"
                            (Json.Decode.succeed (\href -> { href = href })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "href" Json.Decode.string
                                    )
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "submitted_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commit_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_html" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_text" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author_association" decodeAuthorAssociation)


encodeTimelineReviewedEvent : TimelineReviewedEvent -> Json.Encode.Value
encodeTimelineReviewedEvent rec =
    Json.Encode.object
        [ ( "event", Json.Encode.string rec.event )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "user", encodeSimpleUser rec.user )
        , ( "body"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.body
          )
        , ( "state", Json.Encode.string rec.state )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "pull_request_url", Json.Encode.string rec.pullRequestUrl )
        , ( "_links"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "html"
                      , (\rec_0_1_1_1_0_9_1_0_0 ->
                            Json.Encode.object
                                [ ( "href"
                                  , Json.Encode.string
                                        rec_0_1_1_1_0_9_1_0_0.href
                                  )
                                ]
                        )
                            rec0.html
                      )
                    , ( "pull_request"
                      , (\rec_0_2_1_1_0_9_1_0_0 ->
                            Json.Encode.object
                                [ ( "href"
                                  , Json.Encode.string
                                        rec_0_2_1_1_0_9_1_0_0.href
                                  )
                                ]
                        )
                            rec0.pullRequest
                      )
                    ]
            )
                rec.links
          )
        , ( "submitted_at", Json.Encode.string rec.submittedAt )
        , ( "commit_id", Json.Encode.string rec.commitId )
        , ( "body_html", Json.Encode.string rec.bodyHtml )
        , ( "body_text", Json.Encode.string rec.bodyText )
        , ( "author_association"
          , encodeAuthorAssociation rec.authorAssociation
          )
        ]


type alias TimelineLineCommentedEvent =
    { event : String
    , nodeId : String
    , comments : List PullRequestReviewComment
    }


decodeTimelineLineCommentedEvent :
    Json.Decode.Decoder TimelineLineCommentedEvent
decodeTimelineLineCommentedEvent =
    Json.Decode.succeed
     (\event nodeId comments ->
         { event = event, nodeId = nodeId, comments = comments }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "comments"
                (Json.Decode.list decodePullRequestReviewComment)
            )


encodeTimelineLineCommentedEvent :
    TimelineLineCommentedEvent -> Json.Encode.Value
encodeTimelineLineCommentedEvent rec =
    Json.Encode.object
        [ ( "event", Json.Encode.string rec.event )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "comments"
          , Json.Encode.list encodePullRequestReviewComment rec.comments
          )
        ]


type alias TimelineIssueEvents =
    {}


decodeTimelineIssueEvents : Json.Decode.Decoder TimelineIssueEvents
decodeTimelineIssueEvents =
    Json.Decode.succeed {}


encodeTimelineIssueEvents : TimelineIssueEvents -> Json.Encode.Value
encodeTimelineIssueEvents rec =
    Json.Encode.object []


type alias TimelineCrossReferencedEvent =
    { event : String
    , actor : SimpleUser
    , createdAt : String
    , updatedAt : String
    , source : { type_ : String, issue : Issue }
    }


decodeTimelineCrossReferencedEvent :
    Json.Decode.Decoder TimelineCrossReferencedEvent
decodeTimelineCrossReferencedEvent =
    Json.Decode.succeed
     (\event actor createdAt updatedAt source ->
         { event = event
         , actor = actor
         , createdAt = createdAt
         , updatedAt = updatedAt
         , source = source
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "source"
                (Json.Decode.succeed
                  (\type_ issue -> { type_ = type_, issue = issue })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "type" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "issue" decodeIssue)
                )
            )


encodeTimelineCrossReferencedEvent :
    TimelineCrossReferencedEvent -> Json.Encode.Value
encodeTimelineCrossReferencedEvent rec =
    Json.Encode.object
        [ ( "event", Json.Encode.string rec.event )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "source"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "type", Json.Encode.string rec0.type_ )
                    , ( "issue", encodeIssue rec0.issue )
                    ]
            )
                rec.source
          )
        ]


type alias TimelineCommittedEvent =
    { event : String
    , sha : String
    , nodeId : String
    , url : String
    , author : { date : String, email : String, name : String }
    , committer : { date : String, email : String, name : String }
    , message : String
    , tree : { sha : String, url : String }
    , parents : List { sha : String, url : String, htmlUrl : String }
    , verification :
        { verified : Bool
        , reason : String
        , signature : Nullable String
        , payload : Nullable String
        }
    , htmlUrl : String
    }


decodeTimelineCommittedEvent : Json.Decode.Decoder TimelineCommittedEvent
decodeTimelineCommittedEvent =
    Json.Decode.succeed
     (\event sha nodeId url author committer message tree parents verification htmlUrl ->
         { event = event
         , sha = sha
         , nodeId = nodeId
         , url = url
         , author = author
         , committer = committer
         , message = message
         , tree = tree
         , parents = parents
         , verification = verification
         , htmlUrl = htmlUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "author"
                (Json.Decode.succeed
                  (\date email name ->
                      { date = date, email = email, name = name }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "date" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "email" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "committer"
                (Json.Decode.succeed
                  (\date email name ->
                      { date = date, email = email, name = name }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "date" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "email" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "message" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "tree"
                (Json.Decode.succeed (\sha url -> { sha = sha, url = url })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "parents"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\sha url htmlUrl ->
                          { sha = sha, url = url, htmlUrl = htmlUrl }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "sha" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "html_url" Json.Decode.string)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "verification"
                (Json.Decode.succeed
                  (\verified reason signature payload ->
                      { verified = verified
                      , reason = reason
                      , signature = signature
                      , payload = payload
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "verified" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "reason" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "signature"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "payload"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)


encodeTimelineCommittedEvent : TimelineCommittedEvent -> Json.Encode.Value
encodeTimelineCommittedEvent rec =
    Json.Encode.object
        [ ( "event", Json.Encode.string rec.event )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "author"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "date", Json.Encode.string rec0.date )
                    , ( "email", Json.Encode.string rec0.email )
                    , ( "name", Json.Encode.string rec0.name )
                    ]
            )
                rec.author
          )
        , ( "committer"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "date", Json.Encode.string rec0.date )
                    , ( "email", Json.Encode.string rec0.email )
                    , ( "name", Json.Encode.string rec0.name )
                    ]
            )
                rec.committer
          )
        , ( "message", Json.Encode.string rec.message )
        , ( "tree"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "sha", Json.Encode.string rec0.sha )
                    , ( "url", Json.Encode.string rec0.url )
                    ]
            )
                rec.tree
          )
        , ( "parents"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "sha", Json.Encode.string rec0.sha )
                        , ( "url", Json.Encode.string rec0.url )
                        , ( "html_url", Json.Encode.string rec0.htmlUrl )
                        ]
                )
                rec.parents
          )
        , ( "verification"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "verified", Json.Encode.bool rec0.verified )
                    , ( "reason", Json.Encode.string rec0.reason )
                    , ( "signature"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.signature
                      )
                    , ( "payload"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.payload
                      )
                    ]
            )
                rec.verification
          )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        ]


type alias TimelineCommitCommentedEvent =
    { event : String
    , nodeId : String
    , commitId : String
    , comments : List CommitComment
    }


decodeTimelineCommitCommentedEvent :
    Json.Decode.Decoder TimelineCommitCommentedEvent
decodeTimelineCommitCommentedEvent =
    Json.Decode.succeed
     (\event nodeId commitId comments ->
         { event = event
         , nodeId = nodeId
         , commitId = commitId
         , comments = comments
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commit_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments" (Json.Decode.list decodeCommitComment)
            )


encodeTimelineCommitCommentedEvent :
    TimelineCommitCommentedEvent -> Json.Encode.Value
encodeTimelineCommitCommentedEvent rec =
    Json.Encode.object
        [ ( "event", Json.Encode.string rec.event )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "commit_id", Json.Encode.string rec.commitId )
        , ( "comments", Json.Encode.list encodeCommitComment rec.comments )
        ]


type alias TimelineCommentEvent =
    { event : String
    , actor : SimpleUser
    , id : Int
    , nodeId : String
    , url : String
    , body : String
    , bodyText : String
    , bodyHtml : String
    , htmlUrl : String
    , user : SimpleUser
    , createdAt : String
    , updatedAt : String
    , issueUrl : String
    , authorAssociation : AuthorAssociation
    , performedViaGithubApp : Debug.Todo
    , reactions : ReactionRollup
    }


decodeTimelineCommentEvent : Json.Decode.Decoder TimelineCommentEvent
decodeTimelineCommentEvent =
    Json.Decode.succeed
     (\event actor id nodeId url body bodyText bodyHtml htmlUrl user createdAt updatedAt issueUrl authorAssociation performedViaGithubApp reactions ->
         { event = event
         , actor = actor
         , id = id
         , nodeId = nodeId
         , url = url
         , body = body
         , bodyText = bodyText
         , bodyHtml = bodyHtml
         , htmlUrl = htmlUrl
         , user = user
         , createdAt = createdAt
         , updatedAt = updatedAt
         , issueUrl = issueUrl
         , authorAssociation = authorAssociation
         , performedViaGithubApp = performedViaGithubApp
         , reactions = reactions
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_text" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_html" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "user" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author_association" decodeAuthorAssociation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "reactions" decodeReactionRollup)


encodeTimelineCommentEvent : TimelineCommentEvent -> Json.Encode.Value
encodeTimelineCommentEvent rec =
    Json.Encode.object
        [ ( "event", Json.Encode.string rec.event )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "body", Json.Encode.string rec.body )
        , ( "body_text", Json.Encode.string rec.bodyText )
        , ( "body_html", Json.Encode.string rec.bodyHtml )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "user", encodeSimpleUser rec.user )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "issue_url", Json.Encode.string rec.issueUrl )
        , ( "author_association"
          , encodeAuthorAssociation rec.authorAssociation
          )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "reactions", encodeReactionRollup rec.reactions )
        ]


type alias TimelineAssignedIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , assignee : SimpleUser
    }


decodeTimelineAssignedIssueEvent :
    Json.Decode.Decoder TimelineAssignedIssueEvent
decodeTimelineAssignedIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp assignee ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , assignee = assignee
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assignee" decodeSimpleUser)


encodeTimelineAssignedIssueEvent :
    TimelineAssignedIssueEvent -> Json.Encode.Value
encodeTimelineAssignedIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "assignee", encodeSimpleUser rec.assignee )
        ]


type alias ThreadSubscription =
    { subscribed : Bool
    , ignored : Bool
    , reason : Nullable String
    , createdAt : Nullable String
    , url : String
    , threadUrl : String
    , repositoryUrl : String
    }


decodeThreadSubscription : Json.Decode.Decoder ThreadSubscription
decodeThreadSubscription =
    Json.Decode.succeed
     (\subscribed ignored reason createdAt url threadUrl repositoryUrl ->
         { subscribed = subscribed
         , ignored = ignored
         , reason = reason
         , createdAt = createdAt
         , url = url
         , threadUrl = threadUrl
         , repositoryUrl = repositoryUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscribed" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ignored" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "created_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "thread_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_url" Json.Decode.string)


encodeThreadSubscription : ThreadSubscription -> Json.Encode.Value
encodeThreadSubscription rec =
    Json.Encode.object
        [ ( "subscribed", Json.Encode.bool rec.subscribed )
        , ( "ignored", Json.Encode.bool rec.ignored )
        , ( "reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.reason
          )
        , ( "created_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.createdAt
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "thread_url", Json.Encode.string rec.threadUrl )
        , ( "repository_url", Json.Encode.string rec.repositoryUrl )
        ]


type alias Thread =
    { id : String
    , repository : MinimalRepository
    , subject :
        { title : String
        , url : String
        , latestCommentUrl : String
        , type_ : String
        }
    , reason : String
    , unread : Bool
    , updatedAt : String
    , lastReadAt : Nullable String
    , url : String
    , subscriptionUrl : String
    }


decodeThread : Json.Decode.Decoder Thread
decodeThread =
    Json.Decode.succeed
     (\id repository subject reason unread updatedAt lastReadAt url subscriptionUrl ->
         { id = id
         , repository = repository
         , subject = subject
         , reason = reason
         , unread = unread
         , updatedAt = updatedAt
         , lastReadAt = lastReadAt
         , url = url
         , subscriptionUrl = subscriptionUrl
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeMinimalRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "subject"
                (Json.Decode.succeed
                  (\title url latestCommentUrl type_ ->
                      { title = title
                      , url = url
                      , latestCommentUrl = latestCommentUrl
                      , type_ = type_
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "title" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "latest_comment_url"
                            Json.Decode.string
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "type" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "reason" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "unread" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "last_read_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscription_url" Json.Decode.string)


encodeThread : Thread -> Json.Encode.Value
encodeThread rec =
    Json.Encode.object
        [ ( "id", Json.Encode.string rec.id )
        , ( "repository", encodeMinimalRepository rec.repository )
        , ( "subject"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "title", Json.Encode.string rec0.title )
                    , ( "url", Json.Encode.string rec0.url )
                    , ( "latest_comment_url"
                      , Json.Encode.string rec0.latestCommentUrl
                      )
                    , ( "type", Json.Encode.string rec0.type_ )
                    ]
            )
                rec.subject
          )
        , ( "reason", Json.Encode.string rec.reason )
        , ( "unread", Json.Encode.bool rec.unread )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "last_read_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.lastReadAt
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "subscription_url", Json.Encode.string rec.subscriptionUrl )
        ]


type alias TeamSimple =
    { id : Int
    , nodeId : String
    , url : String
    , membersUrl : String
    , name : String
    , description : Nullable String
    , permission : String
    , privacy : String
    , htmlUrl : String
    , repositoriesUrl : String
    , slug : String
    , ldapDn : String
    }


decodeTeamSimple : Json.Decode.Decoder TeamSimple
decodeTeamSimple =
    Json.Decode.succeed
     (\id nodeId url membersUrl name description permission privacy htmlUrl repositoriesUrl slug ldapDn ->
         { id = id
         , nodeId = nodeId
         , url = url
         , membersUrl = membersUrl
         , name = name
         , description = description
         , permission = permission
         , privacy = privacy
         , htmlUrl = htmlUrl
         , repositoriesUrl = repositoriesUrl
         , slug = slug
         , ldapDn = ldapDn
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "members_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "permission" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "privacy" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repositories_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "slug" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ldap_dn" Json.Decode.string)


encodeTeamSimple : TeamSimple -> Json.Encode.Value
encodeTeamSimple rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "members_url", Json.Encode.string rec.membersUrl )
        , ( "name", Json.Encode.string rec.name )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "permission", Json.Encode.string rec.permission )
        , ( "privacy", Json.Encode.string rec.privacy )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "repositories_url", Json.Encode.string rec.repositoriesUrl )
        , ( "slug", Json.Encode.string rec.slug )
        , ( "ldap_dn", Json.Encode.string rec.ldapDn )
        ]


type alias TeamRepository =
    { id : Int
    , nodeId : String
    , name : String
    , fullName : String
    , license : Debug.Todo
    , forks : Int
    , permissions :
        { admin : Bool
        , pull : Bool
        , triage : Bool
        , push : Bool
        , maintain : Bool
        }
    , roleName : String
    , owner : Debug.Todo
    , private : Bool
    , htmlUrl : String
    , description : Nullable String
    , fork : Bool
    , url : String
    , archiveUrl : String
    , assigneesUrl : String
    , blobsUrl : String
    , branchesUrl : String
    , collaboratorsUrl : String
    , commentsUrl : String
    , commitsUrl : String
    , compareUrl : String
    , contentsUrl : String
    , contributorsUrl : String
    , deploymentsUrl : String
    , downloadsUrl : String
    , eventsUrl : String
    , forksUrl : String
    , gitCommitsUrl : String
    , gitRefsUrl : String
    , gitTagsUrl : String
    , gitUrl : String
    , issueCommentUrl : String
    , issueEventsUrl : String
    , issuesUrl : String
    , keysUrl : String
    , labelsUrl : String
    , languagesUrl : String
    , mergesUrl : String
    , milestonesUrl : String
    , notificationsUrl : String
    , pullsUrl : String
    , releasesUrl : String
    , sshUrl : String
    , stargazersUrl : String
    , statusesUrl : String
    , subscribersUrl : String
    , subscriptionUrl : String
    , tagsUrl : String
    , teamsUrl : String
    , treesUrl : String
    , cloneUrl : String
    , mirrorUrl : Nullable String
    , hooksUrl : String
    , svnUrl : String
    , homepage : Nullable String
    , language : Nullable String
    , forksCount : Int
    , stargazersCount : Int
    , watchersCount : Int
    , size : Int
    , defaultBranch : String
    , openIssuesCount : Int
    , isTemplate : Bool
    , topics : List String
    , hasIssues : Bool
    , hasProjects : Bool
    , hasWiki : Bool
    , hasPages : Bool
    , hasDownloads : Bool
    , archived : Bool
    , disabled : Bool
    , visibility : String
    , pushedAt : Nullable String
    , createdAt : Nullable String
    , updatedAt : Nullable String
    , allowRebaseMerge : Bool
    , templateRepository : Debug.Todo
    , tempCloneToken : String
    , allowSquashMerge : Bool
    , allowAutoMerge : Bool
    , deleteBranchOnMerge : Bool
    , allowMergeCommit : Bool
    , allowForking : Bool
    , webCommitSignoffRequired : Bool
    , subscribersCount : Int
    , networkCount : Int
    , openIssues : Int
    , watchers : Int
    , masterBranch : String
    }


decodeTeamRepository : Json.Decode.Decoder TeamRepository
decodeTeamRepository =
    Json.Decode.succeed
     (\id nodeId name fullName license forks permissions roleName owner private htmlUrl description fork url archiveUrl assigneesUrl blobsUrl branchesUrl collaboratorsUrl commentsUrl commitsUrl compareUrl contentsUrl contributorsUrl deploymentsUrl downloadsUrl eventsUrl forksUrl gitCommitsUrl gitRefsUrl gitTagsUrl gitUrl issueCommentUrl issueEventsUrl issuesUrl keysUrl labelsUrl languagesUrl mergesUrl milestonesUrl notificationsUrl pullsUrl releasesUrl sshUrl stargazersUrl statusesUrl subscribersUrl subscriptionUrl tagsUrl teamsUrl treesUrl cloneUrl mirrorUrl hooksUrl svnUrl homepage language forksCount stargazersCount watchersCount size defaultBranch openIssuesCount isTemplate topics hasIssues hasProjects hasWiki hasPages hasDownloads archived disabled visibility pushedAt createdAt updatedAt allowRebaseMerge templateRepository tempCloneToken allowSquashMerge allowAutoMerge deleteBranchOnMerge allowMergeCommit allowForking webCommitSignoffRequired subscribersCount networkCount openIssues watchers masterBranch ->
         { id = id
         , nodeId = nodeId
         , name = name
         , fullName = fullName
         , license = license
         , forks = forks
         , permissions = permissions
         , roleName = roleName
         , owner = owner
         , private = private
         , htmlUrl = htmlUrl
         , description = description
         , fork = fork
         , url = url
         , archiveUrl = archiveUrl
         , assigneesUrl = assigneesUrl
         , blobsUrl = blobsUrl
         , branchesUrl = branchesUrl
         , collaboratorsUrl = collaboratorsUrl
         , commentsUrl = commentsUrl
         , commitsUrl = commitsUrl
         , compareUrl = compareUrl
         , contentsUrl = contentsUrl
         , contributorsUrl = contributorsUrl
         , deploymentsUrl = deploymentsUrl
         , downloadsUrl = downloadsUrl
         , eventsUrl = eventsUrl
         , forksUrl = forksUrl
         , gitCommitsUrl = gitCommitsUrl
         , gitRefsUrl = gitRefsUrl
         , gitTagsUrl = gitTagsUrl
         , gitUrl = gitUrl
         , issueCommentUrl = issueCommentUrl
         , issueEventsUrl = issueEventsUrl
         , issuesUrl = issuesUrl
         , keysUrl = keysUrl
         , labelsUrl = labelsUrl
         , languagesUrl = languagesUrl
         , mergesUrl = mergesUrl
         , milestonesUrl = milestonesUrl
         , notificationsUrl = notificationsUrl
         , pullsUrl = pullsUrl
         , releasesUrl = releasesUrl
         , sshUrl = sshUrl
         , stargazersUrl = stargazersUrl
         , statusesUrl = statusesUrl
         , subscribersUrl = subscribersUrl
         , subscriptionUrl = subscriptionUrl
         , tagsUrl = tagsUrl
         , teamsUrl = teamsUrl
         , treesUrl = treesUrl
         , cloneUrl = cloneUrl
         , mirrorUrl = mirrorUrl
         , hooksUrl = hooksUrl
         , svnUrl = svnUrl
         , homepage = homepage
         , language = language
         , forksCount = forksCount
         , stargazersCount = stargazersCount
         , watchersCount = watchersCount
         , size = size
         , defaultBranch = defaultBranch
         , openIssuesCount = openIssuesCount
         , isTemplate = isTemplate
         , topics = topics
         , hasIssues = hasIssues
         , hasProjects = hasProjects
         , hasWiki = hasWiki
         , hasPages = hasPages
         , hasDownloads = hasDownloads
         , archived = archived
         , disabled = disabled
         , visibility = visibility
         , pushedAt = pushedAt
         , createdAt = createdAt
         , updatedAt = updatedAt
         , allowRebaseMerge = allowRebaseMerge
         , templateRepository = templateRepository
         , tempCloneToken = tempCloneToken
         , allowSquashMerge = allowSquashMerge
         , allowAutoMerge = allowAutoMerge
         , deleteBranchOnMerge = deleteBranchOnMerge
         , allowMergeCommit = allowMergeCommit
         , allowForking = allowForking
         , webCommitSignoffRequired = webCommitSignoffRequired
         , subscribersCount = subscribersCount
         , networkCount = networkCount
         , openIssues = openIssues
         , watchers = watchers
         , masterBranch = masterBranch
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "full_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "license"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeLicenseSimple
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "forks" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "permissions"
                (Json.Decode.succeed
                  (\admin pull triage push maintain ->
                      { admin = admin
                      , pull = pull
                      , triage = triage
                      , push = push
                      , maintain = maintain
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "admin" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "pull" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "triage" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "push" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "maintain" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "role_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "owner"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "private" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "fork" Json.Decode.bool)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archive_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assignees_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "blobs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "branches_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "collaborators_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "compare_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contents_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contributors_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deployments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "downloads_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_refs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_tags_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_comment_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issues_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "keys_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "labels_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "languages_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merges_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "milestones_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "notifications_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pulls_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "releases_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ssh_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "stargazers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "statuses_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscribers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscription_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tags_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "teams_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "trees_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "clone_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "mirror_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "hooks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "svn_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "homepage"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "language"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "stargazers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "watchers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "size" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "default_branch" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "open_issues_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "is_template" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "topics" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_issues" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_projects" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_wiki" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_pages" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_downloads" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archived" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "disabled" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "visibility" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pushed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "created_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "updated_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_rebase_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "template_repository"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeRepository
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "temp_clone_token" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_squash_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_auto_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "delete_branch_on_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_merge_commit" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_forking" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "web_commit_signoff_required" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscribers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "network_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "open_issues" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "watchers" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "master_branch" Json.Decode.string)


encodeTeamRepository : TeamRepository -> Json.Encode.Value
encodeTeamRepository rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "full_name", Json.Encode.string rec.fullName )
        , ( "license", Debug.todo "decode anyOf" rec.license )
        , ( "forks", Json.Encode.int rec.forks )
        , ( "permissions"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "admin", Json.Encode.bool rec0.admin )
                    , ( "pull", Json.Encode.bool rec0.pull )
                    , ( "triage", Json.Encode.bool rec0.triage )
                    , ( "push", Json.Encode.bool rec0.push )
                    , ( "maintain", Json.Encode.bool rec0.maintain )
                    ]
            )
                rec.permissions
          )
        , ( "role_name", Json.Encode.string rec.roleName )
        , ( "owner", Debug.todo "decode anyOf" rec.owner )
        , ( "private", Json.Encode.bool rec.private )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "fork", Json.Encode.bool rec.fork )
        , ( "url", Json.Encode.string rec.url )
        , ( "archive_url", Json.Encode.string rec.archiveUrl )
        , ( "assignees_url", Json.Encode.string rec.assigneesUrl )
        , ( "blobs_url", Json.Encode.string rec.blobsUrl )
        , ( "branches_url", Json.Encode.string rec.branchesUrl )
        , ( "collaborators_url", Json.Encode.string rec.collaboratorsUrl )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "commits_url", Json.Encode.string rec.commitsUrl )
        , ( "compare_url", Json.Encode.string rec.compareUrl )
        , ( "contents_url", Json.Encode.string rec.contentsUrl )
        , ( "contributors_url", Json.Encode.string rec.contributorsUrl )
        , ( "deployments_url", Json.Encode.string rec.deploymentsUrl )
        , ( "downloads_url", Json.Encode.string rec.downloadsUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "forks_url", Json.Encode.string rec.forksUrl )
        , ( "git_commits_url", Json.Encode.string rec.gitCommitsUrl )
        , ( "git_refs_url", Json.Encode.string rec.gitRefsUrl )
        , ( "git_tags_url", Json.Encode.string rec.gitTagsUrl )
        , ( "git_url", Json.Encode.string rec.gitUrl )
        , ( "issue_comment_url", Json.Encode.string rec.issueCommentUrl )
        , ( "issue_events_url", Json.Encode.string rec.issueEventsUrl )
        , ( "issues_url", Json.Encode.string rec.issuesUrl )
        , ( "keys_url", Json.Encode.string rec.keysUrl )
        , ( "labels_url", Json.Encode.string rec.labelsUrl )
        , ( "languages_url", Json.Encode.string rec.languagesUrl )
        , ( "merges_url", Json.Encode.string rec.mergesUrl )
        , ( "milestones_url", Json.Encode.string rec.milestonesUrl )
        , ( "notifications_url", Json.Encode.string rec.notificationsUrl )
        , ( "pulls_url", Json.Encode.string rec.pullsUrl )
        , ( "releases_url", Json.Encode.string rec.releasesUrl )
        , ( "ssh_url", Json.Encode.string rec.sshUrl )
        , ( "stargazers_url", Json.Encode.string rec.stargazersUrl )
        , ( "statuses_url", Json.Encode.string rec.statusesUrl )
        , ( "subscribers_url", Json.Encode.string rec.subscribersUrl )
        , ( "subscription_url", Json.Encode.string rec.subscriptionUrl )
        , ( "tags_url", Json.Encode.string rec.tagsUrl )
        , ( "teams_url", Json.Encode.string rec.teamsUrl )
        , ( "trees_url", Json.Encode.string rec.treesUrl )
        , ( "clone_url", Json.Encode.string rec.cloneUrl )
        , ( "mirror_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.mirrorUrl
          )
        , ( "hooks_url", Json.Encode.string rec.hooksUrl )
        , ( "svn_url", Json.Encode.string rec.svnUrl )
        , ( "homepage"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.homepage
          )
        , ( "language"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.language
          )
        , ( "forks_count", Json.Encode.int rec.forksCount )
        , ( "stargazers_count", Json.Encode.int rec.stargazersCount )
        , ( "watchers_count", Json.Encode.int rec.watchersCount )
        , ( "size", Json.Encode.int rec.size )
        , ( "default_branch", Json.Encode.string rec.defaultBranch )
        , ( "open_issues_count", Json.Encode.int rec.openIssuesCount )
        , ( "is_template", Json.Encode.bool rec.isTemplate )
        , ( "topics", Json.Encode.list Json.Encode.string rec.topics )
        , ( "has_issues", Json.Encode.bool rec.hasIssues )
        , ( "has_projects", Json.Encode.bool rec.hasProjects )
        , ( "has_wiki", Json.Encode.bool rec.hasWiki )
        , ( "has_pages", Json.Encode.bool rec.hasPages )
        , ( "has_downloads", Json.Encode.bool rec.hasDownloads )
        , ( "archived", Json.Encode.bool rec.archived )
        , ( "disabled", Json.Encode.bool rec.disabled )
        , ( "visibility", Json.Encode.string rec.visibility )
        , ( "pushed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.pushedAt
          )
        , ( "created_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.createdAt
          )
        , ( "updated_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.updatedAt
          )
        , ( "allow_rebase_merge", Json.Encode.bool rec.allowRebaseMerge )
        , ( "template_repository"
          , Debug.todo "decode anyOf" rec.templateRepository
          )
        , ( "temp_clone_token", Json.Encode.string rec.tempCloneToken )
        , ( "allow_squash_merge", Json.Encode.bool rec.allowSquashMerge )
        , ( "allow_auto_merge", Json.Encode.bool rec.allowAutoMerge )
        , ( "delete_branch_on_merge", Json.Encode.bool rec.deleteBranchOnMerge )
        , ( "allow_merge_commit", Json.Encode.bool rec.allowMergeCommit )
        , ( "allow_forking", Json.Encode.bool rec.allowForking )
        , ( "web_commit_signoff_required"
          , Json.Encode.bool rec.webCommitSignoffRequired
          )
        , ( "subscribers_count", Json.Encode.int rec.subscribersCount )
        , ( "network_count", Json.Encode.int rec.networkCount )
        , ( "open_issues", Json.Encode.int rec.openIssues )
        , ( "watchers", Json.Encode.int rec.watchers )
        , ( "master_branch", Json.Encode.string rec.masterBranch )
        ]


type alias TeamProject =
    { ownerUrl : String
    , url : String
    , htmlUrl : String
    , columnsUrl : String
    , id : Int
    , nodeId : String
    , name : String
    , body : Nullable String
    , number : Int
    , state : String
    , creator : SimpleUser
    , createdAt : String
    , updatedAt : String
    , organizationPermission : String
    , private : Bool
    , permissions : { read : Bool, write : Bool, admin : Bool }
    }


decodeTeamProject : Json.Decode.Decoder TeamProject
decodeTeamProject =
    Json.Decode.succeed
     (\ownerUrl url htmlUrl columnsUrl id nodeId name body number state creator createdAt updatedAt organizationPermission private permissions ->
         { ownerUrl = ownerUrl
         , url = url
         , htmlUrl = htmlUrl
         , columnsUrl = columnsUrl
         , id = id
         , nodeId = nodeId
         , name = name
         , body = body
         , number = number
         , state = state
         , creator = creator
         , createdAt = createdAt
         , updatedAt = updatedAt
         , organizationPermission = organizationPermission
         , private = private
         , permissions = permissions
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "owner_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "columns_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "body"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "number" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "creator" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_permission" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "private" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "permissions"
                (Json.Decode.succeed
                  (\read write admin ->
                      { read = read, write = write, admin = admin }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "read" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "write" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "admin" Json.Decode.bool)
                )
            )


encodeTeamProject : TeamProject -> Json.Encode.Value
encodeTeamProject rec =
    Json.Encode.object
        [ ( "owner_url", Json.Encode.string rec.ownerUrl )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "columns_url", Json.Encode.string rec.columnsUrl )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "body"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.body
          )
        , ( "number", Json.Encode.int rec.number )
        , ( "state", Json.Encode.string rec.state )
        , ( "creator", encodeSimpleUser rec.creator )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "organization_permission"
          , Json.Encode.string rec.organizationPermission
          )
        , ( "private", Json.Encode.bool rec.private )
        , ( "permissions"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "read", Json.Encode.bool rec0.read )
                    , ( "write", Json.Encode.bool rec0.write )
                    , ( "admin", Json.Encode.bool rec0.admin )
                    ]
            )
                rec.permissions
          )
        ]


type alias TeamOrganization =
    { login : String
    , id : Int
    , nodeId : String
    , url : String
    , reposUrl : String
    , eventsUrl : String
    , hooksUrl : String
    , issuesUrl : String
    , membersUrl : String
    , publicMembersUrl : String
    , avatarUrl : String
    , description : Nullable String
    , name : String
    , company : String
    , blog : String
    , location : String
    , email : String
    , twitterUsername : Nullable String
    , isVerified : Bool
    , hasOrganizationProjects : Bool
    , hasRepositoryProjects : Bool
    , publicRepos : Int
    , publicGists : Int
    , followers : Int
    , following : Int
    , htmlUrl : String
    , createdAt : String
    , type_ : String
    , totalPrivateRepos : Int
    , ownedPrivateRepos : Int
    , privateGists : Nullable Int
    , diskUsage : Nullable Int
    , collaborators : Nullable Int
    , billingEmail : Nullable String
    , plan :
        { name : String
        , space : Int
        , privateRepos : Int
        , filledSeats : Int
        , seats : Int
        }
    , defaultRepositoryPermission : Nullable String
    , membersCanCreateRepositories : Nullable Bool
    , twoFactorRequirementEnabled : Nullable Bool
    , membersAllowedRepositoryCreationType : String
    , membersCanCreatePublicRepositories : Bool
    , membersCanCreatePrivateRepositories : Bool
    , membersCanCreateInternalRepositories : Bool
    , membersCanCreatePages : Bool
    , membersCanCreatePublicPages : Bool
    , membersCanCreatePrivatePages : Bool
    , membersCanForkPrivateRepositories : Nullable Bool
    , webCommitSignoffRequired : Bool
    , updatedAt : String
    }


decodeTeamOrganization : Json.Decode.Decoder TeamOrganization
decodeTeamOrganization =
    Json.Decode.succeed
     (\login id nodeId url reposUrl eventsUrl hooksUrl issuesUrl membersUrl publicMembersUrl avatarUrl description name company blog location email twitterUsername isVerified hasOrganizationProjects hasRepositoryProjects publicRepos publicGists followers following htmlUrl createdAt type_ totalPrivateRepos ownedPrivateRepos privateGists diskUsage collaborators billingEmail plan defaultRepositoryPermission membersCanCreateRepositories twoFactorRequirementEnabled membersAllowedRepositoryCreationType membersCanCreatePublicRepositories membersCanCreatePrivateRepositories membersCanCreateInternalRepositories membersCanCreatePages membersCanCreatePublicPages membersCanCreatePrivatePages membersCanForkPrivateRepositories webCommitSignoffRequired updatedAt ->
         { login = login
         , id = id
         , nodeId = nodeId
         , url = url
         , reposUrl = reposUrl
         , eventsUrl = eventsUrl
         , hooksUrl = hooksUrl
         , issuesUrl = issuesUrl
         , membersUrl = membersUrl
         , publicMembersUrl = publicMembersUrl
         , avatarUrl = avatarUrl
         , description = description
         , name = name
         , company = company
         , blog = blog
         , location = location
         , email = email
         , twitterUsername = twitterUsername
         , isVerified = isVerified
         , hasOrganizationProjects = hasOrganizationProjects
         , hasRepositoryProjects = hasRepositoryProjects
         , publicRepos = publicRepos
         , publicGists = publicGists
         , followers = followers
         , following = following
         , htmlUrl = htmlUrl
         , createdAt = createdAt
         , type_ = type_
         , totalPrivateRepos = totalPrivateRepos
         , ownedPrivateRepos = ownedPrivateRepos
         , privateGists = privateGists
         , diskUsage = diskUsage
         , collaborators = collaborators
         , billingEmail = billingEmail
         , plan = plan
         , defaultRepositoryPermission = defaultRepositoryPermission
         , membersCanCreateRepositories = membersCanCreateRepositories
         , twoFactorRequirementEnabled = twoFactorRequirementEnabled
         , membersAllowedRepositoryCreationType =
             membersAllowedRepositoryCreationType
         , membersCanCreatePublicRepositories =
             membersCanCreatePublicRepositories
         , membersCanCreatePrivateRepositories =
             membersCanCreatePrivateRepositories
         , membersCanCreateInternalRepositories =
             membersCanCreateInternalRepositories
         , membersCanCreatePages = membersCanCreatePages
         , membersCanCreatePublicPages = membersCanCreatePublicPages
         , membersCanCreatePrivatePages = membersCanCreatePrivatePages
         , membersCanForkPrivateRepositories = membersCanForkPrivateRepositories
         , webCommitSignoffRequired = webCommitSignoffRequired
         , updatedAt = updatedAt
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "login" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repos_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "hooks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issues_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "members_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_members_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "avatar_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "company" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "blog" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "location" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "email" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "twitter_username"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "is_verified" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_organization_projects" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_repository_projects" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_repos" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_gists" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "followers" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "following" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "total_private_repos" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "owned_private_repos" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "private_gists"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "disk_usage"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "collaborators"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "billing_email"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "plan"
                (Json.Decode.succeed
                  (\name space privateRepos filledSeats seats ->
                      { name = name
                      , space = space
                      , privateRepos = privateRepos
                      , filledSeats = filledSeats
                      , seats = seats
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "space" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "private_repos" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "filled_seats" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "seats" Json.Decode.int)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "default_repository_permission"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_create_repositories"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "two_factor_requirement_enabled"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_allowed_repository_creation_type"
                Json.Decode.string
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_create_public_repositories"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_create_private_repositories"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_create_internal_repositories"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "members_can_create_pages" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_create_public_pages"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_create_private_pages"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_fork_private_repositories"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "web_commit_signoff_required" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)


encodeTeamOrganization : TeamOrganization -> Json.Encode.Value
encodeTeamOrganization rec =
    Json.Encode.object
        [ ( "login", Json.Encode.string rec.login )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "repos_url", Json.Encode.string rec.reposUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "hooks_url", Json.Encode.string rec.hooksUrl )
        , ( "issues_url", Json.Encode.string rec.issuesUrl )
        , ( "members_url", Json.Encode.string rec.membersUrl )
        , ( "public_members_url", Json.Encode.string rec.publicMembersUrl )
        , ( "avatar_url", Json.Encode.string rec.avatarUrl )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "name", Json.Encode.string rec.name )
        , ( "company", Json.Encode.string rec.company )
        , ( "blog", Json.Encode.string rec.blog )
        , ( "location", Json.Encode.string rec.location )
        , ( "email", Json.Encode.string rec.email )
        , ( "twitter_username"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.twitterUsername
          )
        , ( "is_verified", Json.Encode.bool rec.isVerified )
        , ( "has_organization_projects"
          , Json.Encode.bool rec.hasOrganizationProjects
          )
        , ( "has_repository_projects"
          , Json.Encode.bool rec.hasRepositoryProjects
          )
        , ( "public_repos", Json.Encode.int rec.publicRepos )
        , ( "public_gists", Json.Encode.int rec.publicGists )
        , ( "followers", Json.Encode.int rec.followers )
        , ( "following", Json.Encode.int rec.following )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "type", Json.Encode.string rec.type_ )
        , ( "total_private_repos", Json.Encode.int rec.totalPrivateRepos )
        , ( "owned_private_repos", Json.Encode.int rec.ownedPrivateRepos )
        , ( "private_gists"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.privateGists
          )
        , ( "disk_usage"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.diskUsage
          )
        , ( "collaborators"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.collaborators
          )
        , ( "billing_email"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.billingEmail
          )
        , ( "plan"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "name", Json.Encode.string rec0.name )
                    , ( "space", Json.Encode.int rec0.space )
                    , ( "private_repos", Json.Encode.int rec0.privateRepos )
                    , ( "filled_seats", Json.Encode.int rec0.filledSeats )
                    , ( "seats", Json.Encode.int rec0.seats )
                    ]
            )
                rec.plan
          )
        , ( "default_repository_permission"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.defaultRepositoryPermission
          )
        , ( "members_can_create_repositories"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.membersCanCreateRepositories
          )
        , ( "two_factor_requirement_enabled"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.twoFactorRequirementEnabled
          )
        , ( "members_allowed_repository_creation_type"
          , Json.Encode.string rec.membersAllowedRepositoryCreationType
          )
        , ( "members_can_create_public_repositories"
          , Json.Encode.bool rec.membersCanCreatePublicRepositories
          )
        , ( "members_can_create_private_repositories"
          , Json.Encode.bool rec.membersCanCreatePrivateRepositories
          )
        , ( "members_can_create_internal_repositories"
          , Json.Encode.bool rec.membersCanCreateInternalRepositories
          )
        , ( "members_can_create_pages"
          , Json.Encode.bool rec.membersCanCreatePages
          )
        , ( "members_can_create_public_pages"
          , Json.Encode.bool rec.membersCanCreatePublicPages
          )
        , ( "members_can_create_private_pages"
          , Json.Encode.bool rec.membersCanCreatePrivatePages
          )
        , ( "members_can_fork_private_repositories"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.membersCanForkPrivateRepositories
          )
        , ( "web_commit_signoff_required"
          , Json.Encode.bool rec.webCommitSignoffRequired
          )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        ]


type alias TeamMembership =
    { url : String, role : String, state : String }


decodeTeamMembership : Json.Decode.Decoder TeamMembership
decodeTeamMembership =
    Json.Decode.succeed
     (\url role state -> { url = url, role = role, state = state })
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "role" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)


encodeTeamMembership : TeamMembership -> Json.Encode.Value
encodeTeamMembership rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "role", Json.Encode.string rec.role )
        , ( "state", Json.Encode.string rec.state )
        ]


type alias TeamFull =
    { id : Int
    , nodeId : String
    , url : String
    , htmlUrl : String
    , name : String
    , slug : String
    , description : Nullable String
    , privacy : String
    , permission : String
    , membersUrl : String
    , repositoriesUrl : String
    , parent : Debug.Todo
    , membersCount : Int
    , reposCount : Int
    , createdAt : String
    , updatedAt : String
    , organization : TeamOrganization
    , ldapDn : String
    }


decodeTeamFull : Json.Decode.Decoder TeamFull
decodeTeamFull =
    Json.Decode.succeed
     (\id nodeId url htmlUrl name slug description privacy permission membersUrl repositoriesUrl parent membersCount reposCount createdAt updatedAt organization ldapDn ->
         { id = id
         , nodeId = nodeId
         , url = url
         , htmlUrl = htmlUrl
         , name = name
         , slug = slug
         , description = description
         , privacy = privacy
         , permission = permission
         , membersUrl = membersUrl
         , repositoriesUrl = repositoriesUrl
         , parent = parent
         , membersCount = membersCount
         , reposCount = reposCount
         , createdAt = createdAt
         , updatedAt = updatedAt
         , organization = organization
         , ldapDn = ldapDn
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "slug" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "privacy" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "permission" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "members_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repositories_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "parent"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeTeamSimple
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "members_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repos_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization" decodeTeamOrganization)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ldap_dn" Json.Decode.string)


encodeTeamFull : TeamFull -> Json.Encode.Value
encodeTeamFull rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "name", Json.Encode.string rec.name )
        , ( "slug", Json.Encode.string rec.slug )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "privacy", Json.Encode.string rec.privacy )
        , ( "permission", Json.Encode.string rec.permission )
        , ( "members_url", Json.Encode.string rec.membersUrl )
        , ( "repositories_url", Json.Encode.string rec.repositoriesUrl )
        , ( "parent", Debug.todo "decode anyOf" rec.parent )
        , ( "members_count", Json.Encode.int rec.membersCount )
        , ( "repos_count", Json.Encode.int rec.reposCount )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "organization", encodeTeamOrganization rec.organization )
        , ( "ldap_dn", Json.Encode.string rec.ldapDn )
        ]


type alias TeamDiscussionComment =
    { author : Debug.Todo
    , body : String
    , bodyHtml : String
    , bodyVersion : String
    , createdAt : String
    , lastEditedAt : Nullable String
    , discussionUrl : String
    , htmlUrl : String
    , nodeId : String
    , number : Int
    , updatedAt : String
    , url : String
    , reactions : ReactionRollup
    }


decodeTeamDiscussionComment : Json.Decode.Decoder TeamDiscussionComment
decodeTeamDiscussionComment =
    Json.Decode.succeed
     (\author body bodyHtml bodyVersion createdAt lastEditedAt discussionUrl htmlUrl nodeId number updatedAt url reactions ->
         { author = author
         , body = body
         , bodyHtml = bodyHtml
         , bodyVersion = bodyVersion
         , createdAt = createdAt
         , lastEditedAt = lastEditedAt
         , discussionUrl = discussionUrl
         , htmlUrl = htmlUrl
         , nodeId = nodeId
         , number = number
         , updatedAt = updatedAt
         , url = url
         , reactions = reactions
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "author"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_html" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_version" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "last_edited_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "discussion_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "number" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "reactions" decodeReactionRollup)


encodeTeamDiscussionComment : TeamDiscussionComment -> Json.Encode.Value
encodeTeamDiscussionComment rec =
    Json.Encode.object
        [ ( "author", Debug.todo "decode anyOf" rec.author )
        , ( "body", Json.Encode.string rec.body )
        , ( "body_html", Json.Encode.string rec.bodyHtml )
        , ( "body_version", Json.Encode.string rec.bodyVersion )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "last_edited_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.lastEditedAt
          )
        , ( "discussion_url", Json.Encode.string rec.discussionUrl )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "number", Json.Encode.int rec.number )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "url", Json.Encode.string rec.url )
        , ( "reactions", encodeReactionRollup rec.reactions )
        ]


type alias TeamDiscussion =
    { author : Debug.Todo
    , body : String
    , bodyHtml : String
    , bodyVersion : String
    , commentsCount : Int
    , commentsUrl : String
    , createdAt : String
    , lastEditedAt : Nullable String
    , htmlUrl : String
    , nodeId : String
    , number : Int
    , pinned : Bool
    , private : Bool
    , teamUrl : String
    , title : String
    , updatedAt : String
    , url : String
    , reactions : ReactionRollup
    }


decodeTeamDiscussion : Json.Decode.Decoder TeamDiscussion
decodeTeamDiscussion =
    Json.Decode.succeed
     (\author body bodyHtml bodyVersion commentsCount commentsUrl createdAt lastEditedAt htmlUrl nodeId number pinned private teamUrl title updatedAt url reactions ->
         { author = author
         , body = body
         , bodyHtml = bodyHtml
         , bodyVersion = bodyVersion
         , commentsCount = commentsCount
         , commentsUrl = commentsUrl
         , createdAt = createdAt
         , lastEditedAt = lastEditedAt
         , htmlUrl = htmlUrl
         , nodeId = nodeId
         , number = number
         , pinned = pinned
         , private = private
         , teamUrl = teamUrl
         , title = title
         , updatedAt = updatedAt
         , url = url
         , reactions = reactions
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "author"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_html" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_version" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "last_edited_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "number" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pinned" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "private" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "team_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "reactions" decodeReactionRollup)


encodeTeamDiscussion : TeamDiscussion -> Json.Encode.Value
encodeTeamDiscussion rec =
    Json.Encode.object
        [ ( "author", Debug.todo "decode anyOf" rec.author )
        , ( "body", Json.Encode.string rec.body )
        , ( "body_html", Json.Encode.string rec.bodyHtml )
        , ( "body_version", Json.Encode.string rec.bodyVersion )
        , ( "comments_count", Json.Encode.int rec.commentsCount )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "last_edited_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.lastEditedAt
          )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "number", Json.Encode.int rec.number )
        , ( "pinned", Json.Encode.bool rec.pinned )
        , ( "private", Json.Encode.bool rec.private )
        , ( "team_url", Json.Encode.string rec.teamUrl )
        , ( "title", Json.Encode.string rec.title )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "url", Json.Encode.string rec.url )
        , ( "reactions", encodeReactionRollup rec.reactions )
        ]


type alias Team =
    { id : Int
    , nodeId : String
    , name : String
    , slug : String
    , description : Nullable String
    , privacy : String
    , permission : String
    , permissions :
        { pull : Bool
        , triage : Bool
        , push : Bool
        , maintain : Bool
        , admin : Bool
        }
    , url : String
    , htmlUrl : String
    , membersUrl : String
    , repositoriesUrl : String
    , parent : Debug.Todo
    }


decodeTeam : Json.Decode.Decoder Team
decodeTeam =
    Json.Decode.succeed
     (\id nodeId name slug description privacy permission permissions url htmlUrl membersUrl repositoriesUrl parent ->
         { id = id
         , nodeId = nodeId
         , name = name
         , slug = slug
         , description = description
         , privacy = privacy
         , permission = permission
         , permissions = permissions
         , url = url
         , htmlUrl = htmlUrl
         , membersUrl = membersUrl
         , repositoriesUrl = repositoriesUrl
         , parent = parent
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "slug" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "privacy" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "permission" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "permissions"
                (Json.Decode.succeed
                  (\pull triage push maintain admin ->
                      { pull = pull
                      , triage = triage
                      , push = push
                      , maintain = maintain
                      , admin = admin
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "pull" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "triage" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "push" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "maintain" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "admin" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "members_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repositories_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "parent"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeTeamSimple
                    , Json.Decode.null Null
                    ]
                )
            )


encodeTeam : Team -> Json.Encode.Value
encodeTeam rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "slug", Json.Encode.string rec.slug )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "privacy", Json.Encode.string rec.privacy )
        , ( "permission", Json.Encode.string rec.permission )
        , ( "permissions"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "pull", Json.Encode.bool rec0.pull )
                    , ( "triage", Json.Encode.bool rec0.triage )
                    , ( "push", Json.Encode.bool rec0.push )
                    , ( "maintain", Json.Encode.bool rec0.maintain )
                    , ( "admin", Json.Encode.bool rec0.admin )
                    ]
            )
                rec.permissions
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "members_url", Json.Encode.string rec.membersUrl )
        , ( "repositories_url", Json.Encode.string rec.repositoriesUrl )
        , ( "parent", Debug.todo "decode anyOf" rec.parent )
        ]


type alias TagProtection =
    { id : Int
    , createdAt : String
    , updatedAt : String
    , enabled : Bool
    , pattern : String
    }


decodeTagProtection : Json.Decode.Decoder TagProtection
decodeTagProtection =
    Json.Decode.succeed
     (\id createdAt updatedAt enabled pattern ->
         { id = id
         , createdAt = createdAt
         , updatedAt = updatedAt
         , enabled = enabled
         , pattern = pattern
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "enabled" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pattern" Json.Decode.string)


encodeTagProtection : TagProtection -> Json.Encode.Value
encodeTagProtection rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "enabled", Json.Encode.bool rec.enabled )
        , ( "pattern", Json.Encode.string rec.pattern )
        ]


type alias Tag =
    { name : String
    , commit : { sha : String, url : String }
    , zipballUrl : String
    , tarballUrl : String
    , nodeId : String
    }


decodeTag : Json.Decode.Decoder Tag
decodeTag =
    Json.Decode.succeed
     (\name commit zipballUrl tarballUrl nodeId ->
         { name = name
         , commit = commit
         , zipballUrl = zipballUrl
         , tarballUrl = tarballUrl
         , nodeId = nodeId
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit"
                (Json.Decode.succeed (\sha url -> { sha = sha, url = url })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "zipball_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tarball_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)


encodeTag : Tag -> Json.Encode.Value
encodeTag rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "commit"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "sha", Json.Encode.string rec0.sha )
                    , ( "url", Json.Encode.string rec0.url )
                    ]
            )
                rec.commit
          )
        , ( "zipball_url", Json.Encode.string rec.zipballUrl )
        , ( "tarball_url", Json.Encode.string rec.tarballUrl )
        , ( "node_id", Json.Encode.string rec.nodeId )
        ]


type alias StatusCheckPolicy =
    { url : String
    , strict : Bool
    , contexts : List String
    , checks : List { context : String, appId : Nullable Int }
    , contextsUrl : String
    }


decodeStatusCheckPolicy : Json.Decode.Decoder StatusCheckPolicy
decodeStatusCheckPolicy =
    Json.Decode.succeed
     (\url strict contexts checks contextsUrl ->
         { url = url
         , strict = strict
         , contexts = contexts
         , checks = checks
         , contextsUrl = contextsUrl
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "strict" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contexts" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "checks"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\context appId -> { context = context, appId = appId })
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "context" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "app_id"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.int
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contexts_url" Json.Decode.string)


encodeStatusCheckPolicy : StatusCheckPolicy -> Json.Encode.Value
encodeStatusCheckPolicy rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "strict", Json.Encode.bool rec.strict )
        , ( "contexts", Json.Encode.list Json.Encode.string rec.contexts )
        , ( "checks"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "context", Json.Encode.string rec0.context )
                        , ( "app_id"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.int value
                            )
                                rec0.appId
                          )
                        ]
                )
                rec.checks
          )
        , ( "contexts_url", Json.Encode.string rec.contextsUrl )
        ]


type alias Status =
    { url : String
    , avatarUrl : Nullable String
    , id : Int
    , nodeId : String
    , state : String
    , description : Nullable String
    , targetUrl : Nullable String
    , context : String
    , createdAt : String
    , updatedAt : String
    , creator : Debug.Todo
    }


decodeStatus : Json.Decode.Decoder Status
decodeStatus =
    Json.Decode.succeed
     (\url avatarUrl id nodeId state description targetUrl context createdAt updatedAt creator ->
         { url = url
         , avatarUrl = avatarUrl
         , id = id
         , nodeId = nodeId
         , state = state
         , description = description
         , targetUrl = targetUrl
         , context = context
         , createdAt = createdAt
         , updatedAt = updatedAt
         , creator = creator
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "avatar_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "target_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "context" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "creator"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )


encodeStatus : Status -> Json.Encode.Value
encodeStatus rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "avatar_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.avatarUrl
          )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "state", Json.Encode.string rec.state )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "target_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.targetUrl
          )
        , ( "context", Json.Encode.string rec.context )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "creator", Debug.todo "decode anyOf" rec.creator )
        ]


type alias StateChangeIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , stateReason : Nullable String
    }


decodeStateChangeIssueEvent : Json.Decode.Decoder StateChangeIssueEvent
decodeStateChangeIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp stateReason ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , stateReason = stateReason
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "state_reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeStateChangeIssueEvent : StateChangeIssueEvent -> Json.Encode.Value
encodeStateChangeIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "state_reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.stateReason
          )
        ]


type alias StarredRepository =
    { starredAt : String, repo : Repository }


decodeStarredRepository : Json.Decode.Decoder StarredRepository
decodeStarredRepository =
    Json.Decode.succeed
     (\starredAt repo -> { starredAt = starredAt, repo = repo })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "starred_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "repo" decodeRepository)


encodeStarredRepository : StarredRepository -> Json.Encode.Value
encodeStarredRepository rec =
    Json.Encode.object
        [ ( "starred_at", Json.Encode.string rec.starredAt )
        , ( "repo", encodeRepository rec.repo )
        ]


type alias Stargazer =
    { starredAt : String, user : Debug.Todo }


decodeStargazer : Json.Decode.Decoder Stargazer
decodeStargazer =
    Json.Decode.succeed
     (\starredAt user -> { starredAt = starredAt, user = user })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "starred_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )


encodeStargazer : Stargazer -> Json.Encode.Value
encodeStargazer rec =
    Json.Encode.object
        [ ( "starred_at", Json.Encode.string rec.starredAt )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        ]


type alias SshSigningKey =
    { key : String, id : Int, title : String, createdAt : String }


decodeSshSigningKey : Json.Decode.Decoder SshSigningKey
decodeSshSigningKey =
    Json.Decode.succeed
     (\key id title createdAt ->
         { key = key, id = id, title = title, createdAt = createdAt }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "key" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)


encodeSshSigningKey : SshSigningKey -> Json.Encode.Value
encodeSshSigningKey rec =
    Json.Encode.object
        [ ( "key", Json.Encode.string rec.key )
        , ( "id", Json.Encode.int rec.id )
        , ( "title", Json.Encode.string rec.title )
        , ( "created_at", Json.Encode.string rec.createdAt )
        ]


type alias Snapshot =
    { version : Int
    , job : { id : String, correlator : String, htmlUrl : String }
    , sha : String
    , ref : String
    , detector : { name : String, version : String, url : String }
    , metadata : Metadata
    , manifests : {}
    , scanned : String
    }


decodeSnapshot : Json.Decode.Decoder Snapshot
decodeSnapshot =
    Json.Decode.succeed
     (\version job sha ref detector metadata manifests scanned ->
         { version = version
         , job = job
         , sha = sha
         , ref = ref
         , detector = detector
         , metadata = metadata
         , manifests = manifests
         , scanned = scanned
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "version" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "job"
                (Json.Decode.succeed
                  (\id correlator htmlUrl ->
                      { id = id, correlator = correlator, htmlUrl = htmlUrl }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "id" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "correlator" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "html_url" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "ref" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "detector"
                (Json.Decode.succeed
                  (\name version url ->
                      { name = name, version = version, url = url }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "version" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "metadata" decodeMetadata)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "manifests" (Json.Decode.succeed {}))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "scanned" Json.Decode.string)


encodeSnapshot : Snapshot -> Json.Encode.Value
encodeSnapshot rec =
    Json.Encode.object
        [ ( "version", Json.Encode.int rec.version )
        , ( "job"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "id", Json.Encode.string rec0.id )
                    , ( "correlator", Json.Encode.string rec0.correlator )
                    , ( "html_url", Json.Encode.string rec0.htmlUrl )
                    ]
            )
                rec.job
          )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "ref", Json.Encode.string rec.ref )
        , ( "detector"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "name", Json.Encode.string rec0.name )
                    , ( "version", Json.Encode.string rec0.version )
                    , ( "url", Json.Encode.string rec0.url )
                    ]
            )
                rec.detector
          )
        , ( "metadata", encodeMetadata rec.metadata )
        , ( "manifests", (\rec0 -> Json.Encode.object []) rec.manifests )
        , ( "scanned", Json.Encode.string rec.scanned )
        ]


type alias SimpleUser =
    { name : Nullable String
    , email : Nullable String
    , login : String
    , id : Int
    , nodeId : String
    , avatarUrl : String
    , gravatarId : Nullable String
    , url : String
    , htmlUrl : String
    , followersUrl : String
    , followingUrl : String
    , gistsUrl : String
    , starredUrl : String
    , subscriptionsUrl : String
    , organizationsUrl : String
    , reposUrl : String
    , eventsUrl : String
    , receivedEventsUrl : String
    , type_ : String
    , siteAdmin : Bool
    , starredAt : String
    }


decodeSimpleUser : Json.Decode.Decoder SimpleUser
decodeSimpleUser =
    Json.Decode.succeed
     (\name email login id nodeId avatarUrl gravatarId url htmlUrl followersUrl followingUrl gistsUrl starredUrl subscriptionsUrl organizationsUrl reposUrl eventsUrl receivedEventsUrl type_ siteAdmin starredAt ->
         { name = name
         , email = email
         , login = login
         , id = id
         , nodeId = nodeId
         , avatarUrl = avatarUrl
         , gravatarId = gravatarId
         , url = url
         , htmlUrl = htmlUrl
         , followersUrl = followersUrl
         , followingUrl = followingUrl
         , gistsUrl = gistsUrl
         , starredUrl = starredUrl
         , subscriptionsUrl = subscriptionsUrl
         , organizationsUrl = organizationsUrl
         , reposUrl = reposUrl
         , eventsUrl = eventsUrl
         , receivedEventsUrl = receivedEventsUrl
         , type_ = type_
         , siteAdmin = siteAdmin
         , starredAt = starredAt
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "email"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "login" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "avatar_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "gravatar_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "followers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "following_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "gists_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "starred_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscriptions_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organizations_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repos_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "received_events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "site_admin" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "starred_at" Json.Decode.string)


encodeSimpleUser : SimpleUser -> Json.Encode.Value
encodeSimpleUser rec =
    Json.Encode.object
        [ ( "name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.name
          )
        , ( "email"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.email
          )
        , ( "login", Json.Encode.string rec.login )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "avatar_url", Json.Encode.string rec.avatarUrl )
        , ( "gravatar_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.gravatarId
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "followers_url", Json.Encode.string rec.followersUrl )
        , ( "following_url", Json.Encode.string rec.followingUrl )
        , ( "gists_url", Json.Encode.string rec.gistsUrl )
        , ( "starred_url", Json.Encode.string rec.starredUrl )
        , ( "subscriptions_url", Json.Encode.string rec.subscriptionsUrl )
        , ( "organizations_url", Json.Encode.string rec.organizationsUrl )
        , ( "repos_url", Json.Encode.string rec.reposUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "received_events_url", Json.Encode.string rec.receivedEventsUrl )
        , ( "type", Json.Encode.string rec.type_ )
        , ( "site_admin", Json.Encode.bool rec.siteAdmin )
        , ( "starred_at", Json.Encode.string rec.starredAt )
        ]


type alias SimpleRepository =
    { id : Int
    , nodeId : String
    , name : String
    , fullName : String
    , owner : SimpleUser
    , private : Bool
    , htmlUrl : String
    , description : Nullable String
    , fork : Bool
    , url : String
    , archiveUrl : String
    , assigneesUrl : String
    , blobsUrl : String
    , branchesUrl : String
    , collaboratorsUrl : String
    , commentsUrl : String
    , commitsUrl : String
    , compareUrl : String
    , contentsUrl : String
    , contributorsUrl : String
    , deploymentsUrl : String
    , downloadsUrl : String
    , eventsUrl : String
    , forksUrl : String
    , gitCommitsUrl : String
    , gitRefsUrl : String
    , gitTagsUrl : String
    , issueCommentUrl : String
    , issueEventsUrl : String
    , issuesUrl : String
    , keysUrl : String
    , labelsUrl : String
    , languagesUrl : String
    , mergesUrl : String
    , milestonesUrl : String
    , notificationsUrl : String
    , pullsUrl : String
    , releasesUrl : String
    , stargazersUrl : String
    , statusesUrl : String
    , subscribersUrl : String
    , subscriptionUrl : String
    , tagsUrl : String
    , teamsUrl : String
    , treesUrl : String
    , hooksUrl : String
    }


decodeSimpleRepository : Json.Decode.Decoder SimpleRepository
decodeSimpleRepository =
    Json.Decode.succeed
     (\id nodeId name fullName owner private htmlUrl description fork url archiveUrl assigneesUrl blobsUrl branchesUrl collaboratorsUrl commentsUrl commitsUrl compareUrl contentsUrl contributorsUrl deploymentsUrl downloadsUrl eventsUrl forksUrl gitCommitsUrl gitRefsUrl gitTagsUrl issueCommentUrl issueEventsUrl issuesUrl keysUrl labelsUrl languagesUrl mergesUrl milestonesUrl notificationsUrl pullsUrl releasesUrl stargazersUrl statusesUrl subscribersUrl subscriptionUrl tagsUrl teamsUrl treesUrl hooksUrl ->
         { id = id
         , nodeId = nodeId
         , name = name
         , fullName = fullName
         , owner = owner
         , private = private
         , htmlUrl = htmlUrl
         , description = description
         , fork = fork
         , url = url
         , archiveUrl = archiveUrl
         , assigneesUrl = assigneesUrl
         , blobsUrl = blobsUrl
         , branchesUrl = branchesUrl
         , collaboratorsUrl = collaboratorsUrl
         , commentsUrl = commentsUrl
         , commitsUrl = commitsUrl
         , compareUrl = compareUrl
         , contentsUrl = contentsUrl
         , contributorsUrl = contributorsUrl
         , deploymentsUrl = deploymentsUrl
         , downloadsUrl = downloadsUrl
         , eventsUrl = eventsUrl
         , forksUrl = forksUrl
         , gitCommitsUrl = gitCommitsUrl
         , gitRefsUrl = gitRefsUrl
         , gitTagsUrl = gitTagsUrl
         , issueCommentUrl = issueCommentUrl
         , issueEventsUrl = issueEventsUrl
         , issuesUrl = issuesUrl
         , keysUrl = keysUrl
         , labelsUrl = labelsUrl
         , languagesUrl = languagesUrl
         , mergesUrl = mergesUrl
         , milestonesUrl = milestonesUrl
         , notificationsUrl = notificationsUrl
         , pullsUrl = pullsUrl
         , releasesUrl = releasesUrl
         , stargazersUrl = stargazersUrl
         , statusesUrl = statusesUrl
         , subscribersUrl = subscribersUrl
         , subscriptionUrl = subscriptionUrl
         , tagsUrl = tagsUrl
         , teamsUrl = teamsUrl
         , treesUrl = treesUrl
         , hooksUrl = hooksUrl
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "full_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "owner" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "private" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "fork" Json.Decode.bool)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archive_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assignees_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "blobs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "branches_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "collaborators_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "compare_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contents_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contributors_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deployments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "downloads_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_refs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_tags_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_comment_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issues_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "keys_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "labels_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "languages_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merges_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "milestones_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "notifications_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pulls_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "releases_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "stargazers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "statuses_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscribers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscription_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tags_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "teams_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "trees_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "hooks_url" Json.Decode.string)


encodeSimpleRepository : SimpleRepository -> Json.Encode.Value
encodeSimpleRepository rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "full_name", Json.Encode.string rec.fullName )
        , ( "owner", encodeSimpleUser rec.owner )
        , ( "private", Json.Encode.bool rec.private )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "fork", Json.Encode.bool rec.fork )
        , ( "url", Json.Encode.string rec.url )
        , ( "archive_url", Json.Encode.string rec.archiveUrl )
        , ( "assignees_url", Json.Encode.string rec.assigneesUrl )
        , ( "blobs_url", Json.Encode.string rec.blobsUrl )
        , ( "branches_url", Json.Encode.string rec.branchesUrl )
        , ( "collaborators_url", Json.Encode.string rec.collaboratorsUrl )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "commits_url", Json.Encode.string rec.commitsUrl )
        , ( "compare_url", Json.Encode.string rec.compareUrl )
        , ( "contents_url", Json.Encode.string rec.contentsUrl )
        , ( "contributors_url", Json.Encode.string rec.contributorsUrl )
        , ( "deployments_url", Json.Encode.string rec.deploymentsUrl )
        , ( "downloads_url", Json.Encode.string rec.downloadsUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "forks_url", Json.Encode.string rec.forksUrl )
        , ( "git_commits_url", Json.Encode.string rec.gitCommitsUrl )
        , ( "git_refs_url", Json.Encode.string rec.gitRefsUrl )
        , ( "git_tags_url", Json.Encode.string rec.gitTagsUrl )
        , ( "issue_comment_url", Json.Encode.string rec.issueCommentUrl )
        , ( "issue_events_url", Json.Encode.string rec.issueEventsUrl )
        , ( "issues_url", Json.Encode.string rec.issuesUrl )
        , ( "keys_url", Json.Encode.string rec.keysUrl )
        , ( "labels_url", Json.Encode.string rec.labelsUrl )
        , ( "languages_url", Json.Encode.string rec.languagesUrl )
        , ( "merges_url", Json.Encode.string rec.mergesUrl )
        , ( "milestones_url", Json.Encode.string rec.milestonesUrl )
        , ( "notifications_url", Json.Encode.string rec.notificationsUrl )
        , ( "pulls_url", Json.Encode.string rec.pullsUrl )
        , ( "releases_url", Json.Encode.string rec.releasesUrl )
        , ( "stargazers_url", Json.Encode.string rec.stargazersUrl )
        , ( "statuses_url", Json.Encode.string rec.statusesUrl )
        , ( "subscribers_url", Json.Encode.string rec.subscribersUrl )
        , ( "subscription_url", Json.Encode.string rec.subscriptionUrl )
        , ( "tags_url", Json.Encode.string rec.tagsUrl )
        , ( "teams_url", Json.Encode.string rec.teamsUrl )
        , ( "trees_url", Json.Encode.string rec.treesUrl )
        , ( "hooks_url", Json.Encode.string rec.hooksUrl )
        ]


type alias SimpleInstallation =
    { id : Int, nodeId : String }


decodeSimpleInstallation : Json.Decode.Decoder SimpleInstallation
decodeSimpleInstallation =
    Json.Decode.succeed (\id nodeId -> { id = id, nodeId = nodeId })
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)


encodeSimpleInstallation : SimpleInstallation -> Json.Encode.Value
encodeSimpleInstallation rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        ]


type alias SimpleCommitStatus =
    { description : Nullable String
    , id : Int
    , nodeId : String
    , state : String
    , context : String
    , targetUrl : Nullable String
    , required : Nullable Bool
    , avatarUrl : Nullable String
    , url : String
    , createdAt : String
    , updatedAt : String
    }


decodeSimpleCommitStatus : Json.Decode.Decoder SimpleCommitStatus
decodeSimpleCommitStatus =
    Json.Decode.succeed
     (\description id nodeId state context targetUrl required avatarUrl url createdAt updatedAt ->
         { description = description
         , id = id
         , nodeId = nodeId
         , state = state
         , context = context
         , targetUrl = targetUrl
         , required = required
         , avatarUrl = avatarUrl
         , url = url
         , createdAt = createdAt
         , updatedAt = updatedAt
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "context" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "target_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "required"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "avatar_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)


encodeSimpleCommitStatus : SimpleCommitStatus -> Json.Encode.Value
encodeSimpleCommitStatus rec =
    Json.Encode.object
        [ ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "state", Json.Encode.string rec.state )
        , ( "context", Json.Encode.string rec.context )
        , ( "target_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.targetUrl
          )
        , ( "required"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.required
          )
        , ( "avatar_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.avatarUrl
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        ]


type alias SimpleCommit =
    { id : String
    , treeId : String
    , message : String
    , timestamp : String
    , author : Nullable { name : String, email : String }
    , committer : Nullable { name : String, email : String }
    }


decodeSimpleCommit : Json.Decode.Decoder SimpleCommit
decodeSimpleCommit =
    Json.Decode.succeed
     (\id treeId message timestamp author committer ->
         { id = id
         , treeId = treeId
         , message = message
         , timestamp = timestamp
         , author = author
         , committer = committer
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tree_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "message" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "timestamp" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "author"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.succeed
                          (\name email -> { name = name, email = email })
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "name" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "email" Json.Decode.string)
                        )
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "committer"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.succeed
                          (\name email -> { name = name, email = email })
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "name" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "email" Json.Decode.string)
                        )
                    , Json.Decode.null Null
                    ]
                )
            )


encodeSimpleCommit : SimpleCommit -> Json.Encode.Value
encodeSimpleCommit rec =
    Json.Encode.object
        [ ( "id", Json.Encode.string rec.id )
        , ( "tree_id", Json.Encode.string rec.treeId )
        , ( "message", Json.Encode.string rec.message )
        , ( "timestamp", Json.Encode.string rec.timestamp )
        , ( "author"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        (\rec0 ->
                            Json.Encode.object
                                [ ( "name", Json.Encode.string rec0.name )
                                , ( "email", Json.Encode.string rec0.email )
                                ]
                        )
                            value
            )
                rec.author
          )
        , ( "committer"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        (\rec0 ->
                            Json.Encode.object
                                [ ( "name", Json.Encode.string rec0.name )
                                , ( "email", Json.Encode.string rec0.email )
                                ]
                        )
                            value
            )
                rec.committer
          )
        ]


type alias ShortBranch =
    { name : String
    , commit : { sha : String, url : String }
    , protected : Bool
    , protection : BranchProtection
    , protectionUrl : String
    }


decodeShortBranch : Json.Decode.Decoder ShortBranch
decodeShortBranch =
    Json.Decode.succeed
     (\name commit protected protection protectionUrl ->
         { name = name
         , commit = commit
         , protected = protected
         , protection = protection
         , protectionUrl = protectionUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit"
                (Json.Decode.succeed (\sha url -> { sha = sha, url = url })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "protected" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "protection" decodeBranchProtection)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "protection_url" Json.Decode.string)


encodeShortBranch : ShortBranch -> Json.Encode.Value
encodeShortBranch rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "commit"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "sha", Json.Encode.string rec0.sha )
                    , ( "url", Json.Encode.string rec0.url )
                    ]
            )
                rec.commit
          )
        , ( "protected", Json.Encode.bool rec.protected )
        , ( "protection", encodeBranchProtection rec.protection )
        , ( "protection_url", Json.Encode.string rec.protectionUrl )
        ]


type alias ShortBlob =
    { url : String, sha : String }


decodeShortBlob : Json.Decode.Decoder ShortBlob
decodeShortBlob =
    Json.Decode.succeed (\url sha -> { url = url, sha = sha })
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)


encodeShortBlob : ShortBlob -> Json.Encode.Value
encodeShortBlob rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "sha", Json.Encode.string rec.sha )
        ]


type alias ServerStatistics =
    List { serverId : String
    , collectionDate : String
    , schemaVersion : String
    , ghesVersion : String
    , hostName : String
    , githubConnect : { featuresEnabled : List String }
    , gheStats :
        { comments :
            { totalCommitComments : Int
            , totalGistComments : Int
            , totalIssueComments : Int
            , totalPullRequestComments : Int
            }
        , gists : { totalGists : Int, privateGists : Int, publicGists : Int }
        , hooks : { totalHooks : Int, activeHooks : Int, inactiveHooks : Int }
        , issues : { totalIssues : Int, openIssues : Int, closedIssues : Int }
        , milestones :
            { totalMilestones : Int
            , openMilestones : Int
            , closedMilestones : Int
            }
        , orgs :
            { totalOrgs : Int
            , disabledOrgs : Int
            , totalTeams : Int
            , totalTeamMembers : Int
            }
        , pages : { totalPages : Int }
        , pulls :
            { totalPulls : Int
            , mergedPulls : Int
            , mergeablePulls : Int
            , unmergeablePulls : Int
            }
        , repos :
            { totalRepos : Int
            , rootRepos : Int
            , forkRepos : Int
            , orgRepos : Int
            , totalPushes : Int
            , totalWikis : Int
            }
        , users : { totalUsers : Int, adminUsers : Int, suspendedUsers : Int }
        }
    , dormantUsers : { totalDormantUsers : Int, dormancyThreshold : String }
    }


decodeServerStatistics : Json.Decode.Decoder ServerStatistics
decodeServerStatistics =
    Json.Decode.list
        (Json.Decode.succeed
          (\serverId collectionDate schemaVersion ghesVersion hostName githubConnect gheStats dormantUsers ->
              { serverId = serverId
              , collectionDate = collectionDate
              , schemaVersion = schemaVersion
              , ghesVersion = ghesVersion
              , hostName = hostName
              , githubConnect = githubConnect
              , gheStats = gheStats
              , dormantUsers = dormantUsers
              }
          )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "server_id" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "collection_date" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "schema_version" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "ghes_version" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "host_name" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field
                    "github_connect"
                    (Json.Decode.succeed
                        (\featuresEnabled ->
                            { featuresEnabled = featuresEnabled }
                        )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "features_enabled"
                                (Json.Decode.list Json.Decode.string)
                            )
                    )
                )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field
                    "ghe_stats"
                    (Json.Decode.succeed
                      (\comments gists hooks issues milestones orgs pages pulls repos users ->
                          { comments = comments
                          , gists = gists
                          , hooks = hooks
                          , issues = issues
                          , milestones = milestones
                          , orgs = orgs
                          , pages = pages
                          , pulls = pulls
                          , repos = repos
                          , users = users
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "comments"
                                (Json.Decode.succeed
                                  (\totalCommitComments totalGistComments totalIssueComments totalPullRequestComments ->
                                      { totalCommitComments =
                                          totalCommitComments
                                      , totalGistComments = totalGistComments
                                      , totalIssueComments = totalIssueComments
                                      , totalPullRequestComments =
                                          totalPullRequestComments
                                      }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_commit_comments"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_gist_comments"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_issue_comments"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_pull_request_comments"
                                            Json.Decode.int
                                        )
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "gists"
                                (Json.Decode.succeed
                                  (\totalGists privateGists publicGists ->
                                      { totalGists = totalGists
                                      , privateGists = privateGists
                                      , publicGists = publicGists
                                      }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_gists"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "private_gists"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "public_gists"
                                            Json.Decode.int
                                        )
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "hooks"
                                (Json.Decode.succeed
                                  (\totalHooks activeHooks inactiveHooks ->
                                      { totalHooks = totalHooks
                                      , activeHooks = activeHooks
                                      , inactiveHooks = inactiveHooks
                                      }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_hooks"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "active_hooks"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "inactive_hooks"
                                            Json.Decode.int
                                        )
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "issues"
                                (Json.Decode.succeed
                                  (\totalIssues openIssues closedIssues ->
                                      { totalIssues = totalIssues
                                      , openIssues = openIssues
                                      , closedIssues = closedIssues
                                      }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_issues"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "open_issues"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "closed_issues"
                                            Json.Decode.int
                                        )
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "milestones"
                                (Json.Decode.succeed
                                  (\totalMilestones openMilestones closedMilestones ->
                                      { totalMilestones = totalMilestones
                                      , openMilestones = openMilestones
                                      , closedMilestones = closedMilestones
                                      }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_milestones"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "open_milestones"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "closed_milestones"
                                            Json.Decode.int
                                        )
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "orgs"
                                (Json.Decode.succeed
                                  (\totalOrgs disabledOrgs totalTeams totalTeamMembers ->
                                      { totalOrgs = totalOrgs
                                      , disabledOrgs = disabledOrgs
                                      , totalTeams = totalTeams
                                      , totalTeamMembers = totalTeamMembers
                                      }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_orgs"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "disabled_orgs"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_teams"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_team_members"
                                            Json.Decode.int
                                        )
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "pages"
                                (Json.Decode.succeed
                                    (\totalPages -> { totalPages = totalPages })
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_pages"
                                            Json.Decode.int
                                        )
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "pulls"
                                (Json.Decode.succeed
                                  (\totalPulls mergedPulls mergeablePulls unmergeablePulls ->
                                      { totalPulls = totalPulls
                                      , mergedPulls = mergedPulls
                                      , mergeablePulls = mergeablePulls
                                      , unmergeablePulls = unmergeablePulls
                                      }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_pulls"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "merged_pulls"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "mergeable_pulls"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "unmergeable_pulls"
                                            Json.Decode.int
                                        )
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "repos"
                                (Json.Decode.succeed
                                  (\totalRepos rootRepos forkRepos orgRepos totalPushes totalWikis ->
                                      { totalRepos = totalRepos
                                      , rootRepos = rootRepos
                                      , forkRepos = forkRepos
                                      , orgRepos = orgRepos
                                      , totalPushes = totalPushes
                                      , totalWikis = totalWikis
                                      }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_repos"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "root_repos"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "fork_repos"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "org_repos"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_pushes"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_wikis"
                                            Json.Decode.int
                                        )
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "users"
                                (Json.Decode.succeed
                                  (\totalUsers adminUsers suspendedUsers ->
                                      { totalUsers = totalUsers
                                      , adminUsers = adminUsers
                                      , suspendedUsers = suspendedUsers
                                      }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "total_users"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "admin_users"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "suspended_users"
                                            Json.Decode.int
                                        )
                                )
                            )
                    )
                )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field
                    "dormant_users"
                    (Json.Decode.succeed
                      (\totalDormantUsers dormancyThreshold ->
                          { totalDormantUsers = totalDormantUsers
                          , dormancyThreshold = dormancyThreshold
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "total_dormant_users"
                                Json.Decode.int
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "dormancy_threshold"
                                Json.Decode.string
                            )
                    )
                )
        )


encodeServerStatistics : ServerStatistics -> Json.Encode.Value
encodeServerStatistics =
    Json.Encode.list
        (\rec ->
            Json.Encode.object
                [ ( "server_id", Json.Encode.string rec.serverId )
                , ( "collection_date", Json.Encode.string rec.collectionDate )
                , ( "schema_version", Json.Encode.string rec.schemaVersion )
                , ( "ghes_version", Json.Encode.string rec.ghesVersion )
                , ( "host_name", Json.Encode.string rec.hostName )
                , ( "github_connect"
                  , (\rec0 ->
                        Json.Encode.object
                            [ ( "features_enabled"
                              , Json.Encode.list Json.Encode.string
                                    rec0.featuresEnabled
                              )
                            ]
                    )
                        rec.githubConnect
                  )
                , ( "ghe_stats"
                  , (\rec0 ->
                        Json.Encode.object
                            [ ( "comments"
                              , (\rec_0_1_1_1_0_7_1_0_1_0 ->
                                    Json.Encode.object
                                        [ ( "total_commit_comments"
                                          , Json.Encode.int
                                                rec_0_1_1_1_0_7_1_0_1_0.totalCommitComments
                                          )
                                        , ( "total_gist_comments"
                                          , Json.Encode.int
                                                rec_0_1_1_1_0_7_1_0_1_0.totalGistComments
                                          )
                                        , ( "total_issue_comments"
                                          , Json.Encode.int
                                                rec_0_1_1_1_0_7_1_0_1_0.totalIssueComments
                                          )
                                        , ( "total_pull_request_comments"
                                          , Json.Encode.int
                                                rec_0_1_1_1_0_7_1_0_1_0.totalPullRequestComments
                                          )
                                        ]
                                )
                                    rec0.comments
                              )
                            , ( "gists"
                              , (\rec_0_2_1_1_0_7_1_0_1_0 ->
                                    Json.Encode.object
                                        [ ( "total_gists"
                                          , Json.Encode.int
                                                rec_0_2_1_1_0_7_1_0_1_0.totalGists
                                          )
                                        , ( "private_gists"
                                          , Json.Encode.int
                                                rec_0_2_1_1_0_7_1_0_1_0.privateGists
                                          )
                                        , ( "public_gists"
                                          , Json.Encode.int
                                                rec_0_2_1_1_0_7_1_0_1_0.publicGists
                                          )
                                        ]
                                )
                                    rec0.gists
                              )
                            , ( "hooks"
                              , (\rec_0_3_1_1_0_7_1_0_1_0 ->
                                    Json.Encode.object
                                        [ ( "total_hooks"
                                          , Json.Encode.int
                                                rec_0_3_1_1_0_7_1_0_1_0.totalHooks
                                          )
                                        , ( "active_hooks"
                                          , Json.Encode.int
                                                rec_0_3_1_1_0_7_1_0_1_0.activeHooks
                                          )
                                        , ( "inactive_hooks"
                                          , Json.Encode.int
                                                rec_0_3_1_1_0_7_1_0_1_0.inactiveHooks
                                          )
                                        ]
                                )
                                    rec0.hooks
                              )
                            , ( "issues"
                              , (\rec_0_4_1_1_0_7_1_0_1_0 ->
                                    Json.Encode.object
                                        [ ( "total_issues"
                                          , Json.Encode.int
                                                rec_0_4_1_1_0_7_1_0_1_0.totalIssues
                                          )
                                        , ( "open_issues"
                                          , Json.Encode.int
                                                rec_0_4_1_1_0_7_1_0_1_0.openIssues
                                          )
                                        , ( "closed_issues"
                                          , Json.Encode.int
                                                rec_0_4_1_1_0_7_1_0_1_0.closedIssues
                                          )
                                        ]
                                )
                                    rec0.issues
                              )
                            , ( "milestones"
                              , (\rec_0_5_1_1_0_7_1_0_1_0 ->
                                    Json.Encode.object
                                        [ ( "total_milestones"
                                          , Json.Encode.int
                                                rec_0_5_1_1_0_7_1_0_1_0.totalMilestones
                                          )
                                        , ( "open_milestones"
                                          , Json.Encode.int
                                                rec_0_5_1_1_0_7_1_0_1_0.openMilestones
                                          )
                                        , ( "closed_milestones"
                                          , Json.Encode.int
                                                rec_0_5_1_1_0_7_1_0_1_0.closedMilestones
                                          )
                                        ]
                                )
                                    rec0.milestones
                              )
                            , ( "orgs"
                              , (\rec_0_6_1_1_0_7_1_0_1_0 ->
                                    Json.Encode.object
                                        [ ( "total_orgs"
                                          , Json.Encode.int
                                                rec_0_6_1_1_0_7_1_0_1_0.totalOrgs
                                          )
                                        , ( "disabled_orgs"
                                          , Json.Encode.int
                                                rec_0_6_1_1_0_7_1_0_1_0.disabledOrgs
                                          )
                                        , ( "total_teams"
                                          , Json.Encode.int
                                                rec_0_6_1_1_0_7_1_0_1_0.totalTeams
                                          )
                                        , ( "total_team_members"
                                          , Json.Encode.int
                                                rec_0_6_1_1_0_7_1_0_1_0.totalTeamMembers
                                          )
                                        ]
                                )
                                    rec0.orgs
                              )
                            , ( "pages"
                              , (\rec_0_7_1_1_0_7_1_0_1_0 ->
                                    Json.Encode.object
                                        [ ( "total_pages"
                                          , Json.Encode.int
                                                rec_0_7_1_1_0_7_1_0_1_0.totalPages
                                          )
                                        ]
                                )
                                    rec0.pages
                              )
                            , ( "pulls"
                              , (\rec_0_8_1_1_0_7_1_0_1_0 ->
                                    Json.Encode.object
                                        [ ( "total_pulls"
                                          , Json.Encode.int
                                                rec_0_8_1_1_0_7_1_0_1_0.totalPulls
                                          )
                                        , ( "merged_pulls"
                                          , Json.Encode.int
                                                rec_0_8_1_1_0_7_1_0_1_0.mergedPulls
                                          )
                                        , ( "mergeable_pulls"
                                          , Json.Encode.int
                                                rec_0_8_1_1_0_7_1_0_1_0.mergeablePulls
                                          )
                                        , ( "unmergeable_pulls"
                                          , Json.Encode.int
                                                rec_0_8_1_1_0_7_1_0_1_0.unmergeablePulls
                                          )
                                        ]
                                )
                                    rec0.pulls
                              )
                            , ( "repos"
                              , (\rec_0_9_1_1_0_7_1_0_1_0 ->
                                    Json.Encode.object
                                        [ ( "total_repos"
                                          , Json.Encode.int
                                                rec_0_9_1_1_0_7_1_0_1_0.totalRepos
                                          )
                                        , ( "root_repos"
                                          , Json.Encode.int
                                                rec_0_9_1_1_0_7_1_0_1_0.rootRepos
                                          )
                                        , ( "fork_repos"
                                          , Json.Encode.int
                                                rec_0_9_1_1_0_7_1_0_1_0.forkRepos
                                          )
                                        , ( "org_repos"
                                          , Json.Encode.int
                                                rec_0_9_1_1_0_7_1_0_1_0.orgRepos
                                          )
                                        , ( "total_pushes"
                                          , Json.Encode.int
                                                rec_0_9_1_1_0_7_1_0_1_0.totalPushes
                                          )
                                        , ( "total_wikis"
                                          , Json.Encode.int
                                                rec_0_9_1_1_0_7_1_0_1_0.totalWikis
                                          )
                                        ]
                                )
                                    rec0.repos
                              )
                            , ( "users"
                              , (\rec_0_10_1_1_0_7_1_0_1_0 ->
                                    Json.Encode.object
                                        [ ( "total_users"
                                          , Json.Encode.int
                                                rec_0_10_1_1_0_7_1_0_1_0.totalUsers
                                          )
                                        , ( "admin_users"
                                          , Json.Encode.int
                                                rec_0_10_1_1_0_7_1_0_1_0.adminUsers
                                          )
                                        , ( "suspended_users"
                                          , Json.Encode.int
                                                rec_0_10_1_1_0_7_1_0_1_0.suspendedUsers
                                          )
                                        ]
                                )
                                    rec0.users
                              )
                            ]
                    )
                        rec.gheStats
                  )
                , ( "dormant_users"
                  , (\rec0 ->
                        Json.Encode.object
                            [ ( "total_dormant_users"
                              , Json.Encode.int rec0.totalDormantUsers
                              )
                            , ( "dormancy_threshold"
                              , Json.Encode.string rec0.dormancyThreshold
                              )
                            ]
                    )
                        rec.dormantUsers
                  )
                ]
        )


type alias SelectedActionsUrl =
    String


decodeSelectedActionsUrl : Json.Decode.Decoder SelectedActionsUrl
decodeSelectedActionsUrl =
    Json.Decode.string


encodeSelectedActionsUrl : SelectedActionsUrl -> Json.Encode.Value
encodeSelectedActionsUrl =
    Json.Encode.string


type alias SelectedActions =
    { githubOwnedAllowed : Bool
    , verifiedAllowed : Bool
    , patternsAllowed : List String
    }


decodeSelectedActions : Json.Decode.Decoder SelectedActions
decodeSelectedActions =
    Json.Decode.succeed
     (\githubOwnedAllowed verifiedAllowed patternsAllowed ->
         { githubOwnedAllowed = githubOwnedAllowed
         , verifiedAllowed = verifiedAllowed
         , patternsAllowed = patternsAllowed
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "github_owned_allowed" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "verified_allowed" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "patterns_allowed"
                (Json.Decode.list Json.Decode.string)
            )


encodeSelectedActions : SelectedActions -> Json.Encode.Value
encodeSelectedActions rec =
    Json.Encode.object
        [ ( "github_owned_allowed", Json.Encode.bool rec.githubOwnedAllowed )
        , ( "verified_allowed", Json.Encode.bool rec.verifiedAllowed )
        , ( "patterns_allowed"
          , Json.Encode.list Json.Encode.string rec.patternsAllowed
          )
        ]


type alias SecurityAndAnalysis =
    Nullable { advancedSecurity : { status : String }
    , secretScanning : { status : String }
    , secretScanningPushProtection : { status : String }
    }


decodeSecurityAndAnalysis : Json.Decode.Decoder SecurityAndAnalysis
decodeSecurityAndAnalysis =
    Json.Decode.oneOf
        [ Json.Decode.map
            Present
            (Json.Decode.succeed
              (\advancedSecurity secretScanning secretScanningPushProtection ->
                  { advancedSecurity = advancedSecurity
                  , secretScanning = secretScanning
                  , secretScanningPushProtection = secretScanningPushProtection
                  }
              )
                |> Json.Decode.Extra.andMap
                    (Json.Decode.field
                        "advanced_security"
                        (Json.Decode.succeed (\status -> { status = status })
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "status" Json.Decode.string)
                        )
                    )
                |> Json.Decode.Extra.andMap
                    (Json.Decode.field
                        "secret_scanning"
                        (Json.Decode.succeed (\status -> { status = status })
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "status" Json.Decode.string)
                        )
                    )
                |> Json.Decode.Extra.andMap
                    (Json.Decode.field
                        "secret_scanning_push_protection"
                        (Json.Decode.succeed (\status -> { status = status })
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "status" Json.Decode.string)
                        )
                    )
            )
        , Json.Decode.null Null
        ]


encodeSecurityAndAnalysis : SecurityAndAnalysis -> Json.Encode.Value
encodeSecurityAndAnalysis nullableValue =
    case nullableValue of
        Null ->
            Json.Encode.null

        Present value ->
            (\rec ->
                Json.Encode.object
                    [ ( "advanced_security"
                      , (\rec0 ->
                            Json.Encode.object
                                [ ( "status", Json.Encode.string rec0.status ) ]
                        )
                            rec.advancedSecurity
                      )
                    , ( "secret_scanning"
                      , (\rec0 ->
                            Json.Encode.object
                                [ ( "status", Json.Encode.string rec0.status ) ]
                        )
                            rec.secretScanning
                      )
                    , ( "secret_scanning_push_protection"
                      , (\rec0 ->
                            Json.Encode.object
                                [ ( "status", Json.Encode.string rec0.status ) ]
                        )
                            rec.secretScanningPushProtection
                      )
                    ]
            )
                value


type alias SecretScanningLocationCommit =
    { path : String
    , startLine : Float
    , endLine : Float
    , startColumn : Float
    , endColumn : Float
    , blobSha : String
    , blobUrl : String
    , commitSha : String
    , commitUrl : String
    }


decodeSecretScanningLocationCommit :
    Json.Decode.Decoder SecretScanningLocationCommit
decodeSecretScanningLocationCommit =
    Json.Decode.succeed
     (\path startLine endLine startColumn endColumn blobSha blobUrl commitSha commitUrl ->
         { path = path
         , startLine = startLine
         , endLine = endLine
         , startColumn = startColumn
         , endColumn = endColumn
         , blobSha = blobSha
         , blobUrl = blobUrl
         , commitSha = commitSha
         , commitUrl = commitUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "start_line" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "end_line" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "start_column" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "end_column" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "blob_sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "blob_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commit_sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commit_url" Json.Decode.string)


encodeSecretScanningLocationCommit :
    SecretScanningLocationCommit -> Json.Encode.Value
encodeSecretScanningLocationCommit rec =
    Json.Encode.object
        [ ( "path", Json.Encode.string rec.path )
        , ( "start_line", Json.Encode.float rec.startLine )
        , ( "end_line", Json.Encode.float rec.endLine )
        , ( "start_column", Json.Encode.float rec.startColumn )
        , ( "end_column", Json.Encode.float rec.endColumn )
        , ( "blob_sha", Json.Encode.string rec.blobSha )
        , ( "blob_url", Json.Encode.string rec.blobUrl )
        , ( "commit_sha", Json.Encode.string rec.commitSha )
        , ( "commit_url", Json.Encode.string rec.commitUrl )
        ]


type alias SecretScanningLocation =
    { type_ : String, details : Json.Encode.Value }


decodeSecretScanningLocation : Json.Decode.Decoder SecretScanningLocation
decodeSecretScanningLocation =
    Json.Decode.succeed (\type_ details -> { type_ = type_, details = details })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "details" Json.Decode.value)


encodeSecretScanningLocation : SecretScanningLocation -> Json.Encode.Value
encodeSecretScanningLocation rec =
    Json.Encode.object
        [ ( "type", Json.Encode.string rec.type_ )
        , ( "details", Json.Decode.value rec.details )
        ]


type alias SecretScanningAlertState =
    String


decodeSecretScanningAlertState : Json.Decode.Decoder SecretScanningAlertState
decodeSecretScanningAlertState =
    Json.Decode.string


encodeSecretScanningAlertState : SecretScanningAlertState -> Json.Encode.Value
encodeSecretScanningAlertState =
    Json.Encode.string


type alias SecretScanningAlertResolutionComment =
    Nullable String


decodeSecretScanningAlertResolutionComment :
    Json.Decode.Decoder SecretScanningAlertResolutionComment
decodeSecretScanningAlertResolutionComment =
    Json.Decode.oneOf
        [ Json.Decode.map Present Json.Decode.string, Json.Decode.null Null ]


encodeSecretScanningAlertResolutionComment :
    SecretScanningAlertResolutionComment -> Json.Encode.Value
encodeSecretScanningAlertResolutionComment nullableValue =
    case nullableValue of
        Null ->
            Json.Encode.null

        Present value ->
            Json.Encode.string value


type alias SecretScanningAlertResolution =
    Nullable String


decodeSecretScanningAlertResolution :
    Json.Decode.Decoder SecretScanningAlertResolution
decodeSecretScanningAlertResolution =
    Json.Decode.oneOf
        [ Json.Decode.map Present Json.Decode.string, Json.Decode.null Null ]


encodeSecretScanningAlertResolution :
    SecretScanningAlertResolution -> Json.Encode.Value
encodeSecretScanningAlertResolution nullableValue =
    case nullableValue of
        Null ->
            Json.Encode.null

        Present value ->
            Json.Encode.string value


type alias SecretScanningAlert =
    { number : AlertNumber
    , createdAt : AlertCreatedAt
    , updatedAt : AlertUpdatedAt
    , url : AlertUrl
    , htmlUrl : AlertHtmlUrl
    , locationsUrl : String
    , state : SecretScanningAlertState
    , resolution : SecretScanningAlertResolution
    , resolvedAt : Nullable String
    , resolvedBy : Debug.Todo
    , secretType : String
    , secretTypeDisplayName : String
    , secret : String
    , pushProtectionBypassed : Nullable Bool
    , pushProtectionBypassedBy : Debug.Todo
    , pushProtectionBypassedAt : Nullable String
    , resolutionComment : Nullable String
    }


decodeSecretScanningAlert : Json.Decode.Decoder SecretScanningAlert
decodeSecretScanningAlert =
    Json.Decode.succeed
     (\number createdAt updatedAt url htmlUrl locationsUrl state resolution resolvedAt resolvedBy secretType secretTypeDisplayName secret pushProtectionBypassed pushProtectionBypassedBy pushProtectionBypassedAt resolutionComment ->
         { number = number
         , createdAt = createdAt
         , updatedAt = updatedAt
         , url = url
         , htmlUrl = htmlUrl
         , locationsUrl = locationsUrl
         , state = state
         , resolution = resolution
         , resolvedAt = resolvedAt
         , resolvedBy = resolvedBy
         , secretType = secretType
         , secretTypeDisplayName = secretTypeDisplayName
         , secret = secret
         , pushProtectionBypassed = pushProtectionBypassed
         , pushProtectionBypassedBy = pushProtectionBypassedBy
         , pushProtectionBypassedAt = pushProtectionBypassedAt
         , resolutionComment = resolutionComment
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "number" decodeAlertNumber)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" decodeAlertCreatedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" decodeAlertUpdatedAt)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" decodeAlertUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" decodeAlertHtmlUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "locations_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" decodeSecretScanningAlertState)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "resolution" decodeSecretScanningAlertResolution)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "resolved_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "resolved_by"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "secret_type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "secret_type_display_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "secret" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "push_protection_bypassed"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "push_protection_bypassed_by"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "push_protection_bypassed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "resolution_comment"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeSecretScanningAlert : SecretScanningAlert -> Json.Encode.Value
encodeSecretScanningAlert rec =
    Json.Encode.object
        [ ( "number", encodeAlertNumber rec.number )
        , ( "created_at", encodeAlertCreatedAt rec.createdAt )
        , ( "updated_at", encodeAlertUpdatedAt rec.updatedAt )
        , ( "url", encodeAlertUrl rec.url )
        , ( "html_url", encodeAlertHtmlUrl rec.htmlUrl )
        , ( "locations_url", Json.Encode.string rec.locationsUrl )
        , ( "state", encodeSecretScanningAlertState rec.state )
        , ( "resolution", encodeSecretScanningAlertResolution rec.resolution )
        , ( "resolved_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.resolvedAt
          )
        , ( "resolved_by", Debug.todo "decode anyOf" rec.resolvedBy )
        , ( "secret_type", Json.Encode.string rec.secretType )
        , ( "secret_type_display_name"
          , Json.Encode.string rec.secretTypeDisplayName
          )
        , ( "secret", Json.Encode.string rec.secret )
        , ( "push_protection_bypassed"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.pushProtectionBypassed
          )
        , ( "push_protection_bypassed_by"
          , Debug.todo "decode anyOf" rec.pushProtectionBypassedBy
          )
        , ( "push_protection_bypassed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.pushProtectionBypassedAt
          )
        , ( "resolution_comment"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.resolutionComment
          )
        ]


type alias SearchResultTextMatches =
    List { objectUrl : String
    , objectType : Nullable String
    , property : String
    , fragment : String
    , matches : List { text : String, indices : List Int }
    }


decodeSearchResultTextMatches : Json.Decode.Decoder SearchResultTextMatches
decodeSearchResultTextMatches =
    Json.Decode.list
        (Json.Decode.succeed
          (\objectUrl objectType property fragment matches ->
              { objectUrl = objectUrl
              , objectType = objectType
              , property = property
              , fragment = fragment
              , matches = matches
              }
          )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "object_url" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field
                    "object_type"
                    (Json.Decode.oneOf
                        [ Json.Decode.map Present Json.Decode.string
                        , Json.Decode.null Null
                        ]
                    )
                )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "property" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "fragment" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field
                    "matches"
                    (Json.Decode.list
                        (Json.Decode.succeed
                          (\text indices -> { text = text, indices = indices })
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "text" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "indices"
                                    (Json.Decode.list Json.Decode.int)
                                )
                        )
                    )
                )
        )


encodeSearchResultTextMatches : SearchResultTextMatches -> Json.Encode.Value
encodeSearchResultTextMatches =
    Json.Encode.list
        (\rec ->
            Json.Encode.object
                [ ( "object_url", Json.Encode.string rec.objectUrl )
                , ( "object_type"
                  , (\nullableValue ->
                        case nullableValue of
                            Null ->
                                Json.Encode.null

                            Present value ->
                                Json.Encode.string value
                    )
                        rec.objectType
                  )
                , ( "property", Json.Encode.string rec.property )
                , ( "fragment", Json.Encode.string rec.fragment )
                , ( "matches"
                  , Json.Encode.list
                        (\rec0 ->
                            Json.Encode.object
                                [ ( "text", Json.Encode.string rec0.text )
                                , ( "indices"
                                  , Json.Encode.list Json.Encode.int
                                        rec0.indices
                                  )
                                ]
                        )
                        rec.matches
                  )
                ]
        )


type alias ScopedInstallation =
    { permissions : AppPermissions
    , repositorySelection : String
    , singleFileName : Nullable String
    , hasMultipleSingleFiles : Bool
    , singleFilePaths : List String
    , repositoriesUrl : String
    , account : SimpleUser
    }


decodeScopedInstallation : Json.Decode.Decoder ScopedInstallation
decodeScopedInstallation =
    Json.Decode.succeed
     (\permissions repositorySelection singleFileName hasMultipleSingleFiles singleFilePaths repositoriesUrl account ->
         { permissions = permissions
         , repositorySelection = repositorySelection
         , singleFileName = singleFileName
         , hasMultipleSingleFiles = hasMultipleSingleFiles
         , singleFilePaths = singleFilePaths
         , repositoriesUrl = repositoriesUrl
         , account = account
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "permissions" decodeAppPermissions)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_selection" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "single_file_name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_multiple_single_files" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "single_file_paths"
                (Json.Decode.list Json.Decode.string)
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repositories_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "account" decodeSimpleUser)


encodeScopedInstallation : ScopedInstallation -> Json.Encode.Value
encodeScopedInstallation rec =
    Json.Encode.object
        [ ( "permissions", encodeAppPermissions rec.permissions )
        , ( "repository_selection", Json.Encode.string rec.repositorySelection )
        , ( "single_file_name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.singleFileName
          )
        , ( "has_multiple_single_files"
          , Json.Encode.bool rec.hasMultipleSingleFiles
          )
        , ( "single_file_paths"
          , Json.Encode.list Json.Encode.string rec.singleFilePaths
          )
        , ( "repositories_url", Json.Encode.string rec.repositoriesUrl )
        , ( "account", encodeSimpleUser rec.account )
        ]


type alias ScimError =
    { message : Nullable String
    , documentationUrl : Nullable String
    , detail : Nullable String
    , status : Int
    , scimType : Nullable String
    , schemas : List String
    }


decodeScimError : Json.Decode.Decoder ScimError
decodeScimError =
    Json.Decode.succeed
     (\message documentationUrl detail status scimType schemas ->
         { message = message
         , documentationUrl = documentationUrl
         , detail = detail
         , status = status
         , scimType = scimType
         , schemas = schemas
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "message"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "documentation_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "detail"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "status" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "scimType"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "schemas" (Json.Decode.list Json.Decode.string))


encodeScimError : ScimError -> Json.Encode.Value
encodeScimError rec =
    Json.Encode.object
        [ ( "message"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.message
          )
        , ( "documentation_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.documentationUrl
          )
        , ( "detail"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.detail
          )
        , ( "status", Json.Encode.int rec.status )
        , ( "scimType"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.scimType
          )
        , ( "schemas", Json.Encode.list Json.Encode.string rec.schemas )
        ]


type alias RunnerLabel =
    { id : Int, name : String, type_ : String }


decodeRunnerLabel : Json.Decode.Decoder RunnerLabel
decodeRunnerLabel =
    Json.Decode.succeed
     (\id name type_ -> { id = id, name = name, type_ = type_ })
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)


encodeRunnerLabel : RunnerLabel -> Json.Encode.Value
encodeRunnerLabel rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "name", Json.Encode.string rec.name )
        , ( "type", Json.Encode.string rec.type_ )
        ]


type alias RunnerGroupsOrg =
    { id : Float
    , name : String
    , visibility : String
    , default : Bool
    , selectedRepositoriesUrl : String
    , runnersUrl : String
    , inherited : Bool
    , inheritedAllowsPublicRepositories : Bool
    , allowsPublicRepositories : Bool
    , workflowRestrictionsReadOnly : Bool
    , restrictedToWorkflows : Bool
    , selectedWorkflows : List String
    }


decodeRunnerGroupsOrg : Json.Decode.Decoder RunnerGroupsOrg
decodeRunnerGroupsOrg =
    Json.Decode.succeed
     (\id name visibility default selectedRepositoriesUrl runnersUrl inherited inheritedAllowsPublicRepositories allowsPublicRepositories workflowRestrictionsReadOnly restrictedToWorkflows selectedWorkflows ->
         { id = id
         , name = name
         , visibility = visibility
         , default = default
         , selectedRepositoriesUrl = selectedRepositoriesUrl
         , runnersUrl = runnersUrl
         , inherited = inherited
         , inheritedAllowsPublicRepositories = inheritedAllowsPublicRepositories
         , allowsPublicRepositories = allowsPublicRepositories
         , workflowRestrictionsReadOnly = workflowRestrictionsReadOnly
         , restrictedToWorkflows = restrictedToWorkflows
         , selectedWorkflows = selectedWorkflows
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "visibility" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "default" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "selected_repositories_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "runners_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "inherited" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "inherited_allows_public_repositories"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allows_public_repositories" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "workflow_restrictions_read_only"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "restricted_to_workflows" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "selected_workflows"
                (Json.Decode.list Json.Decode.string)
            )


encodeRunnerGroupsOrg : RunnerGroupsOrg -> Json.Encode.Value
encodeRunnerGroupsOrg rec =
    Json.Encode.object
        [ ( "id", Json.Encode.float rec.id )
        , ( "name", Json.Encode.string rec.name )
        , ( "visibility", Json.Encode.string rec.visibility )
        , ( "default", Json.Encode.bool rec.default )
        , ( "selected_repositories_url"
          , Json.Encode.string rec.selectedRepositoriesUrl
          )
        , ( "runners_url", Json.Encode.string rec.runnersUrl )
        , ( "inherited", Json.Encode.bool rec.inherited )
        , ( "inherited_allows_public_repositories"
          , Json.Encode.bool rec.inheritedAllowsPublicRepositories
          )
        , ( "allows_public_repositories"
          , Json.Encode.bool rec.allowsPublicRepositories
          )
        , ( "workflow_restrictions_read_only"
          , Json.Encode.bool rec.workflowRestrictionsReadOnly
          )
        , ( "restricted_to_workflows"
          , Json.Encode.bool rec.restrictedToWorkflows
          )
        , ( "selected_workflows"
          , Json.Encode.list Json.Encode.string rec.selectedWorkflows
          )
        ]


type alias RunnerGroupsEnterprise =
    { id : Float
    , name : String
    , visibility : String
    , default : Bool
    , selectedOrganizationsUrl : String
    , runnersUrl : String
    , allowsPublicRepositories : Bool
    , workflowRestrictionsReadOnly : Bool
    , restrictedToWorkflows : Bool
    , selectedWorkflows : List String
    }


decodeRunnerGroupsEnterprise : Json.Decode.Decoder RunnerGroupsEnterprise
decodeRunnerGroupsEnterprise =
    Json.Decode.succeed
     (\id name visibility default selectedOrganizationsUrl runnersUrl allowsPublicRepositories workflowRestrictionsReadOnly restrictedToWorkflows selectedWorkflows ->
         { id = id
         , name = name
         , visibility = visibility
         , default = default
         , selectedOrganizationsUrl = selectedOrganizationsUrl
         , runnersUrl = runnersUrl
         , allowsPublicRepositories = allowsPublicRepositories
         , workflowRestrictionsReadOnly = workflowRestrictionsReadOnly
         , restrictedToWorkflows = restrictedToWorkflows
         , selectedWorkflows = selectedWorkflows
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "visibility" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "default" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "selected_organizations_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "runners_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allows_public_repositories" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "workflow_restrictions_read_only"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "restricted_to_workflows" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "selected_workflows"
                (Json.Decode.list Json.Decode.string)
            )


encodeRunnerGroupsEnterprise : RunnerGroupsEnterprise -> Json.Encode.Value
encodeRunnerGroupsEnterprise rec =
    Json.Encode.object
        [ ( "id", Json.Encode.float rec.id )
        , ( "name", Json.Encode.string rec.name )
        , ( "visibility", Json.Encode.string rec.visibility )
        , ( "default", Json.Encode.bool rec.default )
        , ( "selected_organizations_url"
          , Json.Encode.string rec.selectedOrganizationsUrl
          )
        , ( "runners_url", Json.Encode.string rec.runnersUrl )
        , ( "allows_public_repositories"
          , Json.Encode.bool rec.allowsPublicRepositories
          )
        , ( "workflow_restrictions_read_only"
          , Json.Encode.bool rec.workflowRestrictionsReadOnly
          )
        , ( "restricted_to_workflows"
          , Json.Encode.bool rec.restrictedToWorkflows
          )
        , ( "selected_workflows"
          , Json.Encode.list Json.Encode.string rec.selectedWorkflows
          )
        ]


type alias RunnerApplication =
    { os : String
    , architecture : String
    , downloadUrl : String
    , filename : String
    , tempDownloadToken : String
    , sha256Checksum : String
    }


decodeRunnerApplication : Json.Decode.Decoder RunnerApplication
decodeRunnerApplication =
    Json.Decode.succeed
     (\os architecture downloadUrl filename tempDownloadToken sha256Checksum ->
         { os = os
         , architecture = architecture
         , downloadUrl = downloadUrl
         , filename = filename
         , tempDownloadToken = tempDownloadToken
         , sha256Checksum = sha256Checksum
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "os" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "architecture" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "download_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "filename" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "temp_download_token" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "sha256_checksum" Json.Decode.string)


encodeRunnerApplication : RunnerApplication -> Json.Encode.Value
encodeRunnerApplication rec =
    Json.Encode.object
        [ ( "os", Json.Encode.string rec.os )
        , ( "architecture", Json.Encode.string rec.architecture )
        , ( "download_url", Json.Encode.string rec.downloadUrl )
        , ( "filename", Json.Encode.string rec.filename )
        , ( "temp_download_token", Json.Encode.string rec.tempDownloadToken )
        , ( "sha256_checksum", Json.Encode.string rec.sha256Checksum )
        ]


type alias Runner =
    { id : Int
    , name : String
    , os : String
    , status : String
    , busy : Bool
    , labels : List RunnerLabel
    }


decodeRunner : Json.Decode.Decoder Runner
decodeRunner =
    Json.Decode.succeed
     (\id name os status busy labels ->
         { id = id
         , name = name
         , os = os
         , status = status
         , busy = busy
         , labels = labels
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "os" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "busy" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "labels" (Json.Decode.list decodeRunnerLabel))


encodeRunner : Runner -> Json.Encode.Value
encodeRunner rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "name", Json.Encode.string rec.name )
        , ( "os", Json.Encode.string rec.os )
        , ( "status", Json.Encode.string rec.status )
        , ( "busy", Json.Encode.bool rec.busy )
        , ( "labels", Json.Encode.list encodeRunnerLabel rec.labels )
        ]


type alias Root =
    { currentUserUrl : String
    , currentUserAuthorizationsHtmlUrl : String
    , authorizationsUrl : String
    , codeSearchUrl : String
    , commitSearchUrl : String
    , emailsUrl : String
    , emojisUrl : String
    , eventsUrl : String
    , feedsUrl : String
    , followersUrl : String
    , followingUrl : String
    , gistsUrl : String
    , hubUrl : String
    , issueSearchUrl : String
    , issuesUrl : String
    , keysUrl : String
    , labelSearchUrl : String
    , notificationsUrl : String
    , organizationUrl : String
    , organizationRepositoriesUrl : String
    , organizationTeamsUrl : String
    , publicGistsUrl : String
    , rateLimitUrl : String
    , repositoryUrl : String
    , repositorySearchUrl : String
    , currentUserRepositoriesUrl : String
    , starredUrl : String
    , starredGistsUrl : String
    , topicSearchUrl : String
    , userUrl : String
    , userOrganizationsUrl : String
    , userRepositoriesUrl : String
    , userSearchUrl : String
    }


decodeRoot : Json.Decode.Decoder Root
decodeRoot =
    Json.Decode.succeed
     (\currentUserUrl currentUserAuthorizationsHtmlUrl authorizationsUrl codeSearchUrl commitSearchUrl emailsUrl emojisUrl eventsUrl feedsUrl followersUrl followingUrl gistsUrl hubUrl issueSearchUrl issuesUrl keysUrl labelSearchUrl notificationsUrl organizationUrl organizationRepositoriesUrl organizationTeamsUrl publicGistsUrl rateLimitUrl repositoryUrl repositorySearchUrl currentUserRepositoriesUrl starredUrl starredGistsUrl topicSearchUrl userUrl userOrganizationsUrl userRepositoriesUrl userSearchUrl ->
         { currentUserUrl = currentUserUrl
         , currentUserAuthorizationsHtmlUrl = currentUserAuthorizationsHtmlUrl
         , authorizationsUrl = authorizationsUrl
         , codeSearchUrl = codeSearchUrl
         , commitSearchUrl = commitSearchUrl
         , emailsUrl = emailsUrl
         , emojisUrl = emojisUrl
         , eventsUrl = eventsUrl
         , feedsUrl = feedsUrl
         , followersUrl = followersUrl
         , followingUrl = followingUrl
         , gistsUrl = gistsUrl
         , hubUrl = hubUrl
         , issueSearchUrl = issueSearchUrl
         , issuesUrl = issuesUrl
         , keysUrl = keysUrl
         , labelSearchUrl = labelSearchUrl
         , notificationsUrl = notificationsUrl
         , organizationUrl = organizationUrl
         , organizationRepositoriesUrl = organizationRepositoriesUrl
         , organizationTeamsUrl = organizationTeamsUrl
         , publicGistsUrl = publicGistsUrl
         , rateLimitUrl = rateLimitUrl
         , repositoryUrl = repositoryUrl
         , repositorySearchUrl = repositorySearchUrl
         , currentUserRepositoriesUrl = currentUserRepositoriesUrl
         , starredUrl = starredUrl
         , starredGistsUrl = starredGistsUrl
         , topicSearchUrl = topicSearchUrl
         , userUrl = userUrl
         , userOrganizationsUrl = userOrganizationsUrl
         , userRepositoriesUrl = userRepositoriesUrl
         , userSearchUrl = userSearchUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "current_user_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "current_user_authorizations_html_url"
                Json.Decode.string
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "authorizations_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "code_search_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commit_search_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "emails_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "emojis_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "feeds_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "followers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "following_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "gists_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "hub_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_search_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issues_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "keys_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "label_search_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "notifications_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "organization_repositories_url"
                Json.Decode.string
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_teams_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_gists_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "rate_limit_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_search_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "current_user_repositories_url"
                Json.Decode.string
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "starred_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "starred_gists_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "topic_search_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "user_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "user_organizations_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "user_repositories_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "user_search_url" Json.Decode.string)


encodeRoot : Root -> Json.Encode.Value
encodeRoot rec =
    Json.Encode.object
        [ ( "current_user_url", Json.Encode.string rec.currentUserUrl )
        , ( "current_user_authorizations_html_url"
          , Json.Encode.string rec.currentUserAuthorizationsHtmlUrl
          )
        , ( "authorizations_url", Json.Encode.string rec.authorizationsUrl )
        , ( "code_search_url", Json.Encode.string rec.codeSearchUrl )
        , ( "commit_search_url", Json.Encode.string rec.commitSearchUrl )
        , ( "emails_url", Json.Encode.string rec.emailsUrl )
        , ( "emojis_url", Json.Encode.string rec.emojisUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "feeds_url", Json.Encode.string rec.feedsUrl )
        , ( "followers_url", Json.Encode.string rec.followersUrl )
        , ( "following_url", Json.Encode.string rec.followingUrl )
        , ( "gists_url", Json.Encode.string rec.gistsUrl )
        , ( "hub_url", Json.Encode.string rec.hubUrl )
        , ( "issue_search_url", Json.Encode.string rec.issueSearchUrl )
        , ( "issues_url", Json.Encode.string rec.issuesUrl )
        , ( "keys_url", Json.Encode.string rec.keysUrl )
        , ( "label_search_url", Json.Encode.string rec.labelSearchUrl )
        , ( "notifications_url", Json.Encode.string rec.notificationsUrl )
        , ( "organization_url", Json.Encode.string rec.organizationUrl )
        , ( "organization_repositories_url"
          , Json.Encode.string rec.organizationRepositoriesUrl
          )
        , ( "organization_teams_url"
          , Json.Encode.string rec.organizationTeamsUrl
          )
        , ( "public_gists_url", Json.Encode.string rec.publicGistsUrl )
        , ( "rate_limit_url", Json.Encode.string rec.rateLimitUrl )
        , ( "repository_url", Json.Encode.string rec.repositoryUrl )
        , ( "repository_search_url"
          , Json.Encode.string rec.repositorySearchUrl
          )
        , ( "current_user_repositories_url"
          , Json.Encode.string rec.currentUserRepositoriesUrl
          )
        , ( "starred_url", Json.Encode.string rec.starredUrl )
        , ( "starred_gists_url", Json.Encode.string rec.starredGistsUrl )
        , ( "topic_search_url", Json.Encode.string rec.topicSearchUrl )
        , ( "user_url", Json.Encode.string rec.userUrl )
        , ( "user_organizations_url"
          , Json.Encode.string rec.userOrganizationsUrl
          )
        , ( "user_repositories_url"
          , Json.Encode.string rec.userRepositoriesUrl
          )
        , ( "user_search_url", Json.Encode.string rec.userSearchUrl )
        ]


type alias ReviewRequestedIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , reviewRequester : SimpleUser
    , requestedTeam : Team
    , requestedReviewer : SimpleUser
    }


decodeReviewRequestedIssueEvent : Json.Decode.Decoder ReviewRequestedIssueEvent
decodeReviewRequestedIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp reviewRequester requestedTeam requestedReviewer ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , reviewRequester = reviewRequester
         , requestedTeam = requestedTeam
         , requestedReviewer = requestedReviewer
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "review_requester" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "requested_team" decodeTeam)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "requested_reviewer" decodeSimpleUser)


encodeReviewRequestedIssueEvent : ReviewRequestedIssueEvent -> Json.Encode.Value
encodeReviewRequestedIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "review_requester", encodeSimpleUser rec.reviewRequester )
        , ( "requested_team", encodeTeam rec.requestedTeam )
        , ( "requested_reviewer", encodeSimpleUser rec.requestedReviewer )
        ]


type alias ReviewRequestRemovedIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , reviewRequester : SimpleUser
    , requestedTeam : Team
    , requestedReviewer : SimpleUser
    }


decodeReviewRequestRemovedIssueEvent :
    Json.Decode.Decoder ReviewRequestRemovedIssueEvent
decodeReviewRequestRemovedIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp reviewRequester requestedTeam requestedReviewer ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , reviewRequester = reviewRequester
         , requestedTeam = requestedTeam
         , requestedReviewer = requestedReviewer
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "review_requester" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "requested_team" decodeTeam)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "requested_reviewer" decodeSimpleUser)


encodeReviewRequestRemovedIssueEvent :
    ReviewRequestRemovedIssueEvent -> Json.Encode.Value
encodeReviewRequestRemovedIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "review_requester", encodeSimpleUser rec.reviewRequester )
        , ( "requested_team", encodeTeam rec.requestedTeam )
        , ( "requested_reviewer", encodeSimpleUser rec.requestedReviewer )
        ]


type alias ReviewDismissedIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , dismissedReview :
        { state : String
        , reviewId : Int
        , dismissalMessage : Nullable String
        , dismissalCommitId : String
        }
    }


decodeReviewDismissedIssueEvent : Json.Decode.Decoder ReviewDismissedIssueEvent
decodeReviewDismissedIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp dismissedReview ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , dismissedReview = dismissedReview
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_review"
                (Json.Decode.succeed
                  (\state reviewId dismissalMessage dismissalCommitId ->
                      { state = state
                      , reviewId = reviewId
                      , dismissalMessage = dismissalMessage
                      , dismissalCommitId = dismissalCommitId
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "state" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "review_id" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "dismissal_message"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "dismissal_commit_id"
                            Json.Decode.string
                        )
                )
            )


encodeReviewDismissedIssueEvent : ReviewDismissedIssueEvent -> Json.Encode.Value
encodeReviewDismissedIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "dismissed_review"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "state", Json.Encode.string rec0.state )
                    , ( "review_id", Json.Encode.int rec0.reviewId )
                    , ( "dismissal_message"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.dismissalMessage
                      )
                    , ( "dismissal_commit_id"
                      , Json.Encode.string rec0.dismissalCommitId
                      )
                    ]
            )
                rec.dismissedReview
          )
        ]


type alias ReviewComment =
    { url : String
    , pullRequestReviewId : Nullable Int
    , id : Int
    , nodeId : String
    , diffHunk : String
    , path : String
    , position : Nullable Int
    , originalPosition : Int
    , commitId : String
    , originalCommitId : String
    , inReplyToId : Int
    , user : Debug.Todo
    , body : String
    , createdAt : String
    , updatedAt : String
    , htmlUrl : String
    , pullRequestUrl : String
    , authorAssociation : AuthorAssociation
    , links : { self : Link, html : Link, pullRequest : Link }
    , bodyText : String
    , bodyHtml : String
    , reactions : ReactionRollup
    , side : String
    , startSide : Nullable String
    , line : Int
    , originalLine : Int
    , startLine : Nullable Int
    , originalStartLine : Nullable Int
    }


decodeReviewComment : Json.Decode.Decoder ReviewComment
decodeReviewComment =
    Json.Decode.succeed
     (\url pullRequestReviewId id nodeId diffHunk path position originalPosition commitId originalCommitId inReplyToId user body createdAt updatedAt htmlUrl pullRequestUrl authorAssociation links bodyText bodyHtml reactions side startSide line originalLine startLine originalStartLine ->
         { url = url
         , pullRequestReviewId = pullRequestReviewId
         , id = id
         , nodeId = nodeId
         , diffHunk = diffHunk
         , path = path
         , position = position
         , originalPosition = originalPosition
         , commitId = commitId
         , originalCommitId = originalCommitId
         , inReplyToId = inReplyToId
         , user = user
         , body = body
         , createdAt = createdAt
         , updatedAt = updatedAt
         , htmlUrl = htmlUrl
         , pullRequestUrl = pullRequestUrl
         , authorAssociation = authorAssociation
         , links = links
         , bodyText = bodyText
         , bodyHtml = bodyHtml
         , reactions = reactions
         , side = side
         , startSide = startSide
         , line = line
         , originalLine = originalLine
         , startLine = startLine
         , originalStartLine = originalStartLine
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pull_request_review_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "diff_hunk" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "position"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "original_position" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commit_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "original_commit_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "in_reply_to_id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pull_request_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author_association" decodeAuthorAssociation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "_links"
                (Json.Decode.succeed
                  (\self html pullRequest ->
                      { self = self, html = html, pullRequest = pullRequest }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "self" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "html" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "pull_request" decodeLink)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_text" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_html" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "reactions" decodeReactionRollup)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "side" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "start_side"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "line" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "original_line" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "start_line"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "original_start_line"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )


encodeReviewComment : ReviewComment -> Json.Encode.Value
encodeReviewComment rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "pull_request_review_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.pullRequestReviewId
          )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "diff_hunk", Json.Encode.string rec.diffHunk )
        , ( "path", Json.Encode.string rec.path )
        , ( "position"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.position
          )
        , ( "original_position", Json.Encode.int rec.originalPosition )
        , ( "commit_id", Json.Encode.string rec.commitId )
        , ( "original_commit_id", Json.Encode.string rec.originalCommitId )
        , ( "in_reply_to_id", Json.Encode.int rec.inReplyToId )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "body", Json.Encode.string rec.body )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "pull_request_url", Json.Encode.string rec.pullRequestUrl )
        , ( "author_association"
          , encodeAuthorAssociation rec.authorAssociation
          )
        , ( "_links"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "self", encodeLink rec0.self )
                    , ( "html", encodeLink rec0.html )
                    , ( "pull_request", encodeLink rec0.pullRequest )
                    ]
            )
                rec.links
          )
        , ( "body_text", Json.Encode.string rec.bodyText )
        , ( "body_html", Json.Encode.string rec.bodyHtml )
        , ( "reactions", encodeReactionRollup rec.reactions )
        , ( "side", Json.Encode.string rec.side )
        , ( "start_side"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.startSide
          )
        , ( "line", Json.Encode.int rec.line )
        , ( "original_line", Json.Encode.int rec.originalLine )
        , ( "start_line"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.startLine
          )
        , ( "original_start_line"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.originalStartLine
          )
        ]


type alias RepositorySubscription =
    { subscribed : Bool
    , ignored : Bool
    , reason : Nullable String
    , createdAt : String
    , url : String
    , repositoryUrl : String
    }


decodeRepositorySubscription : Json.Decode.Decoder RepositorySubscription
decodeRepositorySubscription =
    Json.Decode.succeed
     (\subscribed ignored reason createdAt url repositoryUrl ->
         { subscribed = subscribed
         , ignored = ignored
         , reason = reason
         , createdAt = createdAt
         , url = url
         , repositoryUrl = repositoryUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscribed" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ignored" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_url" Json.Decode.string)


encodeRepositorySubscription : RepositorySubscription -> Json.Encode.Value
encodeRepositorySubscription rec =
    Json.Encode.object
        [ ( "subscribed", Json.Encode.bool rec.subscribed )
        , ( "ignored", Json.Encode.bool rec.ignored )
        , ( "reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.reason
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "url", Json.Encode.string rec.url )
        , ( "repository_url", Json.Encode.string rec.repositoryUrl )
        ]


type alias RepositoryInvitation =
    { id : Int
    , repository : MinimalRepository
    , invitee : Debug.Todo
    , inviter : Debug.Todo
    , permissions : String
    , createdAt : String
    , expired : Bool
    , url : String
    , htmlUrl : String
    , nodeId : String
    }


decodeRepositoryInvitation : Json.Decode.Decoder RepositoryInvitation
decodeRepositoryInvitation =
    Json.Decode.succeed
     (\id repository invitee inviter permissions createdAt expired url htmlUrl nodeId ->
         { id = id
         , repository = repository
         , invitee = invitee
         , inviter = inviter
         , permissions = permissions
         , createdAt = createdAt
         , expired = expired
         , url = url
         , htmlUrl = htmlUrl
         , nodeId = nodeId
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeMinimalRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "invitee"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "inviter"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "permissions" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "expired" Json.Decode.bool)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)


encodeRepositoryInvitation : RepositoryInvitation -> Json.Encode.Value
encodeRepositoryInvitation rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "repository", encodeMinimalRepository rec.repository )
        , ( "invitee", Debug.todo "decode anyOf" rec.invitee )
        , ( "inviter", Debug.todo "decode anyOf" rec.inviter )
        , ( "permissions", Json.Encode.string rec.permissions )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "expired", Json.Encode.bool rec.expired )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "node_id", Json.Encode.string rec.nodeId )
        ]


type alias RepositoryCollaboratorPermission =
    { permission : String, roleName : String, user : Debug.Todo }


decodeRepositoryCollaboratorPermission :
    Json.Decode.Decoder RepositoryCollaboratorPermission
decodeRepositoryCollaboratorPermission =
    Json.Decode.succeed
     (\permission roleName user ->
         { permission = permission, roleName = roleName, user = user }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "permission" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "role_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeCollaborator
                    , Json.Decode.null Null
                    ]
                )
            )


encodeRepositoryCollaboratorPermission :
    RepositoryCollaboratorPermission -> Json.Encode.Value
encodeRepositoryCollaboratorPermission rec =
    Json.Encode.object
        [ ( "permission", Json.Encode.string rec.permission )
        , ( "role_name", Json.Encode.string rec.roleName )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        ]


type alias Repository =
    { id : Int
    , nodeId : String
    , name : String
    , fullName : String
    , license : Debug.Todo
    , organization : Debug.Todo
    , forks : Int
    , permissions :
        { admin : Bool
        , pull : Bool
        , triage : Bool
        , push : Bool
        , maintain : Bool
        }
    , owner : SimpleUser
    , private : Bool
    , htmlUrl : String
    , description : Nullable String
    , fork : Bool
    , url : String
    , archiveUrl : String
    , assigneesUrl : String
    , blobsUrl : String
    , branchesUrl : String
    , collaboratorsUrl : String
    , commentsUrl : String
    , commitsUrl : String
    , compareUrl : String
    , contentsUrl : String
    , contributorsUrl : String
    , deploymentsUrl : String
    , downloadsUrl : String
    , eventsUrl : String
    , forksUrl : String
    , gitCommitsUrl : String
    , gitRefsUrl : String
    , gitTagsUrl : String
    , gitUrl : String
    , issueCommentUrl : String
    , issueEventsUrl : String
    , issuesUrl : String
    , keysUrl : String
    , labelsUrl : String
    , languagesUrl : String
    , mergesUrl : String
    , milestonesUrl : String
    , notificationsUrl : String
    , pullsUrl : String
    , releasesUrl : String
    , sshUrl : String
    , stargazersUrl : String
    , statusesUrl : String
    , subscribersUrl : String
    , subscriptionUrl : String
    , tagsUrl : String
    , teamsUrl : String
    , treesUrl : String
    , cloneUrl : String
    , mirrorUrl : Nullable String
    , hooksUrl : String
    , svnUrl : String
    , homepage : Nullable String
    , language : Nullable String
    , forksCount : Int
    , stargazersCount : Int
    , watchersCount : Int
    , size : Int
    , defaultBranch : String
    , openIssuesCount : Int
    , isTemplate : Bool
    , topics : List String
    , hasIssues : Bool
    , hasProjects : Bool
    , hasWiki : Bool
    , hasPages : Bool
    , hasDownloads : Bool
    , archived : Bool
    , disabled : Bool
    , visibility : String
    , pushedAt : Nullable String
    , createdAt : Nullable String
    , updatedAt : Nullable String
    , allowRebaseMerge : Bool
    , templateRepository :
        Nullable { id : Int
        , nodeId : String
        , name : String
        , fullName : String
        , owner :
            { login : String
            , id : Int
            , nodeId : String
            , avatarUrl : String
            , gravatarId : String
            , url : String
            , htmlUrl : String
            , followersUrl : String
            , followingUrl : String
            , gistsUrl : String
            , starredUrl : String
            , subscriptionsUrl : String
            , organizationsUrl : String
            , reposUrl : String
            , eventsUrl : String
            , receivedEventsUrl : String
            , type_ : String
            , siteAdmin : Bool
            }
        , private : Bool
        , htmlUrl : String
        , description : String
        , fork : Bool
        , url : String
        , archiveUrl : String
        , assigneesUrl : String
        , blobsUrl : String
        , branchesUrl : String
        , collaboratorsUrl : String
        , commentsUrl : String
        , commitsUrl : String
        , compareUrl : String
        , contentsUrl : String
        , contributorsUrl : String
        , deploymentsUrl : String
        , downloadsUrl : String
        , eventsUrl : String
        , forksUrl : String
        , gitCommitsUrl : String
        , gitRefsUrl : String
        , gitTagsUrl : String
        , gitUrl : String
        , issueCommentUrl : String
        , issueEventsUrl : String
        , issuesUrl : String
        , keysUrl : String
        , labelsUrl : String
        , languagesUrl : String
        , mergesUrl : String
        , milestonesUrl : String
        , notificationsUrl : String
        , pullsUrl : String
        , releasesUrl : String
        , sshUrl : String
        , stargazersUrl : String
        , statusesUrl : String
        , subscribersUrl : String
        , subscriptionUrl : String
        , tagsUrl : String
        , teamsUrl : String
        , treesUrl : String
        , cloneUrl : String
        , mirrorUrl : String
        , hooksUrl : String
        , svnUrl : String
        , homepage : String
        , language : String
        , forksCount : Int
        , stargazersCount : Int
        , watchersCount : Int
        , size : Int
        , defaultBranch : String
        , openIssuesCount : Int
        , isTemplate : Bool
        , topics : List String
        , hasIssues : Bool
        , hasProjects : Bool
        , hasWiki : Bool
        , hasPages : Bool
        , hasDownloads : Bool
        , archived : Bool
        , disabled : Bool
        , visibility : String
        , pushedAt : String
        , createdAt : String
        , updatedAt : String
        , permissions :
            { admin : Bool
            , maintain : Bool
            , push : Bool
            , triage : Bool
            , pull : Bool
            }
        , allowRebaseMerge : Bool
        , tempCloneToken : String
        , allowSquashMerge : Bool
        , allowAutoMerge : Bool
        , deleteBranchOnMerge : Bool
        , allowUpdateBranch : Bool
        , useSquashPrTitleAsDefault : Bool
        , squashMergeCommitTitle : String
        , squashMergeCommitMessage : String
        , mergeCommitTitle : String
        , mergeCommitMessage : String
        , allowMergeCommit : Bool
        , subscribersCount : Int
        , networkCount : Int
        }
    , tempCloneToken : String
    , allowSquashMerge : Bool
    , allowAutoMerge : Bool
    , deleteBranchOnMerge : Bool
    , allowUpdateBranch : Bool
    , useSquashPrTitleAsDefault : Bool
    , squashMergeCommitTitle : String
    , squashMergeCommitMessage : String
    , mergeCommitTitle : String
    , mergeCommitMessage : String
    , allowMergeCommit : Bool
    , allowForking : Bool
    , webCommitSignoffRequired : Bool
    , subscribersCount : Int
    , networkCount : Int
    , openIssues : Int
    , watchers : Int
    , masterBranch : String
    , starredAt : String
    , anonymousAccessEnabled : Bool
    }


decodeRepository : Json.Decode.Decoder Repository
decodeRepository =
    Json.Decode.succeed
     (\id nodeId name fullName license organization forks permissions owner private htmlUrl description fork url archiveUrl assigneesUrl blobsUrl branchesUrl collaboratorsUrl commentsUrl commitsUrl compareUrl contentsUrl contributorsUrl deploymentsUrl downloadsUrl eventsUrl forksUrl gitCommitsUrl gitRefsUrl gitTagsUrl gitUrl issueCommentUrl issueEventsUrl issuesUrl keysUrl labelsUrl languagesUrl mergesUrl milestonesUrl notificationsUrl pullsUrl releasesUrl sshUrl stargazersUrl statusesUrl subscribersUrl subscriptionUrl tagsUrl teamsUrl treesUrl cloneUrl mirrorUrl hooksUrl svnUrl homepage language forksCount stargazersCount watchersCount size defaultBranch openIssuesCount isTemplate topics hasIssues hasProjects hasWiki hasPages hasDownloads archived disabled visibility pushedAt createdAt updatedAt allowRebaseMerge templateRepository tempCloneToken allowSquashMerge allowAutoMerge deleteBranchOnMerge allowUpdateBranch useSquashPrTitleAsDefault squashMergeCommitTitle squashMergeCommitMessage mergeCommitTitle mergeCommitMessage allowMergeCommit allowForking webCommitSignoffRequired subscribersCount networkCount openIssues watchers masterBranch starredAt anonymousAccessEnabled ->
         { id = id
         , nodeId = nodeId
         , name = name
         , fullName = fullName
         , license = license
         , organization = organization
         , forks = forks
         , permissions = permissions
         , owner = owner
         , private = private
         , htmlUrl = htmlUrl
         , description = description
         , fork = fork
         , url = url
         , archiveUrl = archiveUrl
         , assigneesUrl = assigneesUrl
         , blobsUrl = blobsUrl
         , branchesUrl = branchesUrl
         , collaboratorsUrl = collaboratorsUrl
         , commentsUrl = commentsUrl
         , commitsUrl = commitsUrl
         , compareUrl = compareUrl
         , contentsUrl = contentsUrl
         , contributorsUrl = contributorsUrl
         , deploymentsUrl = deploymentsUrl
         , downloadsUrl = downloadsUrl
         , eventsUrl = eventsUrl
         , forksUrl = forksUrl
         , gitCommitsUrl = gitCommitsUrl
         , gitRefsUrl = gitRefsUrl
         , gitTagsUrl = gitTagsUrl
         , gitUrl = gitUrl
         , issueCommentUrl = issueCommentUrl
         , issueEventsUrl = issueEventsUrl
         , issuesUrl = issuesUrl
         , keysUrl = keysUrl
         , labelsUrl = labelsUrl
         , languagesUrl = languagesUrl
         , mergesUrl = mergesUrl
         , milestonesUrl = milestonesUrl
         , notificationsUrl = notificationsUrl
         , pullsUrl = pullsUrl
         , releasesUrl = releasesUrl
         , sshUrl = sshUrl
         , stargazersUrl = stargazersUrl
         , statusesUrl = statusesUrl
         , subscribersUrl = subscribersUrl
         , subscriptionUrl = subscriptionUrl
         , tagsUrl = tagsUrl
         , teamsUrl = teamsUrl
         , treesUrl = treesUrl
         , cloneUrl = cloneUrl
         , mirrorUrl = mirrorUrl
         , hooksUrl = hooksUrl
         , svnUrl = svnUrl
         , homepage = homepage
         , language = language
         , forksCount = forksCount
         , stargazersCount = stargazersCount
         , watchersCount = watchersCount
         , size = size
         , defaultBranch = defaultBranch
         , openIssuesCount = openIssuesCount
         , isTemplate = isTemplate
         , topics = topics
         , hasIssues = hasIssues
         , hasProjects = hasProjects
         , hasWiki = hasWiki
         , hasPages = hasPages
         , hasDownloads = hasDownloads
         , archived = archived
         , disabled = disabled
         , visibility = visibility
         , pushedAt = pushedAt
         , createdAt = createdAt
         , updatedAt = updatedAt
         , allowRebaseMerge = allowRebaseMerge
         , templateRepository = templateRepository
         , tempCloneToken = tempCloneToken
         , allowSquashMerge = allowSquashMerge
         , allowAutoMerge = allowAutoMerge
         , deleteBranchOnMerge = deleteBranchOnMerge
         , allowUpdateBranch = allowUpdateBranch
         , useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
         , squashMergeCommitTitle = squashMergeCommitTitle
         , squashMergeCommitMessage = squashMergeCommitMessage
         , mergeCommitTitle = mergeCommitTitle
         , mergeCommitMessage = mergeCommitMessage
         , allowMergeCommit = allowMergeCommit
         , allowForking = allowForking
         , webCommitSignoffRequired = webCommitSignoffRequired
         , subscribersCount = subscribersCount
         , networkCount = networkCount
         , openIssues = openIssues
         , watchers = watchers
         , masterBranch = masterBranch
         , starredAt = starredAt
         , anonymousAccessEnabled = anonymousAccessEnabled
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "full_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "license"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeLicenseSimple
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "organization"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "forks" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "permissions"
                (Json.Decode.succeed
                  (\admin pull triage push maintain ->
                      { admin = admin
                      , pull = pull
                      , triage = triage
                      , push = push
                      , maintain = maintain
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "admin" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "pull" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "triage" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "push" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "maintain" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "owner" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "private" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "fork" Json.Decode.bool)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archive_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assignees_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "blobs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "branches_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "collaborators_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "compare_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contents_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contributors_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deployments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "downloads_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_refs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_tags_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_comment_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issues_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "keys_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "labels_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "languages_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merges_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "milestones_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "notifications_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pulls_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "releases_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ssh_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "stargazers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "statuses_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscribers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscription_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tags_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "teams_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "trees_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "clone_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "mirror_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "hooks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "svn_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "homepage"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "language"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "stargazers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "watchers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "size" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "default_branch" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "open_issues_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "is_template" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "topics" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_issues" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_projects" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_wiki" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_pages" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_downloads" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archived" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "disabled" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "visibility" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pushed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "created_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "updated_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_rebase_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "template_repository"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.succeed
                          (\id nodeId name fullName owner private htmlUrl description fork url archiveUrl assigneesUrl blobsUrl branchesUrl collaboratorsUrl commentsUrl commitsUrl compareUrl contentsUrl contributorsUrl deploymentsUrl downloadsUrl eventsUrl forksUrl gitCommitsUrl gitRefsUrl gitTagsUrl gitUrl issueCommentUrl issueEventsUrl issuesUrl keysUrl labelsUrl languagesUrl mergesUrl milestonesUrl notificationsUrl pullsUrl releasesUrl sshUrl stargazersUrl statusesUrl subscribersUrl subscriptionUrl tagsUrl teamsUrl treesUrl cloneUrl mirrorUrl hooksUrl svnUrl homepage language forksCount stargazersCount watchersCount size defaultBranch openIssuesCount isTemplate topics hasIssues hasProjects hasWiki hasPages hasDownloads archived disabled visibility pushedAt createdAt updatedAt permissions allowRebaseMerge tempCloneToken allowSquashMerge allowAutoMerge deleteBranchOnMerge allowUpdateBranch useSquashPrTitleAsDefault squashMergeCommitTitle squashMergeCommitMessage mergeCommitTitle mergeCommitMessage allowMergeCommit subscribersCount networkCount ->
                              { id = id
                              , nodeId = nodeId
                              , name = name
                              , fullName = fullName
                              , owner = owner
                              , private = private
                              , htmlUrl = htmlUrl
                              , description = description
                              , fork = fork
                              , url = url
                              , archiveUrl = archiveUrl
                              , assigneesUrl = assigneesUrl
                              , blobsUrl = blobsUrl
                              , branchesUrl = branchesUrl
                              , collaboratorsUrl = collaboratorsUrl
                              , commentsUrl = commentsUrl
                              , commitsUrl = commitsUrl
                              , compareUrl = compareUrl
                              , contentsUrl = contentsUrl
                              , contributorsUrl = contributorsUrl
                              , deploymentsUrl = deploymentsUrl
                              , downloadsUrl = downloadsUrl
                              , eventsUrl = eventsUrl
                              , forksUrl = forksUrl
                              , gitCommitsUrl = gitCommitsUrl
                              , gitRefsUrl = gitRefsUrl
                              , gitTagsUrl = gitTagsUrl
                              , gitUrl = gitUrl
                              , issueCommentUrl = issueCommentUrl
                              , issueEventsUrl = issueEventsUrl
                              , issuesUrl = issuesUrl
                              , keysUrl = keysUrl
                              , labelsUrl = labelsUrl
                              , languagesUrl = languagesUrl
                              , mergesUrl = mergesUrl
                              , milestonesUrl = milestonesUrl
                              , notificationsUrl = notificationsUrl
                              , pullsUrl = pullsUrl
                              , releasesUrl = releasesUrl
                              , sshUrl = sshUrl
                              , stargazersUrl = stargazersUrl
                              , statusesUrl = statusesUrl
                              , subscribersUrl = subscribersUrl
                              , subscriptionUrl = subscriptionUrl
                              , tagsUrl = tagsUrl
                              , teamsUrl = teamsUrl
                              , treesUrl = treesUrl
                              , cloneUrl = cloneUrl
                              , mirrorUrl = mirrorUrl
                              , hooksUrl = hooksUrl
                              , svnUrl = svnUrl
                              , homepage = homepage
                              , language = language
                              , forksCount = forksCount
                              , stargazersCount = stargazersCount
                              , watchersCount = watchersCount
                              , size = size
                              , defaultBranch = defaultBranch
                              , openIssuesCount = openIssuesCount
                              , isTemplate = isTemplate
                              , topics = topics
                              , hasIssues = hasIssues
                              , hasProjects = hasProjects
                              , hasWiki = hasWiki
                              , hasPages = hasPages
                              , hasDownloads = hasDownloads
                              , archived = archived
                              , disabled = disabled
                              , visibility = visibility
                              , pushedAt = pushedAt
                              , createdAt = createdAt
                              , updatedAt = updatedAt
                              , permissions = permissions
                              , allowRebaseMerge = allowRebaseMerge
                              , tempCloneToken = tempCloneToken
                              , allowSquashMerge = allowSquashMerge
                              , allowAutoMerge = allowAutoMerge
                              , deleteBranchOnMerge = deleteBranchOnMerge
                              , allowUpdateBranch = allowUpdateBranch
                              , useSquashPrTitleAsDefault =
                                  useSquashPrTitleAsDefault
                              , squashMergeCommitTitle = squashMergeCommitTitle
                              , squashMergeCommitMessage =
                                  squashMergeCommitMessage
                              , mergeCommitTitle = mergeCommitTitle
                              , mergeCommitMessage = mergeCommitMessage
                              , allowMergeCommit = allowMergeCommit
                              , subscribersCount = subscribersCount
                              , networkCount = networkCount
                              }
                          )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "id" Json.Decode.int)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "node_id" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "name" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "full_name"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "owner"
                                    (Json.Decode.succeed
                                      (\login id nodeId avatarUrl gravatarId url htmlUrl followersUrl followingUrl gistsUrl starredUrl subscriptionsUrl organizationsUrl reposUrl eventsUrl receivedEventsUrl type_ siteAdmin ->
                                          { login = login
                                          , id = id
                                          , nodeId = nodeId
                                          , avatarUrl = avatarUrl
                                          , gravatarId = gravatarId
                                          , url = url
                                          , htmlUrl = htmlUrl
                                          , followersUrl = followersUrl
                                          , followingUrl = followingUrl
                                          , gistsUrl = gistsUrl
                                          , starredUrl = starredUrl
                                          , subscriptionsUrl = subscriptionsUrl
                                          , organizationsUrl = organizationsUrl
                                          , reposUrl = reposUrl
                                          , eventsUrl = eventsUrl
                                          , receivedEventsUrl =
                                              receivedEventsUrl
                                          , type_ = type_
                                          , siteAdmin = siteAdmin
                                          }
                                      )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "login"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "id"
                                                Json.Decode.int
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "node_id"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "avatar_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "gravatar_id"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "html_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "followers_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "following_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "gists_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "starred_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "subscriptions_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "organizations_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "repos_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "events_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "received_events_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "type"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "site_admin"
                                                Json.Decode.bool
                                            )
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "private" Json.Decode.bool)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "html_url" Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "description"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "fork" Json.Decode.bool)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "url" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "archive_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "assignees_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "blobs_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "branches_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "collaborators_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "comments_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "commits_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "compare_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "contents_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "contributors_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "deployments_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "downloads_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "events_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "forks_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "git_commits_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "git_refs_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "git_tags_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "git_url" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "issue_comment_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "issue_events_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "issues_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "keys_url" Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "labels_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "languages_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "merges_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "milestones_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "notifications_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "pulls_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "releases_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "ssh_url" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "stargazers_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "statuses_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "subscribers_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "subscription_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "tags_url" Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "teams_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "trees_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "clone_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "mirror_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "hooks_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "svn_url" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "homepage" Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "language" Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "forks_count" Json.Decode.int
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "stargazers_count"
                                    Json.Decode.int
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "watchers_count"
                                    Json.Decode.int
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "size" Json.Decode.int)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "default_branch"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "open_issues_count"
                                    Json.Decode.int
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_template"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "topics"
                                    (Json.Decode.list Json.Decode.string)
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "has_issues" Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "has_projects"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "has_wiki" Json.Decode.bool)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "has_pages" Json.Decode.bool)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "has_downloads"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "archived" Json.Decode.bool)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "disabled" Json.Decode.bool)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "visibility"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "pushed_at"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "created_at"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "updated_at"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "permissions"
                                    (Json.Decode.succeed
                                      (\admin maintain push triage pull ->
                                          { admin = admin
                                          , maintain = maintain
                                          , push = push
                                          , triage = triage
                                          , pull = pull
                                          }
                                      )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "admin"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "maintain"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "push"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "triage"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "pull"
                                                Json.Decode.bool
                                            )
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "allow_rebase_merge"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "temp_clone_token"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "allow_squash_merge"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "allow_auto_merge"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "delete_branch_on_merge"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "allow_update_branch"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "use_squash_pr_title_as_default"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "squash_merge_commit_title"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "squash_merge_commit_message"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "merge_commit_title"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "merge_commit_message"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "allow_merge_commit"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "subscribers_count"
                                    Json.Decode.int
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "network_count"
                                    Json.Decode.int
                                )
                        )
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "temp_clone_token" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_squash_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_auto_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "delete_branch_on_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_update_branch" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "use_squash_pr_title_as_default" Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "squash_merge_commit_title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "squash_merge_commit_message" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merge_commit_title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merge_commit_message" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_merge_commit" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_forking" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "web_commit_signoff_required" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscribers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "network_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "open_issues" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "watchers" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "master_branch" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "starred_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "anonymous_access_enabled" Json.Decode.bool)


encodeRepository : Repository -> Json.Encode.Value
encodeRepository rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "full_name", Json.Encode.string rec.fullName )
        , ( "license", Debug.todo "decode anyOf" rec.license )
        , ( "organization", Debug.todo "decode anyOf" rec.organization )
        , ( "forks", Json.Encode.int rec.forks )
        , ( "permissions"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "admin", Json.Encode.bool rec0.admin )
                    , ( "pull", Json.Encode.bool rec0.pull )
                    , ( "triage", Json.Encode.bool rec0.triage )
                    , ( "push", Json.Encode.bool rec0.push )
                    , ( "maintain", Json.Encode.bool rec0.maintain )
                    ]
            )
                rec.permissions
          )
        , ( "owner", encodeSimpleUser rec.owner )
        , ( "private", Json.Encode.bool rec.private )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "fork", Json.Encode.bool rec.fork )
        , ( "url", Json.Encode.string rec.url )
        , ( "archive_url", Json.Encode.string rec.archiveUrl )
        , ( "assignees_url", Json.Encode.string rec.assigneesUrl )
        , ( "blobs_url", Json.Encode.string rec.blobsUrl )
        , ( "branches_url", Json.Encode.string rec.branchesUrl )
        , ( "collaborators_url", Json.Encode.string rec.collaboratorsUrl )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "commits_url", Json.Encode.string rec.commitsUrl )
        , ( "compare_url", Json.Encode.string rec.compareUrl )
        , ( "contents_url", Json.Encode.string rec.contentsUrl )
        , ( "contributors_url", Json.Encode.string rec.contributorsUrl )
        , ( "deployments_url", Json.Encode.string rec.deploymentsUrl )
        , ( "downloads_url", Json.Encode.string rec.downloadsUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "forks_url", Json.Encode.string rec.forksUrl )
        , ( "git_commits_url", Json.Encode.string rec.gitCommitsUrl )
        , ( "git_refs_url", Json.Encode.string rec.gitRefsUrl )
        , ( "git_tags_url", Json.Encode.string rec.gitTagsUrl )
        , ( "git_url", Json.Encode.string rec.gitUrl )
        , ( "issue_comment_url", Json.Encode.string rec.issueCommentUrl )
        , ( "issue_events_url", Json.Encode.string rec.issueEventsUrl )
        , ( "issues_url", Json.Encode.string rec.issuesUrl )
        , ( "keys_url", Json.Encode.string rec.keysUrl )
        , ( "labels_url", Json.Encode.string rec.labelsUrl )
        , ( "languages_url", Json.Encode.string rec.languagesUrl )
        , ( "merges_url", Json.Encode.string rec.mergesUrl )
        , ( "milestones_url", Json.Encode.string rec.milestonesUrl )
        , ( "notifications_url", Json.Encode.string rec.notificationsUrl )
        , ( "pulls_url", Json.Encode.string rec.pullsUrl )
        , ( "releases_url", Json.Encode.string rec.releasesUrl )
        , ( "ssh_url", Json.Encode.string rec.sshUrl )
        , ( "stargazers_url", Json.Encode.string rec.stargazersUrl )
        , ( "statuses_url", Json.Encode.string rec.statusesUrl )
        , ( "subscribers_url", Json.Encode.string rec.subscribersUrl )
        , ( "subscription_url", Json.Encode.string rec.subscriptionUrl )
        , ( "tags_url", Json.Encode.string rec.tagsUrl )
        , ( "teams_url", Json.Encode.string rec.teamsUrl )
        , ( "trees_url", Json.Encode.string rec.treesUrl )
        , ( "clone_url", Json.Encode.string rec.cloneUrl )
        , ( "mirror_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.mirrorUrl
          )
        , ( "hooks_url", Json.Encode.string rec.hooksUrl )
        , ( "svn_url", Json.Encode.string rec.svnUrl )
        , ( "homepage"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.homepage
          )
        , ( "language"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.language
          )
        , ( "forks_count", Json.Encode.int rec.forksCount )
        , ( "stargazers_count", Json.Encode.int rec.stargazersCount )
        , ( "watchers_count", Json.Encode.int rec.watchersCount )
        , ( "size", Json.Encode.int rec.size )
        , ( "default_branch", Json.Encode.string rec.defaultBranch )
        , ( "open_issues_count", Json.Encode.int rec.openIssuesCount )
        , ( "is_template", Json.Encode.bool rec.isTemplate )
        , ( "topics", Json.Encode.list Json.Encode.string rec.topics )
        , ( "has_issues", Json.Encode.bool rec.hasIssues )
        , ( "has_projects", Json.Encode.bool rec.hasProjects )
        , ( "has_wiki", Json.Encode.bool rec.hasWiki )
        , ( "has_pages", Json.Encode.bool rec.hasPages )
        , ( "has_downloads", Json.Encode.bool rec.hasDownloads )
        , ( "archived", Json.Encode.bool rec.archived )
        , ( "disabled", Json.Encode.bool rec.disabled )
        , ( "visibility", Json.Encode.string rec.visibility )
        , ( "pushed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.pushedAt
          )
        , ( "created_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.createdAt
          )
        , ( "updated_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.updatedAt
          )
        , ( "allow_rebase_merge", Json.Encode.bool rec.allowRebaseMerge )
        , ( "template_repository"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        (\rec0 ->
                            Json.Encode.object
                                [ ( "id", Json.Encode.int rec0.id )
                                , ( "node_id", Json.Encode.string rec0.nodeId )
                                , ( "name", Json.Encode.string rec0.name )
                                , ( "full_name"
                                  , Json.Encode.string rec0.fullName
                                  )
                                , ( "owner"
                                  , (\rec_0_5_1_1_0_0_1_0_0_78_1_0_0 ->
                                        Json.Encode.object
                                            [ ( "login"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.login
                                              )
                                            , ( "id"
                                              , Json.Encode.int
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.id
                                              )
                                            , ( "node_id"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.nodeId
                                              )
                                            , ( "avatar_url"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.avatarUrl
                                              )
                                            , ( "gravatar_id"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.gravatarId
                                              )
                                            , ( "url"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.url
                                              )
                                            , ( "html_url"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.htmlUrl
                                              )
                                            , ( "followers_url"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.followersUrl
                                              )
                                            , ( "following_url"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.followingUrl
                                              )
                                            , ( "gists_url"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.gistsUrl
                                              )
                                            , ( "starred_url"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.starredUrl
                                              )
                                            , ( "subscriptions_url"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.subscriptionsUrl
                                              )
                                            , ( "organizations_url"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.organizationsUrl
                                              )
                                            , ( "repos_url"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.reposUrl
                                              )
                                            , ( "events_url"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.eventsUrl
                                              )
                                            , ( "received_events_url"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.receivedEventsUrl
                                              )
                                            , ( "type"
                                              , Json.Encode.string
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.type_
                                              )
                                            , ( "site_admin"
                                              , Json.Encode.bool
                                                    rec_0_5_1_1_0_0_1_0_0_78_1_0_0.siteAdmin
                                              )
                                            ]
                                    )
                                        rec0.owner
                                  )
                                , ( "private", Json.Encode.bool rec0.private )
                                , ( "html_url"
                                  , Json.Encode.string rec0.htmlUrl
                                  )
                                , ( "description"
                                  , Json.Encode.string rec0.description
                                  )
                                , ( "fork", Json.Encode.bool rec0.fork )
                                , ( "url", Json.Encode.string rec0.url )
                                , ( "archive_url"
                                  , Json.Encode.string rec0.archiveUrl
                                  )
                                , ( "assignees_url"
                                  , Json.Encode.string rec0.assigneesUrl
                                  )
                                , ( "blobs_url"
                                  , Json.Encode.string rec0.blobsUrl
                                  )
                                , ( "branches_url"
                                  , Json.Encode.string rec0.branchesUrl
                                  )
                                , ( "collaborators_url"
                                  , Json.Encode.string rec0.collaboratorsUrl
                                  )
                                , ( "comments_url"
                                  , Json.Encode.string rec0.commentsUrl
                                  )
                                , ( "commits_url"
                                  , Json.Encode.string rec0.commitsUrl
                                  )
                                , ( "compare_url"
                                  , Json.Encode.string rec0.compareUrl
                                  )
                                , ( "contents_url"
                                  , Json.Encode.string rec0.contentsUrl
                                  )
                                , ( "contributors_url"
                                  , Json.Encode.string rec0.contributorsUrl
                                  )
                                , ( "deployments_url"
                                  , Json.Encode.string rec0.deploymentsUrl
                                  )
                                , ( "downloads_url"
                                  , Json.Encode.string rec0.downloadsUrl
                                  )
                                , ( "events_url"
                                  , Json.Encode.string rec0.eventsUrl
                                  )
                                , ( "forks_url"
                                  , Json.Encode.string rec0.forksUrl
                                  )
                                , ( "git_commits_url"
                                  , Json.Encode.string rec0.gitCommitsUrl
                                  )
                                , ( "git_refs_url"
                                  , Json.Encode.string rec0.gitRefsUrl
                                  )
                                , ( "git_tags_url"
                                  , Json.Encode.string rec0.gitTagsUrl
                                  )
                                , ( "git_url", Json.Encode.string rec0.gitUrl )
                                , ( "issue_comment_url"
                                  , Json.Encode.string rec0.issueCommentUrl
                                  )
                                , ( "issue_events_url"
                                  , Json.Encode.string rec0.issueEventsUrl
                                  )
                                , ( "issues_url"
                                  , Json.Encode.string rec0.issuesUrl
                                  )
                                , ( "keys_url"
                                  , Json.Encode.string rec0.keysUrl
                                  )
                                , ( "labels_url"
                                  , Json.Encode.string rec0.labelsUrl
                                  )
                                , ( "languages_url"
                                  , Json.Encode.string rec0.languagesUrl
                                  )
                                , ( "merges_url"
                                  , Json.Encode.string rec0.mergesUrl
                                  )
                                , ( "milestones_url"
                                  , Json.Encode.string rec0.milestonesUrl
                                  )
                                , ( "notifications_url"
                                  , Json.Encode.string rec0.notificationsUrl
                                  )
                                , ( "pulls_url"
                                  , Json.Encode.string rec0.pullsUrl
                                  )
                                , ( "releases_url"
                                  , Json.Encode.string rec0.releasesUrl
                                  )
                                , ( "ssh_url", Json.Encode.string rec0.sshUrl )
                                , ( "stargazers_url"
                                  , Json.Encode.string rec0.stargazersUrl
                                  )
                                , ( "statuses_url"
                                  , Json.Encode.string rec0.statusesUrl
                                  )
                                , ( "subscribers_url"
                                  , Json.Encode.string rec0.subscribersUrl
                                  )
                                , ( "subscription_url"
                                  , Json.Encode.string rec0.subscriptionUrl
                                  )
                                , ( "tags_url"
                                  , Json.Encode.string rec0.tagsUrl
                                  )
                                , ( "teams_url"
                                  , Json.Encode.string rec0.teamsUrl
                                  )
                                , ( "trees_url"
                                  , Json.Encode.string rec0.treesUrl
                                  )
                                , ( "clone_url"
                                  , Json.Encode.string rec0.cloneUrl
                                  )
                                , ( "mirror_url"
                                  , Json.Encode.string rec0.mirrorUrl
                                  )
                                , ( "hooks_url"
                                  , Json.Encode.string rec0.hooksUrl
                                  )
                                , ( "svn_url", Json.Encode.string rec0.svnUrl )
                                , ( "homepage"
                                  , Json.Encode.string rec0.homepage
                                  )
                                , ( "language"
                                  , Json.Encode.string rec0.language
                                  )
                                , ( "forks_count"
                                  , Json.Encode.int rec0.forksCount
                                  )
                                , ( "stargazers_count"
                                  , Json.Encode.int rec0.stargazersCount
                                  )
                                , ( "watchers_count"
                                  , Json.Encode.int rec0.watchersCount
                                  )
                                , ( "size", Json.Encode.int rec0.size )
                                , ( "default_branch"
                                  , Json.Encode.string rec0.defaultBranch
                                  )
                                , ( "open_issues_count"
                                  , Json.Encode.int rec0.openIssuesCount
                                  )
                                , ( "is_template"
                                  , Json.Encode.bool rec0.isTemplate
                                  )
                                , ( "topics"
                                  , Json.Encode.list Json.Encode.string
                                        rec0.topics
                                  )
                                , ( "has_issues"
                                  , Json.Encode.bool rec0.hasIssues
                                  )
                                , ( "has_projects"
                                  , Json.Encode.bool rec0.hasProjects
                                  )
                                , ( "has_wiki", Json.Encode.bool rec0.hasWiki )
                                , ( "has_pages"
                                  , Json.Encode.bool rec0.hasPages
                                  )
                                , ( "has_downloads"
                                  , Json.Encode.bool rec0.hasDownloads
                                  )
                                , ( "archived", Json.Encode.bool rec0.archived )
                                , ( "disabled", Json.Encode.bool rec0.disabled )
                                , ( "visibility"
                                  , Json.Encode.string rec0.visibility
                                  )
                                , ( "pushed_at"
                                  , Json.Encode.string rec0.pushedAt
                                  )
                                , ( "created_at"
                                  , Json.Encode.string rec0.createdAt
                                  )
                                , ( "updated_at"
                                  , Json.Encode.string rec0.updatedAt
                                  )
                                , ( "permissions"
                                  , (\rec_0_73_1_1_0_0_1_0_0_78_1_0_0 ->
                                        Json.Encode.object
                                            [ ( "admin"
                                              , Json.Encode.bool
                                                    rec_0_73_1_1_0_0_1_0_0_78_1_0_0.admin
                                              )
                                            , ( "maintain"
                                              , Json.Encode.bool
                                                    rec_0_73_1_1_0_0_1_0_0_78_1_0_0.maintain
                                              )
                                            , ( "push"
                                              , Json.Encode.bool
                                                    rec_0_73_1_1_0_0_1_0_0_78_1_0_0.push
                                              )
                                            , ( "triage"
                                              , Json.Encode.bool
                                                    rec_0_73_1_1_0_0_1_0_0_78_1_0_0.triage
                                              )
                                            , ( "pull"
                                              , Json.Encode.bool
                                                    rec_0_73_1_1_0_0_1_0_0_78_1_0_0.pull
                                              )
                                            ]
                                    )
                                        rec0.permissions
                                  )
                                , ( "allow_rebase_merge"
                                  , Json.Encode.bool rec0.allowRebaseMerge
                                  )
                                , ( "temp_clone_token"
                                  , Json.Encode.string rec0.tempCloneToken
                                  )
                                , ( "allow_squash_merge"
                                  , Json.Encode.bool rec0.allowSquashMerge
                                  )
                                , ( "allow_auto_merge"
                                  , Json.Encode.bool rec0.allowAutoMerge
                                  )
                                , ( "delete_branch_on_merge"
                                  , Json.Encode.bool rec0.deleteBranchOnMerge
                                  )
                                , ( "allow_update_branch"
                                  , Json.Encode.bool rec0.allowUpdateBranch
                                  )
                                , ( "use_squash_pr_title_as_default"
                                  , Json.Encode.bool
                                        rec0.useSquashPrTitleAsDefault
                                  )
                                , ( "squash_merge_commit_title"
                                  , Json.Encode.string
                                        rec0.squashMergeCommitTitle
                                  )
                                , ( "squash_merge_commit_message"
                                  , Json.Encode.string
                                        rec0.squashMergeCommitMessage
                                  )
                                , ( "merge_commit_title"
                                  , Json.Encode.string rec0.mergeCommitTitle
                                  )
                                , ( "merge_commit_message"
                                  , Json.Encode.string rec0.mergeCommitMessage
                                  )
                                , ( "allow_merge_commit"
                                  , Json.Encode.bool rec0.allowMergeCommit
                                  )
                                , ( "subscribers_count"
                                  , Json.Encode.int rec0.subscribersCount
                                  )
                                , ( "network_count"
                                  , Json.Encode.int rec0.networkCount
                                  )
                                ]
                        )
                            value
            )
                rec.templateRepository
          )
        , ( "temp_clone_token", Json.Encode.string rec.tempCloneToken )
        , ( "allow_squash_merge", Json.Encode.bool rec.allowSquashMerge )
        , ( "allow_auto_merge", Json.Encode.bool rec.allowAutoMerge )
        , ( "delete_branch_on_merge", Json.Encode.bool rec.deleteBranchOnMerge )
        , ( "allow_update_branch", Json.Encode.bool rec.allowUpdateBranch )
        , ( "use_squash_pr_title_as_default"
          , Json.Encode.bool rec.useSquashPrTitleAsDefault
          )
        , ( "squash_merge_commit_title"
          , Json.Encode.string rec.squashMergeCommitTitle
          )
        , ( "squash_merge_commit_message"
          , Json.Encode.string rec.squashMergeCommitMessage
          )
        , ( "merge_commit_title", Json.Encode.string rec.mergeCommitTitle )
        , ( "merge_commit_message", Json.Encode.string rec.mergeCommitMessage )
        , ( "allow_merge_commit", Json.Encode.bool rec.allowMergeCommit )
        , ( "allow_forking", Json.Encode.bool rec.allowForking )
        , ( "web_commit_signoff_required"
          , Json.Encode.bool rec.webCommitSignoffRequired
          )
        , ( "subscribers_count", Json.Encode.int rec.subscribersCount )
        , ( "network_count", Json.Encode.int rec.networkCount )
        , ( "open_issues", Json.Encode.int rec.openIssues )
        , ( "watchers", Json.Encode.int rec.watchers )
        , ( "master_branch", Json.Encode.string rec.masterBranch )
        , ( "starred_at", Json.Encode.string rec.starredAt )
        , ( "anonymous_access_enabled"
          , Json.Encode.bool rec.anonymousAccessEnabled
          )
        ]


type alias RepoSearchResultItem =
    { id : Int
    , nodeId : String
    , name : String
    , fullName : String
    , owner : Debug.Todo
    , private : Bool
    , htmlUrl : String
    , description : Nullable String
    , fork : Bool
    , url : String
    , createdAt : String
    , updatedAt : String
    , pushedAt : String
    , homepage : Nullable String
    , size : Int
    , stargazersCount : Int
    , watchersCount : Int
    , language : Nullable String
    , forksCount : Int
    , openIssuesCount : Int
    , masterBranch : String
    , defaultBranch : String
    , score : Float
    , forksUrl : String
    , keysUrl : String
    , collaboratorsUrl : String
    , teamsUrl : String
    , hooksUrl : String
    , issueEventsUrl : String
    , eventsUrl : String
    , assigneesUrl : String
    , branchesUrl : String
    , tagsUrl : String
    , blobsUrl : String
    , gitTagsUrl : String
    , gitRefsUrl : String
    , treesUrl : String
    , statusesUrl : String
    , languagesUrl : String
    , stargazersUrl : String
    , contributorsUrl : String
    , subscribersUrl : String
    , subscriptionUrl : String
    , commitsUrl : String
    , gitCommitsUrl : String
    , commentsUrl : String
    , issueCommentUrl : String
    , contentsUrl : String
    , compareUrl : String
    , mergesUrl : String
    , archiveUrl : String
    , downloadsUrl : String
    , issuesUrl : String
    , pullsUrl : String
    , milestonesUrl : String
    , notificationsUrl : String
    , labelsUrl : String
    , releasesUrl : String
    , deploymentsUrl : String
    , gitUrl : String
    , sshUrl : String
    , cloneUrl : String
    , svnUrl : String
    , forks : Int
    , openIssues : Int
    , watchers : Int
    , topics : List String
    , mirrorUrl : Nullable String
    , hasIssues : Bool
    , hasProjects : Bool
    , hasPages : Bool
    , hasWiki : Bool
    , hasDownloads : Bool
    , archived : Bool
    , disabled : Bool
    , visibility : String
    , license : Debug.Todo
    , permissions :
        { admin : Bool
        , maintain : Bool
        , push : Bool
        , triage : Bool
        , pull : Bool
        }
    , textMatches : SearchResultTextMatches
    , tempCloneToken : String
    , allowMergeCommit : Bool
    , allowSquashMerge : Bool
    , allowRebaseMerge : Bool
    , allowAutoMerge : Bool
    , deleteBranchOnMerge : Bool
    , allowForking : Bool
    , isTemplate : Bool
    , webCommitSignoffRequired : Bool
    }


decodeRepoSearchResultItem : Json.Decode.Decoder RepoSearchResultItem
decodeRepoSearchResultItem =
    Json.Decode.succeed
     (\id nodeId name fullName owner private htmlUrl description fork url createdAt updatedAt pushedAt homepage size stargazersCount watchersCount language forksCount openIssuesCount masterBranch defaultBranch score forksUrl keysUrl collaboratorsUrl teamsUrl hooksUrl issueEventsUrl eventsUrl assigneesUrl branchesUrl tagsUrl blobsUrl gitTagsUrl gitRefsUrl treesUrl statusesUrl languagesUrl stargazersUrl contributorsUrl subscribersUrl subscriptionUrl commitsUrl gitCommitsUrl commentsUrl issueCommentUrl contentsUrl compareUrl mergesUrl archiveUrl downloadsUrl issuesUrl pullsUrl milestonesUrl notificationsUrl labelsUrl releasesUrl deploymentsUrl gitUrl sshUrl cloneUrl svnUrl forks openIssues watchers topics mirrorUrl hasIssues hasProjects hasPages hasWiki hasDownloads archived disabled visibility license permissions textMatches tempCloneToken allowMergeCommit allowSquashMerge allowRebaseMerge allowAutoMerge deleteBranchOnMerge allowForking isTemplate webCommitSignoffRequired ->
         { id = id
         , nodeId = nodeId
         , name = name
         , fullName = fullName
         , owner = owner
         , private = private
         , htmlUrl = htmlUrl
         , description = description
         , fork = fork
         , url = url
         , createdAt = createdAt
         , updatedAt = updatedAt
         , pushedAt = pushedAt
         , homepage = homepage
         , size = size
         , stargazersCount = stargazersCount
         , watchersCount = watchersCount
         , language = language
         , forksCount = forksCount
         , openIssuesCount = openIssuesCount
         , masterBranch = masterBranch
         , defaultBranch = defaultBranch
         , score = score
         , forksUrl = forksUrl
         , keysUrl = keysUrl
         , collaboratorsUrl = collaboratorsUrl
         , teamsUrl = teamsUrl
         , hooksUrl = hooksUrl
         , issueEventsUrl = issueEventsUrl
         , eventsUrl = eventsUrl
         , assigneesUrl = assigneesUrl
         , branchesUrl = branchesUrl
         , tagsUrl = tagsUrl
         , blobsUrl = blobsUrl
         , gitTagsUrl = gitTagsUrl
         , gitRefsUrl = gitRefsUrl
         , treesUrl = treesUrl
         , statusesUrl = statusesUrl
         , languagesUrl = languagesUrl
         , stargazersUrl = stargazersUrl
         , contributorsUrl = contributorsUrl
         , subscribersUrl = subscribersUrl
         , subscriptionUrl = subscriptionUrl
         , commitsUrl = commitsUrl
         , gitCommitsUrl = gitCommitsUrl
         , commentsUrl = commentsUrl
         , issueCommentUrl = issueCommentUrl
         , contentsUrl = contentsUrl
         , compareUrl = compareUrl
         , mergesUrl = mergesUrl
         , archiveUrl = archiveUrl
         , downloadsUrl = downloadsUrl
         , issuesUrl = issuesUrl
         , pullsUrl = pullsUrl
         , milestonesUrl = milestonesUrl
         , notificationsUrl = notificationsUrl
         , labelsUrl = labelsUrl
         , releasesUrl = releasesUrl
         , deploymentsUrl = deploymentsUrl
         , gitUrl = gitUrl
         , sshUrl = sshUrl
         , cloneUrl = cloneUrl
         , svnUrl = svnUrl
         , forks = forks
         , openIssues = openIssues
         , watchers = watchers
         , topics = topics
         , mirrorUrl = mirrorUrl
         , hasIssues = hasIssues
         , hasProjects = hasProjects
         , hasPages = hasPages
         , hasWiki = hasWiki
         , hasDownloads = hasDownloads
         , archived = archived
         , disabled = disabled
         , visibility = visibility
         , license = license
         , permissions = permissions
         , textMatches = textMatches
         , tempCloneToken = tempCloneToken
         , allowMergeCommit = allowMergeCommit
         , allowSquashMerge = allowSquashMerge
         , allowRebaseMerge = allowRebaseMerge
         , allowAutoMerge = allowAutoMerge
         , deleteBranchOnMerge = deleteBranchOnMerge
         , allowForking = allowForking
         , isTemplate = isTemplate
         , webCommitSignoffRequired = webCommitSignoffRequired
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "full_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "owner"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "private" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "fork" Json.Decode.bool)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pushed_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "homepage"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "size" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "stargazers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "watchers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "language"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "open_issues_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "master_branch" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "default_branch" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "score" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "keys_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "collaborators_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "teams_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "hooks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assignees_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "branches_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tags_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "blobs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_tags_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_refs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "trees_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "statuses_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "languages_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "stargazers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contributors_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscribers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscription_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_comment_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contents_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "compare_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merges_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archive_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "downloads_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issues_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pulls_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "milestones_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "notifications_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "labels_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "releases_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deployments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ssh_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "clone_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "svn_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "forks" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "open_issues" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "watchers" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "topics" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "mirror_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_issues" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_projects" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_pages" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_wiki" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_downloads" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archived" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "disabled" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "visibility" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "license"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeLicenseSimple
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "permissions"
                (Json.Decode.succeed
                  (\admin maintain push triage pull ->
                      { admin = admin
                      , maintain = maintain
                      , push = push
                      , triage = triage
                      , pull = pull
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "admin" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "maintain" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "push" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "triage" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "pull" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "text_matches" decodeSearchResultTextMatches)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "temp_clone_token" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_merge_commit" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_squash_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_rebase_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_auto_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "delete_branch_on_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_forking" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "is_template" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "web_commit_signoff_required" Json.Decode.bool)


encodeRepoSearchResultItem : RepoSearchResultItem -> Json.Encode.Value
encodeRepoSearchResultItem rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "full_name", Json.Encode.string rec.fullName )
        , ( "owner", Debug.todo "decode anyOf" rec.owner )
        , ( "private", Json.Encode.bool rec.private )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "fork", Json.Encode.bool rec.fork )
        , ( "url", Json.Encode.string rec.url )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "pushed_at", Json.Encode.string rec.pushedAt )
        , ( "homepage"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.homepage
          )
        , ( "size", Json.Encode.int rec.size )
        , ( "stargazers_count", Json.Encode.int rec.stargazersCount )
        , ( "watchers_count", Json.Encode.int rec.watchersCount )
        , ( "language"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.language
          )
        , ( "forks_count", Json.Encode.int rec.forksCount )
        , ( "open_issues_count", Json.Encode.int rec.openIssuesCount )
        , ( "master_branch", Json.Encode.string rec.masterBranch )
        , ( "default_branch", Json.Encode.string rec.defaultBranch )
        , ( "score", Json.Encode.float rec.score )
        , ( "forks_url", Json.Encode.string rec.forksUrl )
        , ( "keys_url", Json.Encode.string rec.keysUrl )
        , ( "collaborators_url", Json.Encode.string rec.collaboratorsUrl )
        , ( "teams_url", Json.Encode.string rec.teamsUrl )
        , ( "hooks_url", Json.Encode.string rec.hooksUrl )
        , ( "issue_events_url", Json.Encode.string rec.issueEventsUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "assignees_url", Json.Encode.string rec.assigneesUrl )
        , ( "branches_url", Json.Encode.string rec.branchesUrl )
        , ( "tags_url", Json.Encode.string rec.tagsUrl )
        , ( "blobs_url", Json.Encode.string rec.blobsUrl )
        , ( "git_tags_url", Json.Encode.string rec.gitTagsUrl )
        , ( "git_refs_url", Json.Encode.string rec.gitRefsUrl )
        , ( "trees_url", Json.Encode.string rec.treesUrl )
        , ( "statuses_url", Json.Encode.string rec.statusesUrl )
        , ( "languages_url", Json.Encode.string rec.languagesUrl )
        , ( "stargazers_url", Json.Encode.string rec.stargazersUrl )
        , ( "contributors_url", Json.Encode.string rec.contributorsUrl )
        , ( "subscribers_url", Json.Encode.string rec.subscribersUrl )
        , ( "subscription_url", Json.Encode.string rec.subscriptionUrl )
        , ( "commits_url", Json.Encode.string rec.commitsUrl )
        , ( "git_commits_url", Json.Encode.string rec.gitCommitsUrl )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "issue_comment_url", Json.Encode.string rec.issueCommentUrl )
        , ( "contents_url", Json.Encode.string rec.contentsUrl )
        , ( "compare_url", Json.Encode.string rec.compareUrl )
        , ( "merges_url", Json.Encode.string rec.mergesUrl )
        , ( "archive_url", Json.Encode.string rec.archiveUrl )
        , ( "downloads_url", Json.Encode.string rec.downloadsUrl )
        , ( "issues_url", Json.Encode.string rec.issuesUrl )
        , ( "pulls_url", Json.Encode.string rec.pullsUrl )
        , ( "milestones_url", Json.Encode.string rec.milestonesUrl )
        , ( "notifications_url", Json.Encode.string rec.notificationsUrl )
        , ( "labels_url", Json.Encode.string rec.labelsUrl )
        , ( "releases_url", Json.Encode.string rec.releasesUrl )
        , ( "deployments_url", Json.Encode.string rec.deploymentsUrl )
        , ( "git_url", Json.Encode.string rec.gitUrl )
        , ( "ssh_url", Json.Encode.string rec.sshUrl )
        , ( "clone_url", Json.Encode.string rec.cloneUrl )
        , ( "svn_url", Json.Encode.string rec.svnUrl )
        , ( "forks", Json.Encode.int rec.forks )
        , ( "open_issues", Json.Encode.int rec.openIssues )
        , ( "watchers", Json.Encode.int rec.watchers )
        , ( "topics", Json.Encode.list Json.Encode.string rec.topics )
        , ( "mirror_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.mirrorUrl
          )
        , ( "has_issues", Json.Encode.bool rec.hasIssues )
        , ( "has_projects", Json.Encode.bool rec.hasProjects )
        , ( "has_pages", Json.Encode.bool rec.hasPages )
        , ( "has_wiki", Json.Encode.bool rec.hasWiki )
        , ( "has_downloads", Json.Encode.bool rec.hasDownloads )
        , ( "archived", Json.Encode.bool rec.archived )
        , ( "disabled", Json.Encode.bool rec.disabled )
        , ( "visibility", Json.Encode.string rec.visibility )
        , ( "license", Debug.todo "decode anyOf" rec.license )
        , ( "permissions"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "admin", Json.Encode.bool rec0.admin )
                    , ( "maintain", Json.Encode.bool rec0.maintain )
                    , ( "push", Json.Encode.bool rec0.push )
                    , ( "triage", Json.Encode.bool rec0.triage )
                    , ( "pull", Json.Encode.bool rec0.pull )
                    ]
            )
                rec.permissions
          )
        , ( "text_matches", encodeSearchResultTextMatches rec.textMatches )
        , ( "temp_clone_token", Json.Encode.string rec.tempCloneToken )
        , ( "allow_merge_commit", Json.Encode.bool rec.allowMergeCommit )
        , ( "allow_squash_merge", Json.Encode.bool rec.allowSquashMerge )
        , ( "allow_rebase_merge", Json.Encode.bool rec.allowRebaseMerge )
        , ( "allow_auto_merge", Json.Encode.bool rec.allowAutoMerge )
        , ( "delete_branch_on_merge", Json.Encode.bool rec.deleteBranchOnMerge )
        , ( "allow_forking", Json.Encode.bool rec.allowForking )
        , ( "is_template", Json.Encode.bool rec.isTemplate )
        , ( "web_commit_signoff_required"
          , Json.Encode.bool rec.webCommitSignoffRequired
          )
        ]


type alias RepoCodespacesSecret =
    { name : String, createdAt : String, updatedAt : String }


decodeRepoCodespacesSecret : Json.Decode.Decoder RepoCodespacesSecret
decodeRepoCodespacesSecret =
    Json.Decode.succeed
     (\name createdAt updatedAt ->
         { name = name, createdAt = createdAt, updatedAt = updatedAt }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)


encodeRepoCodespacesSecret : RepoCodespacesSecret -> Json.Encode.Value
encodeRepoCodespacesSecret rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        ]


type alias RenamedIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , rename : { from : String, to : String }
    }


decodeRenamedIssueEvent : Json.Decode.Decoder RenamedIssueEvent
decodeRenamedIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp rename ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , rename = rename
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "rename"
                (Json.Decode.succeed (\from to -> { from = from, to = to })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "from" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "to" Json.Decode.string)
                )
            )


encodeRenamedIssueEvent : RenamedIssueEvent -> Json.Encode.Value
encodeRenamedIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "rename"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "from", Json.Encode.string rec0.from )
                    , ( "to", Json.Encode.string rec0.to )
                    ]
            )
                rec.rename
          )
        ]


type alias RemovedFromProjectIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , projectCard :
        { id : Int
        , url : String
        , projectId : Int
        , projectUrl : String
        , columnName : String
        , previousColumnName : String
        }
    }


decodeRemovedFromProjectIssueEvent :
    Json.Decode.Decoder RemovedFromProjectIssueEvent
decodeRemovedFromProjectIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp projectCard ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , projectCard = projectCard
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "project_card"
                (Json.Decode.succeed
                  (\id url projectId projectUrl columnName previousColumnName ->
                      { id = id
                      , url = url
                      , projectId = projectId
                      , projectUrl = projectUrl
                      , columnName = columnName
                      , previousColumnName = previousColumnName
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "id" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "project_id" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "project_url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "column_name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "previous_column_name"
                            Json.Decode.string
                        )
                )
            )


encodeRemovedFromProjectIssueEvent :
    RemovedFromProjectIssueEvent -> Json.Encode.Value
encodeRemovedFromProjectIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "project_card"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "id", Json.Encode.int rec0.id )
                    , ( "url", Json.Encode.string rec0.url )
                    , ( "project_id", Json.Encode.int rec0.projectId )
                    , ( "project_url", Json.Encode.string rec0.projectUrl )
                    , ( "column_name", Json.Encode.string rec0.columnName )
                    , ( "previous_column_name"
                      , Json.Encode.string rec0.previousColumnName
                      )
                    ]
            )
                rec.projectCard
          )
        ]


type alias ReleaseNotesContent =
    { name : String, body : String }


decodeReleaseNotesContent : Json.Decode.Decoder ReleaseNotesContent
decodeReleaseNotesContent =
    Json.Decode.succeed (\name body -> { name = name, body = body })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body" Json.Decode.string)


encodeReleaseNotesContent : ReleaseNotesContent -> Json.Encode.Value
encodeReleaseNotesContent rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "body", Json.Encode.string rec.body )
        ]


type alias ReleaseAsset =
    { url : String
    , browserDownloadUrl : String
    , id : Int
    , nodeId : String
    , name : String
    , label : Nullable String
    , state : String
    , contentType : String
    , size : Int
    , downloadCount : Int
    , createdAt : String
    , updatedAt : String
    , uploader : Debug.Todo
    }


decodeReleaseAsset : Json.Decode.Decoder ReleaseAsset
decodeReleaseAsset =
    Json.Decode.succeed
     (\url browserDownloadUrl id nodeId name label state contentType size downloadCount createdAt updatedAt uploader ->
         { url = url
         , browserDownloadUrl = browserDownloadUrl
         , id = id
         , nodeId = nodeId
         , name = name
         , label = label
         , state = state
         , contentType = contentType
         , size = size
         , downloadCount = downloadCount
         , createdAt = createdAt
         , updatedAt = updatedAt
         , uploader = uploader
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "browser_download_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "label"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "content_type" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "size" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "download_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "uploader"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )


encodeReleaseAsset : ReleaseAsset -> Json.Encode.Value
encodeReleaseAsset rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "browser_download_url", Json.Encode.string rec.browserDownloadUrl )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "label"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.label
          )
        , ( "state", Json.Encode.string rec.state )
        , ( "content_type", Json.Encode.string rec.contentType )
        , ( "size", Json.Encode.int rec.size )
        , ( "download_count", Json.Encode.int rec.downloadCount )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "uploader", Debug.todo "decode anyOf" rec.uploader )
        ]


type alias Release =
    { url : String
    , htmlUrl : String
    , assetsUrl : String
    , uploadUrl : String
    , tarballUrl : Nullable String
    , zipballUrl : Nullable String
    , id : Int
    , nodeId : String
    , tagName : String
    , targetCommitish : String
    , name : Nullable String
    , body : Nullable String
    , draft : Bool
    , prerelease : Bool
    , createdAt : String
    , publishedAt : Nullable String
    , author : SimpleUser
    , assets : List ReleaseAsset
    , bodyHtml : String
    , bodyText : String
    , mentionsCount : Int
    , discussionUrl : String
    , reactions : ReactionRollup
    }


decodeRelease : Json.Decode.Decoder Release
decodeRelease =
    Json.Decode.succeed
     (\url htmlUrl assetsUrl uploadUrl tarballUrl zipballUrl id nodeId tagName targetCommitish name body draft prerelease createdAt publishedAt author assets bodyHtml bodyText mentionsCount discussionUrl reactions ->
         { url = url
         , htmlUrl = htmlUrl
         , assetsUrl = assetsUrl
         , uploadUrl = uploadUrl
         , tarballUrl = tarballUrl
         , zipballUrl = zipballUrl
         , id = id
         , nodeId = nodeId
         , tagName = tagName
         , targetCommitish = targetCommitish
         , name = name
         , body = body
         , draft = draft
         , prerelease = prerelease
         , createdAt = createdAt
         , publishedAt = publishedAt
         , author = author
         , assets = assets
         , bodyHtml = bodyHtml
         , bodyText = bodyText
         , mentionsCount = mentionsCount
         , discussionUrl = discussionUrl
         , reactions = reactions
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assets_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "upload_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "tarball_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "zipball_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tag_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "target_commitish" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "body"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "draft" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "prerelease" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "published_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assets" (Json.Decode.list decodeReleaseAsset))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_html" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_text" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "mentions_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "discussion_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "reactions" decodeReactionRollup)


encodeRelease : Release -> Json.Encode.Value
encodeRelease rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "assets_url", Json.Encode.string rec.assetsUrl )
        , ( "upload_url", Json.Encode.string rec.uploadUrl )
        , ( "tarball_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.tarballUrl
          )
        , ( "zipball_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.zipballUrl
          )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "tag_name", Json.Encode.string rec.tagName )
        , ( "target_commitish", Json.Encode.string rec.targetCommitish )
        , ( "name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.name
          )
        , ( "body"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.body
          )
        , ( "draft", Json.Encode.bool rec.draft )
        , ( "prerelease", Json.Encode.bool rec.prerelease )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "published_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.publishedAt
          )
        , ( "author", encodeSimpleUser rec.author )
        , ( "assets", Json.Encode.list encodeReleaseAsset rec.assets )
        , ( "body_html", Json.Encode.string rec.bodyHtml )
        , ( "body_text", Json.Encode.string rec.bodyText )
        , ( "mentions_count", Json.Encode.int rec.mentionsCount )
        , ( "discussion_url", Json.Encode.string rec.discussionUrl )
        , ( "reactions", encodeReactionRollup rec.reactions )
        ]


type alias ReferrerTraffic =
    { referrer : String, count : Int, uniques : Int }


decodeReferrerTraffic : Json.Decode.Decoder ReferrerTraffic
decodeReferrerTraffic =
    Json.Decode.succeed
     (\referrer count uniques ->
         { referrer = referrer, count = count, uniques = uniques }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "referrer" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "uniques" Json.Decode.int)


encodeReferrerTraffic : ReferrerTraffic -> Json.Encode.Value
encodeReferrerTraffic rec =
    Json.Encode.object
        [ ( "referrer", Json.Encode.string rec.referrer )
        , ( "count", Json.Encode.int rec.count )
        , ( "uniques", Json.Encode.int rec.uniques )
        ]


type alias ReferencedWorkflow =
    { path : String, sha : String, ref : String }


decodeReferencedWorkflow : Json.Decode.Decoder ReferencedWorkflow
decodeReferencedWorkflow =
    Json.Decode.succeed (\path sha ref -> { path = path, sha = sha, ref = ref })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "ref" Json.Decode.string)


encodeReferencedWorkflow : ReferencedWorkflow -> Json.Encode.Value
encodeReferencedWorkflow rec =
    Json.Encode.object
        [ ( "path", Json.Encode.string rec.path )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "ref", Json.Encode.string rec.ref )
        ]


type alias ReactionRollup =
    { url : String
    , totalCount : Int
    , +1 : Int
    , 1 : Int
    , laugh : Int
    , confused : Int
    , heart : Int
    , hooray : Int
    , eyes : Int
    , rocket : Int
    }


decodeReactionRollup : Json.Decode.Decoder ReactionRollup
decodeReactionRollup =
    Json.Decode.succeed
     (\url totalCount +1 1 laugh confused heart hooray eyes rocket ->
         { url = url
         , totalCount = totalCount
         , +1 = +1
         , 1 = 1
         , laugh = laugh
         , confused = confused
         , heart = heart
         , hooray = hooray
         , eyes = eyes
         , rocket = rocket
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "total_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "+1" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "-1" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "laugh" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "confused" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "heart" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "hooray" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "eyes" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "rocket" Json.Decode.int)


encodeReactionRollup : ReactionRollup -> Json.Encode.Value
encodeReactionRollup rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "total_count", Json.Encode.int rec.totalCount )
        , ( "+1", Json.Encode.int rec.+1 )
        , ( "-1", Json.Encode.int rec.1 )
        , ( "laugh", Json.Encode.int rec.laugh )
        , ( "confused", Json.Encode.int rec.confused )
        , ( "heart", Json.Encode.int rec.heart )
        , ( "hooray", Json.Encode.int rec.hooray )
        , ( "eyes", Json.Encode.int rec.eyes )
        , ( "rocket", Json.Encode.int rec.rocket )
        ]


type alias Reaction =
    { id : Int
    , nodeId : String
    , user : Debug.Todo
    , content : String
    , createdAt : String
    }


decodeReaction : Json.Decode.Decoder Reaction
decodeReaction =
    Json.Decode.succeed
     (\id nodeId user content createdAt ->
         { id = id
         , nodeId = nodeId
         , user = user
         , content = content
         , createdAt = createdAt
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "content" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)


encodeReaction : Reaction -> Json.Encode.Value
encodeReaction rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "content", Json.Encode.string rec.content )
        , ( "created_at", Json.Encode.string rec.createdAt )
        ]


type alias RateLimitOverview =
    { resources :
        { core : RateLimit
        , graphql : RateLimit
        , search : RateLimit
        , sourceImport : RateLimit
        , integrationManifest : RateLimit
        , codeScanningUpload : RateLimit
        , actionsRunnerRegistration : RateLimit
        , scim : RateLimit
        , dependencySnapshots : RateLimit
        }
    , rate : RateLimit
    }


decodeRateLimitOverview : Json.Decode.Decoder RateLimitOverview
decodeRateLimitOverview =
    Json.Decode.succeed
     (\resources rate -> { resources = resources, rate = rate })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "resources"
                (Json.Decode.succeed
                  (\core graphql search sourceImport integrationManifest codeScanningUpload actionsRunnerRegistration scim dependencySnapshots ->
                      { core = core
                      , graphql = graphql
                      , search = search
                      , sourceImport = sourceImport
                      , integrationManifest = integrationManifest
                      , codeScanningUpload = codeScanningUpload
                      , actionsRunnerRegistration = actionsRunnerRegistration
                      , scim = scim
                      , dependencySnapshots = dependencySnapshots
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "core" decodeRateLimit)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "graphql" decodeRateLimit)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "search" decodeRateLimit)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "source_import" decodeRateLimit)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "integration_manifest"
                            decodeRateLimit
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "code_scanning_upload"
                            decodeRateLimit
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "actions_runner_registration"
                            decodeRateLimit
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "scim" decodeRateLimit)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "dependency_snapshots"
                            decodeRateLimit
                        )
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "rate" decodeRateLimit)


encodeRateLimitOverview : RateLimitOverview -> Json.Encode.Value
encodeRateLimitOverview rec =
    Json.Encode.object
        [ ( "resources"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "core", encodeRateLimit rec0.core )
                    , ( "graphql", encodeRateLimit rec0.graphql )
                    , ( "search", encodeRateLimit rec0.search )
                    , ( "source_import", encodeRateLimit rec0.sourceImport )
                    , ( "integration_manifest"
                      , encodeRateLimit rec0.integrationManifest
                      )
                    , ( "code_scanning_upload"
                      , encodeRateLimit rec0.codeScanningUpload
                      )
                    , ( "actions_runner_registration"
                      , encodeRateLimit rec0.actionsRunnerRegistration
                      )
                    , ( "scim", encodeRateLimit rec0.scim )
                    , ( "dependency_snapshots"
                      , encodeRateLimit rec0.dependencySnapshots
                      )
                    ]
            )
                rec.resources
          )
        , ( "rate", encodeRateLimit rec.rate )
        ]


type alias RateLimit =
    { limit : Int, remaining : Int, reset : Int, used : Int }


decodeRateLimit : Json.Decode.Decoder RateLimit
decodeRateLimit =
    Json.Decode.succeed
     (\limit remaining reset used ->
         { limit = limit, remaining = remaining, reset = reset, used = used }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "limit" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "remaining" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "reset" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "used" Json.Decode.int)


encodeRateLimit : RateLimit -> Json.Encode.Value
encodeRateLimit rec =
    Json.Encode.object
        [ ( "limit", Json.Encode.int rec.limit )
        , ( "remaining", Json.Encode.int rec.remaining )
        , ( "reset", Json.Encode.int rec.reset )
        , ( "used", Json.Encode.int rec.used )
        ]


type alias PullRequestSimple =
    { url : String
    , id : Int
    , nodeId : String
    , htmlUrl : String
    , diffUrl : String
    , patchUrl : String
    , issueUrl : String
    , commitsUrl : String
    , reviewCommentsUrl : String
    , reviewCommentUrl : String
    , commentsUrl : String
    , statusesUrl : String
    , number : Int
    , state : String
    , locked : Bool
    , title : String
    , user : Debug.Todo
    , body : Nullable String
    , labels :
        List { id : Int
        , nodeId : String
        , url : String
        , name : String
        , description : String
        , color : String
        , default : Bool
        }
    , milestone : Debug.Todo
    , activeLockReason : Nullable String
    , createdAt : String
    , updatedAt : String
    , closedAt : Nullable String
    , mergedAt : Nullable String
    , mergeCommitSha : Nullable String
    , assignee : Debug.Todo
    , assignees : Nullable (List SimpleUser)
    , requestedReviewers : Nullable (List SimpleUser)
    , requestedTeams : Nullable (List Team)
    , head :
        { label : String
        , ref : String
        , repo : Repository
        , sha : String
        , user : Debug.Todo
        }
    , base :
        { label : String
        , ref : String
        , repo : Repository
        , sha : String
        , user : Debug.Todo
        }
    , links :
        { comments : Link
        , commits : Link
        , statuses : Link
        , html : Link
        , issue : Link
        , reviewComments : Link
        , reviewComment : Link
        , self : Link
        }
    , authorAssociation : AuthorAssociation
    , autoMerge : AutoMerge
    , draft : Bool
    }


decodePullRequestSimple : Json.Decode.Decoder PullRequestSimple
decodePullRequestSimple =
    Json.Decode.succeed
     (\url id nodeId htmlUrl diffUrl patchUrl issueUrl commitsUrl reviewCommentsUrl reviewCommentUrl commentsUrl statusesUrl number state locked title user body labels milestone activeLockReason createdAt updatedAt closedAt mergedAt mergeCommitSha assignee assignees requestedReviewers requestedTeams head base links authorAssociation autoMerge draft ->
         { url = url
         , id = id
         , nodeId = nodeId
         , htmlUrl = htmlUrl
         , diffUrl = diffUrl
         , patchUrl = patchUrl
         , issueUrl = issueUrl
         , commitsUrl = commitsUrl
         , reviewCommentsUrl = reviewCommentsUrl
         , reviewCommentUrl = reviewCommentUrl
         , commentsUrl = commentsUrl
         , statusesUrl = statusesUrl
         , number = number
         , state = state
         , locked = locked
         , title = title
         , user = user
         , body = body
         , labels = labels
         , milestone = milestone
         , activeLockReason = activeLockReason
         , createdAt = createdAt
         , updatedAt = updatedAt
         , closedAt = closedAt
         , mergedAt = mergedAt
         , mergeCommitSha = mergeCommitSha
         , assignee = assignee
         , assignees = assignees
         , requestedReviewers = requestedReviewers
         , requestedTeams = requestedTeams
         , head = head
         , base = base
         , links = links
         , authorAssociation = authorAssociation
         , autoMerge = autoMerge
         , draft = draft
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "diff_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "patch_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "review_comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "review_comment_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "statuses_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "number" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "locked" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "body"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "labels"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\id nodeId url name description color default ->
                          { id = id
                          , nodeId = nodeId
                          , url = url
                          , name = name
                          , description = description
                          , color = color
                          , default = default
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "id" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "node_id" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "name" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "description" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "color" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "default" Json.Decode.bool)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "milestone"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeMilestone
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "active_lock_reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "closed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "merged_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "merge_commit_sha"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "assignee"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "assignees"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list decodeSimpleUser)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "requested_reviewers"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list decodeSimpleUser)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "requested_teams"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present (Json.Decode.list decodeTeam)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "head"
                (Json.Decode.succeed
                  (\label ref repo sha user ->
                      { label = label
                      , ref = ref
                      , repo = repo
                      , sha = sha
                      , user = user
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "label" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "ref" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "repo" decodeRepository)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "user"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present decodeSimpleUser
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "base"
                (Json.Decode.succeed
                  (\label ref repo sha user ->
                      { label = label
                      , ref = ref
                      , repo = repo
                      , sha = sha
                      , user = user
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "label" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "ref" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "repo" decodeRepository)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "user"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present decodeSimpleUser
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "_links"
                (Json.Decode.succeed
                  (\comments commits statuses html issue reviewComments reviewComment self ->
                      { comments = comments
                      , commits = commits
                      , statuses = statuses
                      , html = html
                      , issue = issue
                      , reviewComments = reviewComments
                      , reviewComment = reviewComment
                      , self = self
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "comments" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "commits" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "statuses" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "html" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "issue" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "review_comments" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "review_comment" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "self" decodeLink)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author_association" decodeAuthorAssociation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "auto_merge" decodeAutoMerge)
        |> Json.Decode.Extra.andMap (Json.Decode.field "draft" Json.Decode.bool)


encodePullRequestSimple : PullRequestSimple -> Json.Encode.Value
encodePullRequestSimple rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "diff_url", Json.Encode.string rec.diffUrl )
        , ( "patch_url", Json.Encode.string rec.patchUrl )
        , ( "issue_url", Json.Encode.string rec.issueUrl )
        , ( "commits_url", Json.Encode.string rec.commitsUrl )
        , ( "review_comments_url", Json.Encode.string rec.reviewCommentsUrl )
        , ( "review_comment_url", Json.Encode.string rec.reviewCommentUrl )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "statuses_url", Json.Encode.string rec.statusesUrl )
        , ( "number", Json.Encode.int rec.number )
        , ( "state", Json.Encode.string rec.state )
        , ( "locked", Json.Encode.bool rec.locked )
        , ( "title", Json.Encode.string rec.title )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "body"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.body
          )
        , ( "labels"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "id", Json.Encode.int rec0.id )
                        , ( "node_id", Json.Encode.string rec0.nodeId )
                        , ( "url", Json.Encode.string rec0.url )
                        , ( "name", Json.Encode.string rec0.name )
                        , ( "description", Json.Encode.string rec0.description )
                        , ( "color", Json.Encode.string rec0.color )
                        , ( "default", Json.Encode.bool rec0.default )
                        ]
                )
                rec.labels
          )
        , ( "milestone", Debug.todo "decode anyOf" rec.milestone )
        , ( "active_lock_reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.activeLockReason
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "closed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.closedAt
          )
        , ( "merged_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.mergedAt
          )
        , ( "merge_commit_sha"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.mergeCommitSha
          )
        , ( "assignee", Debug.todo "decode anyOf" rec.assignee )
        , ( "assignees"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list encodeSimpleUser value
            )
                rec.assignees
          )
        , ( "requested_reviewers"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list encodeSimpleUser value
            )
                rec.requestedReviewers
          )
        , ( "requested_teams"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list encodeTeam value
            )
                rec.requestedTeams
          )
        , ( "head"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "label", Json.Encode.string rec0.label )
                    , ( "ref", Json.Encode.string rec0.ref )
                    , ( "repo", encodeRepository rec0.repo )
                    , ( "sha", Json.Encode.string rec0.sha )
                    , ( "user", Debug.todo "decode anyOf" rec0.user )
                    ]
            )
                rec.head
          )
        , ( "base"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "label", Json.Encode.string rec0.label )
                    , ( "ref", Json.Encode.string rec0.ref )
                    , ( "repo", encodeRepository rec0.repo )
                    , ( "sha", Json.Encode.string rec0.sha )
                    , ( "user", Debug.todo "decode anyOf" rec0.user )
                    ]
            )
                rec.base
          )
        , ( "_links"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "comments", encodeLink rec0.comments )
                    , ( "commits", encodeLink rec0.commits )
                    , ( "statuses", encodeLink rec0.statuses )
                    , ( "html", encodeLink rec0.html )
                    , ( "issue", encodeLink rec0.issue )
                    , ( "review_comments", encodeLink rec0.reviewComments )
                    , ( "review_comment", encodeLink rec0.reviewComment )
                    , ( "self", encodeLink rec0.self )
                    ]
            )
                rec.links
          )
        , ( "author_association"
          , encodeAuthorAssociation rec.authorAssociation
          )
        , ( "auto_merge", encodeAutoMerge rec.autoMerge )
        , ( "draft", Json.Encode.bool rec.draft )
        ]


type alias PullRequestReviewRequest =
    { users : List SimpleUser, teams : List Team }


decodePullRequestReviewRequest : Json.Decode.Decoder PullRequestReviewRequest
decodePullRequestReviewRequest =
    Json.Decode.succeed (\users teams -> { users = users, teams = teams })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "users" (Json.Decode.list decodeSimpleUser))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "teams" (Json.Decode.list decodeTeam))


encodePullRequestReviewRequest : PullRequestReviewRequest -> Json.Encode.Value
encodePullRequestReviewRequest rec =
    Json.Encode.object
        [ ( "users", Json.Encode.list encodeSimpleUser rec.users )
        , ( "teams", Json.Encode.list encodeTeam rec.teams )
        ]


type alias PullRequestReviewComment =
    { url : String
    , pullRequestReviewId : Nullable Int
    , id : Int
    , nodeId : String
    , diffHunk : String
    , path : String
    , position : Int
    , originalPosition : Int
    , commitId : String
    , originalCommitId : String
    , inReplyToId : Int
    , user : SimpleUser
    , body : String
    , createdAt : String
    , updatedAt : String
    , htmlUrl : String
    , pullRequestUrl : String
    , authorAssociation : AuthorAssociation
    , links :
        { self : { href : String }
        , html : { href : String }
        , pullRequest : { href : String }
        }
    , startLine : Nullable Int
    , originalStartLine : Nullable Int
    , startSide : Nullable String
    , line : Int
    , originalLine : Int
    , side : String
    , reactions : ReactionRollup
    , bodyHtml : String
    , bodyText : String
    }


decodePullRequestReviewComment : Json.Decode.Decoder PullRequestReviewComment
decodePullRequestReviewComment =
    Json.Decode.succeed
     (\url pullRequestReviewId id nodeId diffHunk path position originalPosition commitId originalCommitId inReplyToId user body createdAt updatedAt htmlUrl pullRequestUrl authorAssociation links startLine originalStartLine startSide line originalLine side reactions bodyHtml bodyText ->
         { url = url
         , pullRequestReviewId = pullRequestReviewId
         , id = id
         , nodeId = nodeId
         , diffHunk = diffHunk
         , path = path
         , position = position
         , originalPosition = originalPosition
         , commitId = commitId
         , originalCommitId = originalCommitId
         , inReplyToId = inReplyToId
         , user = user
         , body = body
         , createdAt = createdAt
         , updatedAt = updatedAt
         , htmlUrl = htmlUrl
         , pullRequestUrl = pullRequestUrl
         , authorAssociation = authorAssociation
         , links = links
         , startLine = startLine
         , originalStartLine = originalStartLine
         , startSide = startSide
         , line = line
         , originalLine = originalLine
         , side = side
         , reactions = reactions
         , bodyHtml = bodyHtml
         , bodyText = bodyText
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pull_request_review_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "diff_hunk" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "position" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "original_position" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commit_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "original_commit_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "in_reply_to_id" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "user" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pull_request_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author_association" decodeAuthorAssociation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "_links"
                (Json.Decode.succeed
                  (\self html pullRequest ->
                      { self = self, html = html, pullRequest = pullRequest }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "self"
                            (Json.Decode.succeed (\href -> { href = href })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "href" Json.Decode.string
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "html"
                            (Json.Decode.succeed (\href -> { href = href })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "href" Json.Decode.string
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "pull_request"
                            (Json.Decode.succeed (\href -> { href = href })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "href" Json.Decode.string
                                    )
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "start_line"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "original_start_line"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "start_side"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "line" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "original_line" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "side" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "reactions" decodeReactionRollup)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_html" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_text" Json.Decode.string)


encodePullRequestReviewComment : PullRequestReviewComment -> Json.Encode.Value
encodePullRequestReviewComment rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "pull_request_review_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.pullRequestReviewId
          )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "diff_hunk", Json.Encode.string rec.diffHunk )
        , ( "path", Json.Encode.string rec.path )
        , ( "position", Json.Encode.int rec.position )
        , ( "original_position", Json.Encode.int rec.originalPosition )
        , ( "commit_id", Json.Encode.string rec.commitId )
        , ( "original_commit_id", Json.Encode.string rec.originalCommitId )
        , ( "in_reply_to_id", Json.Encode.int rec.inReplyToId )
        , ( "user", encodeSimpleUser rec.user )
        , ( "body", Json.Encode.string rec.body )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "pull_request_url", Json.Encode.string rec.pullRequestUrl )
        , ( "author_association"
          , encodeAuthorAssociation rec.authorAssociation
          )
        , ( "_links"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "self"
                      , (\rec_0_1_1_1_0_19_1_0_0 ->
                            Json.Encode.object
                                [ ( "href"
                                  , Json.Encode.string
                                        rec_0_1_1_1_0_19_1_0_0.href
                                  )
                                ]
                        )
                            rec0.self
                      )
                    , ( "html"
                      , (\rec_0_2_1_1_0_19_1_0_0 ->
                            Json.Encode.object
                                [ ( "href"
                                  , Json.Encode.string
                                        rec_0_2_1_1_0_19_1_0_0.href
                                  )
                                ]
                        )
                            rec0.html
                      )
                    , ( "pull_request"
                      , (\rec_0_3_1_1_0_19_1_0_0 ->
                            Json.Encode.object
                                [ ( "href"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_19_1_0_0.href
                                  )
                                ]
                        )
                            rec0.pullRequest
                      )
                    ]
            )
                rec.links
          )
        , ( "start_line"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.startLine
          )
        , ( "original_start_line"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.originalStartLine
          )
        , ( "start_side"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.startSide
          )
        , ( "line", Json.Encode.int rec.line )
        , ( "original_line", Json.Encode.int rec.originalLine )
        , ( "side", Json.Encode.string rec.side )
        , ( "reactions", encodeReactionRollup rec.reactions )
        , ( "body_html", Json.Encode.string rec.bodyHtml )
        , ( "body_text", Json.Encode.string rec.bodyText )
        ]


type alias PullRequestReview =
    { id : Int
    , nodeId : String
    , user : Debug.Todo
    , body : String
    , state : String
    , htmlUrl : String
    , pullRequestUrl : String
    , links : { html : { href : String }, pullRequest : { href : String } }
    , submittedAt : String
    , commitId : String
    , bodyHtml : String
    , bodyText : String
    , authorAssociation : AuthorAssociation
    }


decodePullRequestReview : Json.Decode.Decoder PullRequestReview
decodePullRequestReview =
    Json.Decode.succeed
     (\id nodeId user body state htmlUrl pullRequestUrl links submittedAt commitId bodyHtml bodyText authorAssociation ->
         { id = id
         , nodeId = nodeId
         , user = user
         , body = body
         , state = state
         , htmlUrl = htmlUrl
         , pullRequestUrl = pullRequestUrl
         , links = links
         , submittedAt = submittedAt
         , commitId = commitId
         , bodyHtml = bodyHtml
         , bodyText = bodyText
         , authorAssociation = authorAssociation
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pull_request_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "_links"
                (Json.Decode.succeed
                  (\html pullRequest ->
                      { html = html, pullRequest = pullRequest }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "html"
                            (Json.Decode.succeed (\href -> { href = href })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "href" Json.Decode.string
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "pull_request"
                            (Json.Decode.succeed (\href -> { href = href })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "href" Json.Decode.string
                                    )
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "submitted_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commit_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_html" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_text" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author_association" decodeAuthorAssociation)


encodePullRequestReview : PullRequestReview -> Json.Encode.Value
encodePullRequestReview rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "body", Json.Encode.string rec.body )
        , ( "state", Json.Encode.string rec.state )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "pull_request_url", Json.Encode.string rec.pullRequestUrl )
        , ( "_links"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "html"
                      , (\rec_0_1_1_1_0_8_1_0_0 ->
                            Json.Encode.object
                                [ ( "href"
                                  , Json.Encode.string
                                        rec_0_1_1_1_0_8_1_0_0.href
                                  )
                                ]
                        )
                            rec0.html
                      )
                    , ( "pull_request"
                      , (\rec_0_2_1_1_0_8_1_0_0 ->
                            Json.Encode.object
                                [ ( "href"
                                  , Json.Encode.string
                                        rec_0_2_1_1_0_8_1_0_0.href
                                  )
                                ]
                        )
                            rec0.pullRequest
                      )
                    ]
            )
                rec.links
          )
        , ( "submitted_at", Json.Encode.string rec.submittedAt )
        , ( "commit_id", Json.Encode.string rec.commitId )
        , ( "body_html", Json.Encode.string rec.bodyHtml )
        , ( "body_text", Json.Encode.string rec.bodyText )
        , ( "author_association"
          , encodeAuthorAssociation rec.authorAssociation
          )
        ]


type alias PullRequestMinimal =
    { id : Int
    , number : Int
    , url : String
    , head :
        { ref : String
        , sha : String
        , repo : { id : Int, url : String, name : String }
        }
    , base :
        { ref : String
        , sha : String
        , repo : { id : Int, url : String, name : String }
        }
    }


decodePullRequestMinimal : Json.Decode.Decoder PullRequestMinimal
decodePullRequestMinimal =
    Json.Decode.succeed
     (\id number url head base ->
         { id = id, number = number, url = url, head = head, base = base }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "number" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "head"
                (Json.Decode.succeed
                  (\ref sha repo -> { ref = ref, sha = sha, repo = repo })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "ref" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "repo"
                            (Json.Decode.succeed
                              (\id url name ->
                                  { id = id, url = url, name = name }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "id" Json.Decode.int)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "url" Json.Decode.string)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "name" Json.Decode.string
                                    )
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "base"
                (Json.Decode.succeed
                  (\ref sha repo -> { ref = ref, sha = sha, repo = repo })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "ref" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "repo"
                            (Json.Decode.succeed
                              (\id url name ->
                                  { id = id, url = url, name = name }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "id" Json.Decode.int)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "url" Json.Decode.string)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "name" Json.Decode.string
                                    )
                            )
                        )
                )
            )


encodePullRequestMinimal : PullRequestMinimal -> Json.Encode.Value
encodePullRequestMinimal rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "number", Json.Encode.int rec.number )
        , ( "url", Json.Encode.string rec.url )
        , ( "head"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "ref", Json.Encode.string rec0.ref )
                    , ( "sha", Json.Encode.string rec0.sha )
                    , ( "repo"
                      , (\rec_0_3_1_1_0_4_1_0_0 ->
                            Json.Encode.object
                                [ ( "id"
                                  , Json.Encode.int rec_0_3_1_1_0_4_1_0_0.id
                                  )
                                , ( "url"
                                  , Json.Encode.string rec_0_3_1_1_0_4_1_0_0.url
                                  )
                                , ( "name"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_4_1_0_0.name
                                  )
                                ]
                        )
                            rec0.repo
                      )
                    ]
            )
                rec.head
          )
        , ( "base"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "ref", Json.Encode.string rec0.ref )
                    , ( "sha", Json.Encode.string rec0.sha )
                    , ( "repo"
                      , (\rec_0_3_1_1_0_5_1_0_0 ->
                            Json.Encode.object
                                [ ( "id"
                                  , Json.Encode.int rec_0_3_1_1_0_5_1_0_0.id
                                  )
                                , ( "url"
                                  , Json.Encode.string rec_0_3_1_1_0_5_1_0_0.url
                                  )
                                , ( "name"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_5_1_0_0.name
                                  )
                                ]
                        )
                            rec0.repo
                      )
                    ]
            )
                rec.base
          )
        ]


type alias PullRequestMergeResult =
    { sha : String, merged : Bool, message : String }


decodePullRequestMergeResult : Json.Decode.Decoder PullRequestMergeResult
decodePullRequestMergeResult =
    Json.Decode.succeed
     (\sha merged message -> { sha = sha, merged = merged, message = message })
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merged" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "message" Json.Decode.string)


encodePullRequestMergeResult : PullRequestMergeResult -> Json.Encode.Value
encodePullRequestMergeResult rec =
    Json.Encode.object
        [ ( "sha", Json.Encode.string rec.sha )
        , ( "merged", Json.Encode.bool rec.merged )
        , ( "message", Json.Encode.string rec.message )
        ]


type alias PullRequest =
    { url : String
    , id : Int
    , nodeId : String
    , htmlUrl : String
    , diffUrl : String
    , patchUrl : String
    , issueUrl : String
    , commitsUrl : String
    , reviewCommentsUrl : String
    , reviewCommentUrl : String
    , commentsUrl : String
    , statusesUrl : String
    , number : Int
    , state : String
    , locked : Bool
    , title : String
    , user : Debug.Todo
    , body : Nullable String
    , labels :
        List { id : Int
        , nodeId : String
        , url : String
        , name : String
        , description : Nullable String
        , color : String
        , default : Bool
        }
    , milestone : Debug.Todo
    , activeLockReason : Nullable String
    , createdAt : String
    , updatedAt : String
    , closedAt : Nullable String
    , mergedAt : Nullable String
    , mergeCommitSha : Nullable String
    , assignee : Debug.Todo
    , assignees : Nullable (List SimpleUser)
    , requestedReviewers : Nullable (List SimpleUser)
    , requestedTeams : Nullable (List TeamSimple)
    , head :
        { label : String
        , ref : String
        , repo :
            Nullable { archiveUrl : String
            , assigneesUrl : String
            , blobsUrl : String
            , branchesUrl : String
            , collaboratorsUrl : String
            , commentsUrl : String
            , commitsUrl : String
            , compareUrl : String
            , contentsUrl : String
            , contributorsUrl : String
            , deploymentsUrl : String
            , description : Nullable String
            , downloadsUrl : String
            , eventsUrl : String
            , fork : Bool
            , forksUrl : String
            , fullName : String
            , gitCommitsUrl : String
            , gitRefsUrl : String
            , gitTagsUrl : String
            , hooksUrl : String
            , htmlUrl : String
            , id : Int
            , nodeId : String
            , issueCommentUrl : String
            , issueEventsUrl : String
            , issuesUrl : String
            , keysUrl : String
            , labelsUrl : String
            , languagesUrl : String
            , mergesUrl : String
            , milestonesUrl : String
            , name : String
            , notificationsUrl : String
            , owner :
                { avatarUrl : String
                , eventsUrl : String
                , followersUrl : String
                , followingUrl : String
                , gistsUrl : String
                , gravatarId : Nullable String
                , htmlUrl : String
                , id : Int
                , nodeId : String
                , login : String
                , organizationsUrl : String
                , receivedEventsUrl : String
                , reposUrl : String
                , siteAdmin : Bool
                , starredUrl : String
                , subscriptionsUrl : String
                , type_ : String
                , url : String
                }
            , private : Bool
            , pullsUrl : String
            , releasesUrl : String
            , stargazersUrl : String
            , statusesUrl : String
            , subscribersUrl : String
            , subscriptionUrl : String
            , tagsUrl : String
            , teamsUrl : String
            , treesUrl : String
            , url : String
            , cloneUrl : String
            , defaultBranch : String
            , forks : Int
            , forksCount : Int
            , gitUrl : String
            , hasDownloads : Bool
            , hasIssues : Bool
            , hasProjects : Bool
            , hasWiki : Bool
            , hasPages : Bool
            , homepage : Nullable String
            , language : Nullable String
            , masterBranch : String
            , archived : Bool
            , disabled : Bool
            , visibility : String
            , mirrorUrl : Nullable String
            , openIssues : Int
            , openIssuesCount : Int
            , permissions :
                { admin : Bool
                , maintain : Bool
                , push : Bool
                , triage : Bool
                , pull : Bool
                }
            , tempCloneToken : String
            , allowMergeCommit : Bool
            , allowSquashMerge : Bool
            , allowRebaseMerge : Bool
            , license :
                Nullable { key : String
                , name : String
                , url : Nullable String
                , spdxId : Nullable String
                , nodeId : String
                }
            , pushedAt : String
            , size : Int
            , sshUrl : String
            , stargazersCount : Int
            , svnUrl : String
            , topics : List String
            , watchers : Int
            , watchersCount : Int
            , createdAt : String
            , updatedAt : String
            , allowForking : Bool
            , isTemplate : Bool
            , webCommitSignoffRequired : Bool
            }
        , sha : String
        , user :
            { avatarUrl : String
            , eventsUrl : String
            , followersUrl : String
            , followingUrl : String
            , gistsUrl : String
            , gravatarId : Nullable String
            , htmlUrl : String
            , id : Int
            , nodeId : String
            , login : String
            , organizationsUrl : String
            , receivedEventsUrl : String
            , reposUrl : String
            , siteAdmin : Bool
            , starredUrl : String
            , subscriptionsUrl : String
            , type_ : String
            , url : String
            }
        }
    , base :
        { label : String
        , ref : String
        , repo :
            { archiveUrl : String
            , assigneesUrl : String
            , blobsUrl : String
            , branchesUrl : String
            , collaboratorsUrl : String
            , commentsUrl : String
            , commitsUrl : String
            , compareUrl : String
            , contentsUrl : String
            , contributorsUrl : String
            , deploymentsUrl : String
            , description : Nullable String
            , downloadsUrl : String
            , eventsUrl : String
            , fork : Bool
            , forksUrl : String
            , fullName : String
            , gitCommitsUrl : String
            , gitRefsUrl : String
            , gitTagsUrl : String
            , hooksUrl : String
            , htmlUrl : String
            , id : Int
            , isTemplate : Bool
            , nodeId : String
            , issueCommentUrl : String
            , issueEventsUrl : String
            , issuesUrl : String
            , keysUrl : String
            , labelsUrl : String
            , languagesUrl : String
            , mergesUrl : String
            , milestonesUrl : String
            , name : String
            , notificationsUrl : String
            , owner :
                { avatarUrl : String
                , eventsUrl : String
                , followersUrl : String
                , followingUrl : String
                , gistsUrl : String
                , gravatarId : Nullable String
                , htmlUrl : String
                , id : Int
                , nodeId : String
                , login : String
                , organizationsUrl : String
                , receivedEventsUrl : String
                , reposUrl : String
                , siteAdmin : Bool
                , starredUrl : String
                , subscriptionsUrl : String
                , type_ : String
                , url : String
                }
            , private : Bool
            , pullsUrl : String
            , releasesUrl : String
            , stargazersUrl : String
            , statusesUrl : String
            , subscribersUrl : String
            , subscriptionUrl : String
            , tagsUrl : String
            , teamsUrl : String
            , treesUrl : String
            , url : String
            , cloneUrl : String
            , defaultBranch : String
            , forks : Int
            , forksCount : Int
            , gitUrl : String
            , hasDownloads : Bool
            , hasIssues : Bool
            , hasProjects : Bool
            , hasWiki : Bool
            , hasPages : Bool
            , homepage : Nullable String
            , language : Nullable String
            , masterBranch : String
            , archived : Bool
            , disabled : Bool
            , visibility : String
            , mirrorUrl : Nullable String
            , openIssues : Int
            , openIssuesCount : Int
            , permissions :
                { admin : Bool
                , maintain : Bool
                , push : Bool
                , triage : Bool
                , pull : Bool
                }
            , tempCloneToken : String
            , allowMergeCommit : Bool
            , allowSquashMerge : Bool
            , allowRebaseMerge : Bool
            , license : Debug.Todo
            , pushedAt : String
            , size : Int
            , sshUrl : String
            , stargazersCount : Int
            , svnUrl : String
            , topics : List String
            , watchers : Int
            , watchersCount : Int
            , createdAt : String
            , updatedAt : String
            , allowForking : Bool
            , webCommitSignoffRequired : Bool
            }
        , sha : String
        , user :
            { avatarUrl : String
            , eventsUrl : String
            , followersUrl : String
            , followingUrl : String
            , gistsUrl : String
            , gravatarId : Nullable String
            , htmlUrl : String
            , id : Int
            , nodeId : String
            , login : String
            , organizationsUrl : String
            , receivedEventsUrl : String
            , reposUrl : String
            , siteAdmin : Bool
            , starredUrl : String
            , subscriptionsUrl : String
            , type_ : String
            , url : String
            }
        }
    , links :
        { comments : Link
        , commits : Link
        , statuses : Link
        , html : Link
        , issue : Link
        , reviewComments : Link
        , reviewComment : Link
        , self : Link
        }
    , authorAssociation : AuthorAssociation
    , autoMerge : AutoMerge
    , draft : Bool
    , merged : Bool
    , mergeable : Nullable Bool
    , rebaseable : Nullable Bool
    , mergeableState : String
    , mergedBy : Debug.Todo
    , comments : Int
    , reviewComments : Int
    , maintainerCanModify : Bool
    , commits : Int
    , additions : Int
    , deletions : Int
    , changedFiles : Int
    }


decodePullRequest : Json.Decode.Decoder PullRequest
decodePullRequest =
    Json.Decode.succeed
     (\url id nodeId htmlUrl diffUrl patchUrl issueUrl commitsUrl reviewCommentsUrl reviewCommentUrl commentsUrl statusesUrl number state locked title user body labels milestone activeLockReason createdAt updatedAt closedAt mergedAt mergeCommitSha assignee assignees requestedReviewers requestedTeams head base links authorAssociation autoMerge draft merged mergeable rebaseable mergeableState mergedBy comments reviewComments maintainerCanModify commits additions deletions changedFiles ->
         { url = url
         , id = id
         , nodeId = nodeId
         , htmlUrl = htmlUrl
         , diffUrl = diffUrl
         , patchUrl = patchUrl
         , issueUrl = issueUrl
         , commitsUrl = commitsUrl
         , reviewCommentsUrl = reviewCommentsUrl
         , reviewCommentUrl = reviewCommentUrl
         , commentsUrl = commentsUrl
         , statusesUrl = statusesUrl
         , number = number
         , state = state
         , locked = locked
         , title = title
         , user = user
         , body = body
         , labels = labels
         , milestone = milestone
         , activeLockReason = activeLockReason
         , createdAt = createdAt
         , updatedAt = updatedAt
         , closedAt = closedAt
         , mergedAt = mergedAt
         , mergeCommitSha = mergeCommitSha
         , assignee = assignee
         , assignees = assignees
         , requestedReviewers = requestedReviewers
         , requestedTeams = requestedTeams
         , head = head
         , base = base
         , links = links
         , authorAssociation = authorAssociation
         , autoMerge = autoMerge
         , draft = draft
         , merged = merged
         , mergeable = mergeable
         , rebaseable = rebaseable
         , mergeableState = mergeableState
         , mergedBy = mergedBy
         , comments = comments
         , reviewComments = reviewComments
         , maintainerCanModify = maintainerCanModify
         , commits = commits
         , additions = additions
         , deletions = deletions
         , changedFiles = changedFiles
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "diff_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "patch_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "review_comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "review_comment_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "statuses_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "number" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "locked" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "body"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "labels"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\id nodeId url name description color default ->
                          { id = id
                          , nodeId = nodeId
                          , url = url
                          , name = name
                          , description = description
                          , color = color
                          , default = default
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "id" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "node_id" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "name" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "description"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "color" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "default" Json.Decode.bool)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "milestone"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeMilestone
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "active_lock_reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "closed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "merged_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "merge_commit_sha"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "assignee"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "assignees"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list decodeSimpleUser)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "requested_reviewers"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list decodeSimpleUser)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "requested_teams"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list decodeTeamSimple)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "head"
                (Json.Decode.succeed
                  (\label ref repo sha user ->
                      { label = label
                      , ref = ref
                      , repo = repo
                      , sha = sha
                      , user = user
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "label" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "ref" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "repo"
                            (Json.Decode.oneOf
                                [ Json.Decode.map
                                    Present
                                    (Json.Decode.succeed
                                      (\archiveUrl assigneesUrl blobsUrl branchesUrl collaboratorsUrl commentsUrl commitsUrl compareUrl contentsUrl contributorsUrl deploymentsUrl description downloadsUrl eventsUrl fork forksUrl fullName gitCommitsUrl gitRefsUrl gitTagsUrl hooksUrl htmlUrl id nodeId issueCommentUrl issueEventsUrl issuesUrl keysUrl labelsUrl languagesUrl mergesUrl milestonesUrl name notificationsUrl owner private pullsUrl releasesUrl stargazersUrl statusesUrl subscribersUrl subscriptionUrl tagsUrl teamsUrl treesUrl url cloneUrl defaultBranch forks forksCount gitUrl hasDownloads hasIssues hasProjects hasWiki hasPages homepage language masterBranch archived disabled visibility mirrorUrl openIssues openIssuesCount permissions tempCloneToken allowMergeCommit allowSquashMerge allowRebaseMerge license pushedAt size sshUrl stargazersCount svnUrl topics watchers watchersCount createdAt updatedAt allowForking isTemplate webCommitSignoffRequired ->
                                          { archiveUrl = archiveUrl
                                          , assigneesUrl = assigneesUrl
                                          , blobsUrl = blobsUrl
                                          , branchesUrl = branchesUrl
                                          , collaboratorsUrl = collaboratorsUrl
                                          , commentsUrl = commentsUrl
                                          , commitsUrl = commitsUrl
                                          , compareUrl = compareUrl
                                          , contentsUrl = contentsUrl
                                          , contributorsUrl = contributorsUrl
                                          , deploymentsUrl = deploymentsUrl
                                          , description = description
                                          , downloadsUrl = downloadsUrl
                                          , eventsUrl = eventsUrl
                                          , fork = fork
                                          , forksUrl = forksUrl
                                          , fullName = fullName
                                          , gitCommitsUrl = gitCommitsUrl
                                          , gitRefsUrl = gitRefsUrl
                                          , gitTagsUrl = gitTagsUrl
                                          , hooksUrl = hooksUrl
                                          , htmlUrl = htmlUrl
                                          , id = id
                                          , nodeId = nodeId
                                          , issueCommentUrl = issueCommentUrl
                                          , issueEventsUrl = issueEventsUrl
                                          , issuesUrl = issuesUrl
                                          , keysUrl = keysUrl
                                          , labelsUrl = labelsUrl
                                          , languagesUrl = languagesUrl
                                          , mergesUrl = mergesUrl
                                          , milestonesUrl = milestonesUrl
                                          , name = name
                                          , notificationsUrl = notificationsUrl
                                          , owner = owner
                                          , private = private
                                          , pullsUrl = pullsUrl
                                          , releasesUrl = releasesUrl
                                          , stargazersUrl = stargazersUrl
                                          , statusesUrl = statusesUrl
                                          , subscribersUrl = subscribersUrl
                                          , subscriptionUrl = subscriptionUrl
                                          , tagsUrl = tagsUrl
                                          , teamsUrl = teamsUrl
                                          , treesUrl = treesUrl
                                          , url = url
                                          , cloneUrl = cloneUrl
                                          , defaultBranch = defaultBranch
                                          , forks = forks
                                          , forksCount = forksCount
                                          , gitUrl = gitUrl
                                          , hasDownloads = hasDownloads
                                          , hasIssues = hasIssues
                                          , hasProjects = hasProjects
                                          , hasWiki = hasWiki
                                          , hasPages = hasPages
                                          , homepage = homepage
                                          , language = language
                                          , masterBranch = masterBranch
                                          , archived = archived
                                          , disabled = disabled
                                          , visibility = visibility
                                          , mirrorUrl = mirrorUrl
                                          , openIssues = openIssues
                                          , openIssuesCount = openIssuesCount
                                          , permissions = permissions
                                          , tempCloneToken = tempCloneToken
                                          , allowMergeCommit = allowMergeCommit
                                          , allowSquashMerge = allowSquashMerge
                                          , allowRebaseMerge = allowRebaseMerge
                                          , license = license
                                          , pushedAt = pushedAt
                                          , size = size
                                          , sshUrl = sshUrl
                                          , stargazersCount = stargazersCount
                                          , svnUrl = svnUrl
                                          , topics = topics
                                          , watchers = watchers
                                          , watchersCount = watchersCount
                                          , createdAt = createdAt
                                          , updatedAt = updatedAt
                                          , allowForking = allowForking
                                          , isTemplate = isTemplate
                                          , webCommitSignoffRequired =
                                              webCommitSignoffRequired
                                          }
                                      )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "archive_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "assignees_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "blobs_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "branches_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "collaborators_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "comments_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "commits_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "compare_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "contents_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "contributors_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "deployments_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "description"
                                                (Json.Decode.oneOf
                                                    [ Json.Decode.map
                                                        Present
                                                        Json.Decode.string
                                                    , Json.Decode.null Null
                                                    ]
                                                )
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "downloads_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "events_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "fork"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "forks_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "full_name"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "git_commits_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "git_refs_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "git_tags_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "hooks_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "html_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "id"
                                                Json.Decode.int
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "node_id"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "issue_comment_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "issue_events_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "issues_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "keys_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "labels_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "languages_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "merges_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "milestones_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "name"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "notifications_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "owner"
                                                (Json.Decode.succeed
                                                  (\avatarUrl eventsUrl followersUrl followingUrl gistsUrl gravatarId htmlUrl id nodeId login organizationsUrl receivedEventsUrl reposUrl siteAdmin starredUrl subscriptionsUrl type_ url ->
                                                      { avatarUrl = avatarUrl
                                                      , eventsUrl = eventsUrl
                                                      , followersUrl =
                                                          followersUrl
                                                      , followingUrl =
                                                          followingUrl
                                                      , gistsUrl = gistsUrl
                                                      , gravatarId = gravatarId
                                                      , htmlUrl = htmlUrl
                                                      , id = id
                                                      , nodeId = nodeId
                                                      , login = login
                                                      , organizationsUrl =
                                                          organizationsUrl
                                                      , receivedEventsUrl =
                                                          receivedEventsUrl
                                                      , reposUrl = reposUrl
                                                      , siteAdmin = siteAdmin
                                                      , starredUrl = starredUrl
                                                      , subscriptionsUrl =
                                                          subscriptionsUrl
                                                      , type_ = type_
                                                      , url = url
                                                      }
                                                  )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "avatar_url"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "events_url"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "followers_url"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "following_url"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "gists_url"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "gravatar_id"
                                                            (Json.Decode.oneOf
                                                                [ Json.Decode.map
                                                                    Present
                                                                    Json.Decode.string
                                                                , Json.Decode.null
                                                                    Null
                                                                ]
                                                            )
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "html_url"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "id"
                                                            Json.Decode.int
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "node_id"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "login"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "organizations_url"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "received_events_url"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "repos_url"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "site_admin"
                                                            Json.Decode.bool
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "starred_url"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "subscriptions_url"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "type"
                                                            Json.Decode.string
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "url"
                                                            Json.Decode.string
                                                        )
                                                )
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "private"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "pulls_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "releases_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "stargazers_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "statuses_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "subscribers_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "subscription_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "tags_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "teams_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "trees_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "clone_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "default_branch"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "forks"
                                                Json.Decode.int
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "forks_count"
                                                Json.Decode.int
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "git_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "has_downloads"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "has_issues"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "has_projects"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "has_wiki"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "has_pages"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "homepage"
                                                (Json.Decode.oneOf
                                                    [ Json.Decode.map
                                                        Present
                                                        Json.Decode.string
                                                    , Json.Decode.null Null
                                                    ]
                                                )
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "language"
                                                (Json.Decode.oneOf
                                                    [ Json.Decode.map
                                                        Present
                                                        Json.Decode.string
                                                    , Json.Decode.null Null
                                                    ]
                                                )
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "master_branch"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "archived"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "disabled"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "visibility"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "mirror_url"
                                                (Json.Decode.oneOf
                                                    [ Json.Decode.map
                                                        Present
                                                        Json.Decode.string
                                                    , Json.Decode.null Null
                                                    ]
                                                )
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "open_issues"
                                                Json.Decode.int
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "open_issues_count"
                                                Json.Decode.int
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "permissions"
                                                (Json.Decode.succeed
                                                  (\admin maintain push triage pull ->
                                                      { admin = admin
                                                      , maintain = maintain
                                                      , push = push
                                                      , triage = triage
                                                      , pull = pull
                                                      }
                                                  )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "admin"
                                                            Json.Decode.bool
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "maintain"
                                                            Json.Decode.bool
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "push"
                                                            Json.Decode.bool
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "triage"
                                                            Json.Decode.bool
                                                        )
                                                    |> Json.Decode.Extra.andMap
                                                        (Json.Decode.field
                                                            "pull"
                                                            Json.Decode.bool
                                                        )
                                                )
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "temp_clone_token"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "allow_merge_commit"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "allow_squash_merge"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "allow_rebase_merge"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "license"
                                                (Json.Decode.oneOf
                                                    [ Json.Decode.map
                                                        Present
                                                        (Json.Decode.succeed
                                                          (\key name url spdxId nodeId ->
                                                              { key = key
                                                              , name = name
                                                              , url = url
                                                              , spdxId = spdxId
                                                              , nodeId = nodeId
                                                              }
                                                          )
                                                            |> Json.Decode.Extra.andMap
                                                                (Json.Decode.field
                                                                    "key"
                                                                    Json.Decode.string
                                                                )
                                                            |> Json.Decode.Extra.andMap
                                                                (Json.Decode.field
                                                                    "name"
                                                                    Json.Decode.string
                                                                )
                                                            |> Json.Decode.Extra.andMap
                                                                (Json.Decode.field
                                                                    "url"
                                                                    (Json.Decode.oneOf
                                                                        [ Json.Decode.map
                                                                            Present
                                                                            Json.Decode.string
                                                                        , Json.Decode.null
                                                                            Null
                                                                        ]
                                                                    )
                                                                )
                                                            |> Json.Decode.Extra.andMap
                                                                (Json.Decode.field
                                                                    "spdx_id"
                                                                    (Json.Decode.oneOf
                                                                        [ Json.Decode.map
                                                                            Present
                                                                            Json.Decode.string
                                                                        , Json.Decode.null
                                                                            Null
                                                                        ]
                                                                    )
                                                                )
                                                            |> Json.Decode.Extra.andMap
                                                                (Json.Decode.field
                                                                    "node_id"
                                                                    Json.Decode.string
                                                                )
                                                        )
                                                    , Json.Decode.null Null
                                                    ]
                                                )
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "pushed_at"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "size"
                                                Json.Decode.int
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "ssh_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "stargazers_count"
                                                Json.Decode.int
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "svn_url"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "topics"
                                                (Json.Decode.list
                                                    Json.Decode.string
                                                )
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "watchers"
                                                Json.Decode.int
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "watchers_count"
                                                Json.Decode.int
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "created_at"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "updated_at"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "allow_forking"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "is_template"
                                                Json.Decode.bool
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "web_commit_signoff_required"
                                                Json.Decode.bool
                                            )
                                    )
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "user"
                            (Json.Decode.succeed
                              (\avatarUrl eventsUrl followersUrl followingUrl gistsUrl gravatarId htmlUrl id nodeId login organizationsUrl receivedEventsUrl reposUrl siteAdmin starredUrl subscriptionsUrl type_ url ->
                                  { avatarUrl = avatarUrl
                                  , eventsUrl = eventsUrl
                                  , followersUrl = followersUrl
                                  , followingUrl = followingUrl
                                  , gistsUrl = gistsUrl
                                  , gravatarId = gravatarId
                                  , htmlUrl = htmlUrl
                                  , id = id
                                  , nodeId = nodeId
                                  , login = login
                                  , organizationsUrl = organizationsUrl
                                  , receivedEventsUrl = receivedEventsUrl
                                  , reposUrl = reposUrl
                                  , siteAdmin = siteAdmin
                                  , starredUrl = starredUrl
                                  , subscriptionsUrl = subscriptionsUrl
                                  , type_ = type_
                                  , url = url
                                  }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "avatar_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "events_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "followers_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "following_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "gists_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "gravatar_id"
                                        (Json.Decode.oneOf
                                            [ Json.Decode.map
                                                Present
                                                Json.Decode.string
                                            , Json.Decode.null Null
                                            ]
                                        )
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "html_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "id" Json.Decode.int)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "node_id"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "login"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "organizations_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "received_events_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "repos_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "site_admin"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "starred_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "subscriptions_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "type" Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "url" Json.Decode.string)
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "base"
                (Json.Decode.succeed
                  (\label ref repo sha user ->
                      { label = label
                      , ref = ref
                      , repo = repo
                      , sha = sha
                      , user = user
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "label" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "ref" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "repo"
                            (Json.Decode.succeed
                              (\archiveUrl assigneesUrl blobsUrl branchesUrl collaboratorsUrl commentsUrl commitsUrl compareUrl contentsUrl contributorsUrl deploymentsUrl description downloadsUrl eventsUrl fork forksUrl fullName gitCommitsUrl gitRefsUrl gitTagsUrl hooksUrl htmlUrl id isTemplate nodeId issueCommentUrl issueEventsUrl issuesUrl keysUrl labelsUrl languagesUrl mergesUrl milestonesUrl name notificationsUrl owner private pullsUrl releasesUrl stargazersUrl statusesUrl subscribersUrl subscriptionUrl tagsUrl teamsUrl treesUrl url cloneUrl defaultBranch forks forksCount gitUrl hasDownloads hasIssues hasProjects hasWiki hasPages homepage language masterBranch archived disabled visibility mirrorUrl openIssues openIssuesCount permissions tempCloneToken allowMergeCommit allowSquashMerge allowRebaseMerge license pushedAt size sshUrl stargazersCount svnUrl topics watchers watchersCount createdAt updatedAt allowForking webCommitSignoffRequired ->
                                  { archiveUrl = archiveUrl
                                  , assigneesUrl = assigneesUrl
                                  , blobsUrl = blobsUrl
                                  , branchesUrl = branchesUrl
                                  , collaboratorsUrl = collaboratorsUrl
                                  , commentsUrl = commentsUrl
                                  , commitsUrl = commitsUrl
                                  , compareUrl = compareUrl
                                  , contentsUrl = contentsUrl
                                  , contributorsUrl = contributorsUrl
                                  , deploymentsUrl = deploymentsUrl
                                  , description = description
                                  , downloadsUrl = downloadsUrl
                                  , eventsUrl = eventsUrl
                                  , fork = fork
                                  , forksUrl = forksUrl
                                  , fullName = fullName
                                  , gitCommitsUrl = gitCommitsUrl
                                  , gitRefsUrl = gitRefsUrl
                                  , gitTagsUrl = gitTagsUrl
                                  , hooksUrl = hooksUrl
                                  , htmlUrl = htmlUrl
                                  , id = id
                                  , isTemplate = isTemplate
                                  , nodeId = nodeId
                                  , issueCommentUrl = issueCommentUrl
                                  , issueEventsUrl = issueEventsUrl
                                  , issuesUrl = issuesUrl
                                  , keysUrl = keysUrl
                                  , labelsUrl = labelsUrl
                                  , languagesUrl = languagesUrl
                                  , mergesUrl = mergesUrl
                                  , milestonesUrl = milestonesUrl
                                  , name = name
                                  , notificationsUrl = notificationsUrl
                                  , owner = owner
                                  , private = private
                                  , pullsUrl = pullsUrl
                                  , releasesUrl = releasesUrl
                                  , stargazersUrl = stargazersUrl
                                  , statusesUrl = statusesUrl
                                  , subscribersUrl = subscribersUrl
                                  , subscriptionUrl = subscriptionUrl
                                  , tagsUrl = tagsUrl
                                  , teamsUrl = teamsUrl
                                  , treesUrl = treesUrl
                                  , url = url
                                  , cloneUrl = cloneUrl
                                  , defaultBranch = defaultBranch
                                  , forks = forks
                                  , forksCount = forksCount
                                  , gitUrl = gitUrl
                                  , hasDownloads = hasDownloads
                                  , hasIssues = hasIssues
                                  , hasProjects = hasProjects
                                  , hasWiki = hasWiki
                                  , hasPages = hasPages
                                  , homepage = homepage
                                  , language = language
                                  , masterBranch = masterBranch
                                  , archived = archived
                                  , disabled = disabled
                                  , visibility = visibility
                                  , mirrorUrl = mirrorUrl
                                  , openIssues = openIssues
                                  , openIssuesCount = openIssuesCount
                                  , permissions = permissions
                                  , tempCloneToken = tempCloneToken
                                  , allowMergeCommit = allowMergeCommit
                                  , allowSquashMerge = allowSquashMerge
                                  , allowRebaseMerge = allowRebaseMerge
                                  , license = license
                                  , pushedAt = pushedAt
                                  , size = size
                                  , sshUrl = sshUrl
                                  , stargazersCount = stargazersCount
                                  , svnUrl = svnUrl
                                  , topics = topics
                                  , watchers = watchers
                                  , watchersCount = watchersCount
                                  , createdAt = createdAt
                                  , updatedAt = updatedAt
                                  , allowForking = allowForking
                                  , webCommitSignoffRequired =
                                      webCommitSignoffRequired
                                  }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "archive_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "assignees_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "blobs_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "branches_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "collaborators_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "comments_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "commits_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "compare_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "contents_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "contributors_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "deployments_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "description"
                                        (Json.Decode.oneOf
                                            [ Json.Decode.map
                                                Present
                                                Json.Decode.string
                                            , Json.Decode.null Null
                                            ]
                                        )
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "downloads_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "events_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "fork" Json.Decode.bool)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "forks_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "full_name"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "git_commits_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "git_refs_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "git_tags_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "hooks_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "html_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "id" Json.Decode.int)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "is_template"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "node_id"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "issue_comment_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "issue_events_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "issues_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "keys_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "labels_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "languages_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "merges_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "milestones_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "name" Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "notifications_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "owner"
                                        (Json.Decode.succeed
                                          (\avatarUrl eventsUrl followersUrl followingUrl gistsUrl gravatarId htmlUrl id nodeId login organizationsUrl receivedEventsUrl reposUrl siteAdmin starredUrl subscriptionsUrl type_ url ->
                                              { avatarUrl = avatarUrl
                                              , eventsUrl = eventsUrl
                                              , followersUrl = followersUrl
                                              , followingUrl = followingUrl
                                              , gistsUrl = gistsUrl
                                              , gravatarId = gravatarId
                                              , htmlUrl = htmlUrl
                                              , id = id
                                              , nodeId = nodeId
                                              , login = login
                                              , organizationsUrl =
                                                  organizationsUrl
                                              , receivedEventsUrl =
                                                  receivedEventsUrl
                                              , reposUrl = reposUrl
                                              , siteAdmin = siteAdmin
                                              , starredUrl = starredUrl
                                              , subscriptionsUrl =
                                                  subscriptionsUrl
                                              , type_ = type_
                                              , url = url
                                              }
                                          )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "avatar_url"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "events_url"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "followers_url"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "following_url"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "gists_url"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "gravatar_id"
                                                    (Json.Decode.oneOf
                                                        [ Json.Decode.map
                                                            Present
                                                            Json.Decode.string
                                                        , Json.Decode.null Null
                                                        ]
                                                    )
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "html_url"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "id"
                                                    Json.Decode.int
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "node_id"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "login"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "organizations_url"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "received_events_url"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "repos_url"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "site_admin"
                                                    Json.Decode.bool
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "starred_url"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "subscriptions_url"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "type"
                                                    Json.Decode.string
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "url"
                                                    Json.Decode.string
                                                )
                                        )
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "private"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "pulls_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "releases_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "stargazers_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "statuses_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "subscribers_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "subscription_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "tags_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "teams_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "trees_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "url" Json.Decode.string)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "clone_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "default_branch"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "forks" Json.Decode.int)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "forks_count"
                                        Json.Decode.int
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "git_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "has_downloads"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "has_issues"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "has_projects"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "has_wiki"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "has_pages"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "homepage"
                                        (Json.Decode.oneOf
                                            [ Json.Decode.map
                                                Present
                                                Json.Decode.string
                                            , Json.Decode.null Null
                                            ]
                                        )
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "language"
                                        (Json.Decode.oneOf
                                            [ Json.Decode.map
                                                Present
                                                Json.Decode.string
                                            , Json.Decode.null Null
                                            ]
                                        )
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "master_branch"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "archived"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "disabled"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "visibility"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "mirror_url"
                                        (Json.Decode.oneOf
                                            [ Json.Decode.map
                                                Present
                                                Json.Decode.string
                                            , Json.Decode.null Null
                                            ]
                                        )
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "open_issues"
                                        Json.Decode.int
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "open_issues_count"
                                        Json.Decode.int
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "permissions"
                                        (Json.Decode.succeed
                                          (\admin maintain push triage pull ->
                                              { admin = admin
                                              , maintain = maintain
                                              , push = push
                                              , triage = triage
                                              , pull = pull
                                              }
                                          )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "admin"
                                                    Json.Decode.bool
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "maintain"
                                                    Json.Decode.bool
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "push"
                                                    Json.Decode.bool
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "triage"
                                                    Json.Decode.bool
                                                )
                                            |> Json.Decode.Extra.andMap
                                                (Json.Decode.field
                                                    "pull"
                                                    Json.Decode.bool
                                                )
                                        )
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "temp_clone_token"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "allow_merge_commit"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "allow_squash_merge"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "allow_rebase_merge"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "license"
                                        (Json.Decode.oneOf
                                            [ Json.Decode.map
                                                Present
                                                decodeLicenseSimple
                                            , Json.Decode.null Null
                                            ]
                                        )
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "pushed_at"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "size" Json.Decode.int)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "ssh_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "stargazers_count"
                                        Json.Decode.int
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "svn_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "topics"
                                        (Json.Decode.list Json.Decode.string)
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "watchers"
                                        Json.Decode.int
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "watchers_count"
                                        Json.Decode.int
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "created_at"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "updated_at"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "allow_forking"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "web_commit_signoff_required"
                                        Json.Decode.bool
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "user"
                            (Json.Decode.succeed
                              (\avatarUrl eventsUrl followersUrl followingUrl gistsUrl gravatarId htmlUrl id nodeId login organizationsUrl receivedEventsUrl reposUrl siteAdmin starredUrl subscriptionsUrl type_ url ->
                                  { avatarUrl = avatarUrl
                                  , eventsUrl = eventsUrl
                                  , followersUrl = followersUrl
                                  , followingUrl = followingUrl
                                  , gistsUrl = gistsUrl
                                  , gravatarId = gravatarId
                                  , htmlUrl = htmlUrl
                                  , id = id
                                  , nodeId = nodeId
                                  , login = login
                                  , organizationsUrl = organizationsUrl
                                  , receivedEventsUrl = receivedEventsUrl
                                  , reposUrl = reposUrl
                                  , siteAdmin = siteAdmin
                                  , starredUrl = starredUrl
                                  , subscriptionsUrl = subscriptionsUrl
                                  , type_ = type_
                                  , url = url
                                  }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "avatar_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "events_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "followers_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "following_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "gists_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "gravatar_id"
                                        (Json.Decode.oneOf
                                            [ Json.Decode.map
                                                Present
                                                Json.Decode.string
                                            , Json.Decode.null Null
                                            ]
                                        )
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "html_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "id" Json.Decode.int)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "node_id"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "login"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "organizations_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "received_events_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "repos_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "site_admin"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "starred_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "subscriptions_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "type" Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "url" Json.Decode.string)
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "_links"
                (Json.Decode.succeed
                  (\comments commits statuses html issue reviewComments reviewComment self ->
                      { comments = comments
                      , commits = commits
                      , statuses = statuses
                      , html = html
                      , issue = issue
                      , reviewComments = reviewComments
                      , reviewComment = reviewComment
                      , self = self
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "comments" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "commits" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "statuses" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "html" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "issue" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "review_comments" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "review_comment" decodeLink)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "self" decodeLink)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author_association" decodeAuthorAssociation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "auto_merge" decodeAutoMerge)
        |> Json.Decode.Extra.andMap (Json.Decode.field "draft" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merged" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "mergeable"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "rebaseable"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "mergeable_state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "merged_by"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "review_comments" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "maintainer_can_modify" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commits" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "additions" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deletions" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "changed_files" Json.Decode.int)


encodePullRequest : PullRequest -> Json.Encode.Value
encodePullRequest rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "diff_url", Json.Encode.string rec.diffUrl )
        , ( "patch_url", Json.Encode.string rec.patchUrl )
        , ( "issue_url", Json.Encode.string rec.issueUrl )
        , ( "commits_url", Json.Encode.string rec.commitsUrl )
        , ( "review_comments_url", Json.Encode.string rec.reviewCommentsUrl )
        , ( "review_comment_url", Json.Encode.string rec.reviewCommentUrl )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "statuses_url", Json.Encode.string rec.statusesUrl )
        , ( "number", Json.Encode.int rec.number )
        , ( "state", Json.Encode.string rec.state )
        , ( "locked", Json.Encode.bool rec.locked )
        , ( "title", Json.Encode.string rec.title )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "body"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.body
          )
        , ( "labels"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "id", Json.Encode.int rec0.id )
                        , ( "node_id", Json.Encode.string rec0.nodeId )
                        , ( "url", Json.Encode.string rec0.url )
                        , ( "name", Json.Encode.string rec0.name )
                        , ( "description"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.string value
                            )
                                rec0.description
                          )
                        , ( "color", Json.Encode.string rec0.color )
                        , ( "default", Json.Encode.bool rec0.default )
                        ]
                )
                rec.labels
          )
        , ( "milestone", Debug.todo "decode anyOf" rec.milestone )
        , ( "active_lock_reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.activeLockReason
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "closed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.closedAt
          )
        , ( "merged_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.mergedAt
          )
        , ( "merge_commit_sha"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.mergeCommitSha
          )
        , ( "assignee", Debug.todo "decode anyOf" rec.assignee )
        , ( "assignees"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list encodeSimpleUser value
            )
                rec.assignees
          )
        , ( "requested_reviewers"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list encodeSimpleUser value
            )
                rec.requestedReviewers
          )
        , ( "requested_teams"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list encodeTeamSimple value
            )
                rec.requestedTeams
          )
        , ( "head"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "label", Json.Encode.string rec0.label )
                    , ( "ref", Json.Encode.string rec0.ref )
                    , ( "repo"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    (\rec_0_0_1_0_0_3_1_1_0_31_1_0_0 ->
                                        Json.Encode.object
                                            [ ( "archive_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.archiveUrl
                                              )
                                            , ( "assignees_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.assigneesUrl
                                              )
                                            , ( "blobs_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.blobsUrl
                                              )
                                            , ( "branches_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.branchesUrl
                                              )
                                            , ( "collaborators_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.collaboratorsUrl
                                              )
                                            , ( "comments_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.commentsUrl
                                              )
                                            , ( "commits_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.commitsUrl
                                              )
                                            , ( "compare_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.compareUrl
                                              )
                                            , ( "contents_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.contentsUrl
                                              )
                                            , ( "contributors_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.contributorsUrl
                                              )
                                            , ( "deployments_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.deploymentsUrl
                                              )
                                            , ( "description"
                                              , (\nullableValue0 ->
                                                    case nullableValue0 of
                                                        Null ->
                                                            Json.Encode.null

                                                        Present value0 ->
                                                            Json.Encode.string
                                                                value0
                                                )
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.description
                                              )
                                            , ( "downloads_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.downloadsUrl
                                              )
                                            , ( "events_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.eventsUrl
                                              )
                                            , ( "fork"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.fork
                                              )
                                            , ( "forks_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.forksUrl
                                              )
                                            , ( "full_name"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.fullName
                                              )
                                            , ( "git_commits_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.gitCommitsUrl
                                              )
                                            , ( "git_refs_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.gitRefsUrl
                                              )
                                            , ( "git_tags_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.gitTagsUrl
                                              )
                                            , ( "hooks_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.hooksUrl
                                              )
                                            , ( "html_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.htmlUrl
                                              )
                                            , ( "id"
                                              , Json.Encode.int
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.id
                                              )
                                            , ( "node_id"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.nodeId
                                              )
                                            , ( "issue_comment_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.issueCommentUrl
                                              )
                                            , ( "issue_events_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.issueEventsUrl
                                              )
                                            , ( "issues_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.issuesUrl
                                              )
                                            , ( "keys_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.keysUrl
                                              )
                                            , ( "labels_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.labelsUrl
                                              )
                                            , ( "languages_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.languagesUrl
                                              )
                                            , ( "merges_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.mergesUrl
                                              )
                                            , ( "milestones_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.milestonesUrl
                                              )
                                            , ( "name"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.name
                                              )
                                            , ( "notifications_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.notificationsUrl
                                              )
                                            , ( "owner"
                                              , (\rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0 ->
                                                    Json.Encode.object
                                                        [ ( "avatar_url"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.avatarUrl
                                                          )
                                                        , ( "events_url"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.eventsUrl
                                                          )
                                                        , ( "followers_url"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.followersUrl
                                                          )
                                                        , ( "following_url"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.followingUrl
                                                          )
                                                        , ( "gists_url"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.gistsUrl
                                                          )
                                                        , ( "gravatar_id"
                                                          , (\nullableValue0 ->
                                                                case
                                                                    nullableValue0
                                                                of
                                                                    Null ->
                                                                        Json.Encode.null

                                                                    Present value0 ->
                                                                        Json.Encode.string
                                                                            value0
                                                            )
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.gravatarId
                                                          )
                                                        , ( "html_url"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.htmlUrl
                                                          )
                                                        , ( "id"
                                                          , Json.Encode.int
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.id
                                                          )
                                                        , ( "node_id"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.nodeId
                                                          )
                                                        , ( "login"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.login
                                                          )
                                                        , ( "organizations_url"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.organizationsUrl
                                                          )
                                                        , ( "received_events_url"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.receivedEventsUrl
                                                          )
                                                        , ( "repos_url"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.reposUrl
                                                          )
                                                        , ( "site_admin"
                                                          , Json.Encode.bool
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.siteAdmin
                                                          )
                                                        , ( "starred_url"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.starredUrl
                                                          )
                                                        , ( "subscriptions_url"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.subscriptionsUrl
                                                          )
                                                        , ( "type"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.type_
                                                          )
                                                        , ( "url"
                                                          , Json.Encode.string
                                                                rec_0_35_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.url
                                                          )
                                                        ]
                                                )
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.owner
                                              )
                                            , ( "private"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.private
                                              )
                                            , ( "pulls_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.pullsUrl
                                              )
                                            , ( "releases_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.releasesUrl
                                              )
                                            , ( "stargazers_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.stargazersUrl
                                              )
                                            , ( "statuses_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.statusesUrl
                                              )
                                            , ( "subscribers_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.subscribersUrl
                                              )
                                            , ( "subscription_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.subscriptionUrl
                                              )
                                            , ( "tags_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.tagsUrl
                                              )
                                            , ( "teams_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.teamsUrl
                                              )
                                            , ( "trees_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.treesUrl
                                              )
                                            , ( "url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.url
                                              )
                                            , ( "clone_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.cloneUrl
                                              )
                                            , ( "default_branch"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.defaultBranch
                                              )
                                            , ( "forks"
                                              , Json.Encode.int
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.forks
                                              )
                                            , ( "forks_count"
                                              , Json.Encode.int
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.forksCount
                                              )
                                            , ( "git_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.gitUrl
                                              )
                                            , ( "has_downloads"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.hasDownloads
                                              )
                                            , ( "has_issues"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.hasIssues
                                              )
                                            , ( "has_projects"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.hasProjects
                                              )
                                            , ( "has_wiki"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.hasWiki
                                              )
                                            , ( "has_pages"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.hasPages
                                              )
                                            , ( "homepage"
                                              , (\nullableValue0 ->
                                                    case nullableValue0 of
                                                        Null ->
                                                            Json.Encode.null

                                                        Present value0 ->
                                                            Json.Encode.string
                                                                value0
                                                )
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.homepage
                                              )
                                            , ( "language"
                                              , (\nullableValue0 ->
                                                    case nullableValue0 of
                                                        Null ->
                                                            Json.Encode.null

                                                        Present value0 ->
                                                            Json.Encode.string
                                                                value0
                                                )
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.language
                                              )
                                            , ( "master_branch"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.masterBranch
                                              )
                                            , ( "archived"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.archived
                                              )
                                            , ( "disabled"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.disabled
                                              )
                                            , ( "visibility"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.visibility
                                              )
                                            , ( "mirror_url"
                                              , (\nullableValue0 ->
                                                    case nullableValue0 of
                                                        Null ->
                                                            Json.Encode.null

                                                        Present value0 ->
                                                            Json.Encode.string
                                                                value0
                                                )
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.mirrorUrl
                                              )
                                            , ( "open_issues"
                                              , Json.Encode.int
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.openIssues
                                              )
                                            , ( "open_issues_count"
                                              , Json.Encode.int
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.openIssuesCount
                                              )
                                            , ( "permissions"
                                              , (\rec_0_66_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0 ->
                                                    Json.Encode.object
                                                        [ ( "admin"
                                                          , Json.Encode.bool
                                                                rec_0_66_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.admin
                                                          )
                                                        , ( "maintain"
                                                          , Json.Encode.bool
                                                                rec_0_66_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.maintain
                                                          )
                                                        , ( "push"
                                                          , Json.Encode.bool
                                                                rec_0_66_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.push
                                                          )
                                                        , ( "triage"
                                                          , Json.Encode.bool
                                                                rec_0_66_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.triage
                                                          )
                                                        , ( "pull"
                                                          , Json.Encode.bool
                                                                rec_0_66_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.pull
                                                          )
                                                        ]
                                                )
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.permissions
                                              )
                                            , ( "temp_clone_token"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.tempCloneToken
                                              )
                                            , ( "allow_merge_commit"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.allowMergeCommit
                                              )
                                            , ( "allow_squash_merge"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.allowSquashMerge
                                              )
                                            , ( "allow_rebase_merge"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.allowRebaseMerge
                                              )
                                            , ( "license"
                                              , (\nullableValue0 ->
                                                    case nullableValue0 of
                                                        Null ->
                                                            Json.Encode.null

                                                        Present value0 ->
                                                            (\rec_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0 ->
                                                                Json.Encode.object
                                                                    [ ( "key"
                                                                      , Json.Encode.string
                                                                            rec_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.key
                                                                      )
                                                                    , ( "name"
                                                                      , Json.Encode.string
                                                                            rec_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.name
                                                                      )
                                                                    , ( "url"
                                                                      , (\nullableValue_0_3_1_1_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0 ->
                                                                            case
                                                                                nullableValue_0_3_1_1_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0
                                                                            of
                                                                                Null ->
                                                                                    Json.Encode.null

                                                                                Present value_1_1_0_3_1_1_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0 ->
                                                                                    Json.Encode.string
                                                                                        value_1_1_0_3_1_1_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0
                                                                        )
                                                                            rec_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.url
                                                                      )
                                                                    , ( "spdx_id"
                                                                      , (\nullableValue_0_4_1_1_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0 ->
                                                                            case
                                                                                nullableValue_0_4_1_1_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0
                                                                            of
                                                                                Null ->
                                                                                    Json.Encode.null

                                                                                Present value_1_1_0_4_1_1_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0 ->
                                                                                    Json.Encode.string
                                                                                        value_1_1_0_4_1_1_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0
                                                                        )
                                                                            rec_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.spdxId
                                                                      )
                                                                    , ( "node_id"
                                                                      , Json.Encode.string
                                                                            rec_0_1_1_1_0_71_1_1_0_0_1_0_0_3_1_1_0_31_1_0_0.nodeId
                                                                      )
                                                                    ]
                                                            )
                                                                value0
                                                )
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.license
                                              )
                                            , ( "pushed_at"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.pushedAt
                                              )
                                            , ( "size"
                                              , Json.Encode.int
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.size
                                              )
                                            , ( "ssh_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.sshUrl
                                              )
                                            , ( "stargazers_count"
                                              , Json.Encode.int
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.stargazersCount
                                              )
                                            , ( "svn_url"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.svnUrl
                                              )
                                            , ( "topics"
                                              , Json.Encode.list
                                                    Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.topics
                                              )
                                            , ( "watchers"
                                              , Json.Encode.int
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.watchers
                                              )
                                            , ( "watchers_count"
                                              , Json.Encode.int
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.watchersCount
                                              )
                                            , ( "created_at"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.createdAt
                                              )
                                            , ( "updated_at"
                                              , Json.Encode.string
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.updatedAt
                                              )
                                            , ( "allow_forking"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.allowForking
                                              )
                                            , ( "is_template"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.isTemplate
                                              )
                                            , ( "web_commit_signoff_required"
                                              , Json.Encode.bool
                                                    rec_0_0_1_0_0_3_1_1_0_31_1_0_0.webCommitSignoffRequired
                                              )
                                            ]
                                    )
                                        value
                        )
                            rec0.repo
                      )
                    , ( "sha", Json.Encode.string rec0.sha )
                    , ( "user"
                      , (\rec_0_5_1_1_0_31_1_0_0 ->
                            Json.Encode.object
                                [ ( "avatar_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.avatarUrl
                                  )
                                , ( "events_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.eventsUrl
                                  )
                                , ( "followers_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.followersUrl
                                  )
                                , ( "following_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.followingUrl
                                  )
                                , ( "gists_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.gistsUrl
                                  )
                                , ( "gravatar_id"
                                  , (\nullableValue ->
                                        case nullableValue of
                                            Null ->
                                                Json.Encode.null

                                            Present value ->
                                                Json.Encode.string value
                                    )
                                        rec_0_5_1_1_0_31_1_0_0.gravatarId
                                  )
                                , ( "html_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.htmlUrl
                                  )
                                , ( "id"
                                  , Json.Encode.int rec_0_5_1_1_0_31_1_0_0.id
                                  )
                                , ( "node_id"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.nodeId
                                  )
                                , ( "login"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.login
                                  )
                                , ( "organizations_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.organizationsUrl
                                  )
                                , ( "received_events_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.receivedEventsUrl
                                  )
                                , ( "repos_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.reposUrl
                                  )
                                , ( "site_admin"
                                  , Json.Encode.bool
                                        rec_0_5_1_1_0_31_1_0_0.siteAdmin
                                  )
                                , ( "starred_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.starredUrl
                                  )
                                , ( "subscriptions_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.subscriptionsUrl
                                  )
                                , ( "type"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.type_
                                  )
                                , ( "url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_31_1_0_0.url
                                  )
                                ]
                        )
                            rec0.user
                      )
                    ]
            )
                rec.head
          )
        , ( "base"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "label", Json.Encode.string rec0.label )
                    , ( "ref", Json.Encode.string rec0.ref )
                    , ( "repo"
                      , (\rec_0_3_1_1_0_32_1_0_0 ->
                            Json.Encode.object
                                [ ( "archive_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.archiveUrl
                                  )
                                , ( "assignees_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.assigneesUrl
                                  )
                                , ( "blobs_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.blobsUrl
                                  )
                                , ( "branches_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.branchesUrl
                                  )
                                , ( "collaborators_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.collaboratorsUrl
                                  )
                                , ( "comments_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.commentsUrl
                                  )
                                , ( "commits_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.commitsUrl
                                  )
                                , ( "compare_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.compareUrl
                                  )
                                , ( "contents_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.contentsUrl
                                  )
                                , ( "contributors_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.contributorsUrl
                                  )
                                , ( "deployments_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.deploymentsUrl
                                  )
                                , ( "description"
                                  , (\nullableValue ->
                                        case nullableValue of
                                            Null ->
                                                Json.Encode.null

                                            Present value ->
                                                Json.Encode.string value
                                    )
                                        rec_0_3_1_1_0_32_1_0_0.description
                                  )
                                , ( "downloads_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.downloadsUrl
                                  )
                                , ( "events_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.eventsUrl
                                  )
                                , ( "fork"
                                  , Json.Encode.bool rec_0_3_1_1_0_32_1_0_0.fork
                                  )
                                , ( "forks_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.forksUrl
                                  )
                                , ( "full_name"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.fullName
                                  )
                                , ( "git_commits_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.gitCommitsUrl
                                  )
                                , ( "git_refs_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.gitRefsUrl
                                  )
                                , ( "git_tags_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.gitTagsUrl
                                  )
                                , ( "hooks_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.hooksUrl
                                  )
                                , ( "html_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.htmlUrl
                                  )
                                , ( "id"
                                  , Json.Encode.int rec_0_3_1_1_0_32_1_0_0.id
                                  )
                                , ( "is_template"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.isTemplate
                                  )
                                , ( "node_id"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.nodeId
                                  )
                                , ( "issue_comment_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.issueCommentUrl
                                  )
                                , ( "issue_events_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.issueEventsUrl
                                  )
                                , ( "issues_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.issuesUrl
                                  )
                                , ( "keys_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.keysUrl
                                  )
                                , ( "labels_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.labelsUrl
                                  )
                                , ( "languages_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.languagesUrl
                                  )
                                , ( "merges_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.mergesUrl
                                  )
                                , ( "milestones_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.milestonesUrl
                                  )
                                , ( "name"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.name
                                  )
                                , ( "notifications_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.notificationsUrl
                                  )
                                , ( "owner"
                                  , (\rec_0_36_1_1_0_3_1_1_0_32_1_0_0 ->
                                        Json.Encode.object
                                            [ ( "avatar_url"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.avatarUrl
                                              )
                                            , ( "events_url"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.eventsUrl
                                              )
                                            , ( "followers_url"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.followersUrl
                                              )
                                            , ( "following_url"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.followingUrl
                                              )
                                            , ( "gists_url"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.gistsUrl
                                              )
                                            , ( "gravatar_id"
                                              , (\nullableValue ->
                                                    case nullableValue of
                                                        Null ->
                                                            Json.Encode.null

                                                        Present value ->
                                                            Json.Encode.string
                                                                value
                                                )
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.gravatarId
                                              )
                                            , ( "html_url"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.htmlUrl
                                              )
                                            , ( "id"
                                              , Json.Encode.int
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.id
                                              )
                                            , ( "node_id"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.nodeId
                                              )
                                            , ( "login"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.login
                                              )
                                            , ( "organizations_url"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.organizationsUrl
                                              )
                                            , ( "received_events_url"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.receivedEventsUrl
                                              )
                                            , ( "repos_url"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.reposUrl
                                              )
                                            , ( "site_admin"
                                              , Json.Encode.bool
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.siteAdmin
                                              )
                                            , ( "starred_url"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.starredUrl
                                              )
                                            , ( "subscriptions_url"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.subscriptionsUrl
                                              )
                                            , ( "type"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.type_
                                              )
                                            , ( "url"
                                              , Json.Encode.string
                                                    rec_0_36_1_1_0_3_1_1_0_32_1_0_0.url
                                              )
                                            ]
                                    )
                                        rec_0_3_1_1_0_32_1_0_0.owner
                                  )
                                , ( "private"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.private
                                  )
                                , ( "pulls_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.pullsUrl
                                  )
                                , ( "releases_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.releasesUrl
                                  )
                                , ( "stargazers_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.stargazersUrl
                                  )
                                , ( "statuses_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.statusesUrl
                                  )
                                , ( "subscribers_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.subscribersUrl
                                  )
                                , ( "subscription_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.subscriptionUrl
                                  )
                                , ( "tags_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.tagsUrl
                                  )
                                , ( "teams_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.teamsUrl
                                  )
                                , ( "trees_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.treesUrl
                                  )
                                , ( "url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.url
                                  )
                                , ( "clone_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.cloneUrl
                                  )
                                , ( "default_branch"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.defaultBranch
                                  )
                                , ( "forks"
                                  , Json.Encode.int rec_0_3_1_1_0_32_1_0_0.forks
                                  )
                                , ( "forks_count"
                                  , Json.Encode.int
                                        rec_0_3_1_1_0_32_1_0_0.forksCount
                                  )
                                , ( "git_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.gitUrl
                                  )
                                , ( "has_downloads"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.hasDownloads
                                  )
                                , ( "has_issues"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.hasIssues
                                  )
                                , ( "has_projects"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.hasProjects
                                  )
                                , ( "has_wiki"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.hasWiki
                                  )
                                , ( "has_pages"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.hasPages
                                  )
                                , ( "homepage"
                                  , (\nullableValue ->
                                        case nullableValue of
                                            Null ->
                                                Json.Encode.null

                                            Present value ->
                                                Json.Encode.string value
                                    )
                                        rec_0_3_1_1_0_32_1_0_0.homepage
                                  )
                                , ( "language"
                                  , (\nullableValue ->
                                        case nullableValue of
                                            Null ->
                                                Json.Encode.null

                                            Present value ->
                                                Json.Encode.string value
                                    )
                                        rec_0_3_1_1_0_32_1_0_0.language
                                  )
                                , ( "master_branch"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.masterBranch
                                  )
                                , ( "archived"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.archived
                                  )
                                , ( "disabled"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.disabled
                                  )
                                , ( "visibility"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.visibility
                                  )
                                , ( "mirror_url"
                                  , (\nullableValue ->
                                        case nullableValue of
                                            Null ->
                                                Json.Encode.null

                                            Present value ->
                                                Json.Encode.string value
                                    )
                                        rec_0_3_1_1_0_32_1_0_0.mirrorUrl
                                  )
                                , ( "open_issues"
                                  , Json.Encode.int
                                        rec_0_3_1_1_0_32_1_0_0.openIssues
                                  )
                                , ( "open_issues_count"
                                  , Json.Encode.int
                                        rec_0_3_1_1_0_32_1_0_0.openIssuesCount
                                  )
                                , ( "permissions"
                                  , (\rec_0_67_1_1_0_3_1_1_0_32_1_0_0 ->
                                        Json.Encode.object
                                            [ ( "admin"
                                              , Json.Encode.bool
                                                    rec_0_67_1_1_0_3_1_1_0_32_1_0_0.admin
                                              )
                                            , ( "maintain"
                                              , Json.Encode.bool
                                                    rec_0_67_1_1_0_3_1_1_0_32_1_0_0.maintain
                                              )
                                            , ( "push"
                                              , Json.Encode.bool
                                                    rec_0_67_1_1_0_3_1_1_0_32_1_0_0.push
                                              )
                                            , ( "triage"
                                              , Json.Encode.bool
                                                    rec_0_67_1_1_0_3_1_1_0_32_1_0_0.triage
                                              )
                                            , ( "pull"
                                              , Json.Encode.bool
                                                    rec_0_67_1_1_0_3_1_1_0_32_1_0_0.pull
                                              )
                                            ]
                                    )
                                        rec_0_3_1_1_0_32_1_0_0.permissions
                                  )
                                , ( "temp_clone_token"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.tempCloneToken
                                  )
                                , ( "allow_merge_commit"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.allowMergeCommit
                                  )
                                , ( "allow_squash_merge"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.allowSquashMerge
                                  )
                                , ( "allow_rebase_merge"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.allowRebaseMerge
                                  )
                                , ( "license"
                                  , Debug.todo "decode anyOf"
                                        rec_0_3_1_1_0_32_1_0_0.license
                                  )
                                , ( "pushed_at"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.pushedAt
                                  )
                                , ( "size"
                                  , Json.Encode.int rec_0_3_1_1_0_32_1_0_0.size
                                  )
                                , ( "ssh_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.sshUrl
                                  )
                                , ( "stargazers_count"
                                  , Json.Encode.int
                                        rec_0_3_1_1_0_32_1_0_0.stargazersCount
                                  )
                                , ( "svn_url"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.svnUrl
                                  )
                                , ( "topics"
                                  , Json.Encode.list Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.topics
                                  )
                                , ( "watchers"
                                  , Json.Encode.int
                                        rec_0_3_1_1_0_32_1_0_0.watchers
                                  )
                                , ( "watchers_count"
                                  , Json.Encode.int
                                        rec_0_3_1_1_0_32_1_0_0.watchersCount
                                  )
                                , ( "created_at"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.createdAt
                                  )
                                , ( "updated_at"
                                  , Json.Encode.string
                                        rec_0_3_1_1_0_32_1_0_0.updatedAt
                                  )
                                , ( "allow_forking"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.allowForking
                                  )
                                , ( "web_commit_signoff_required"
                                  , Json.Encode.bool
                                        rec_0_3_1_1_0_32_1_0_0.webCommitSignoffRequired
                                  )
                                ]
                        )
                            rec0.repo
                      )
                    , ( "sha", Json.Encode.string rec0.sha )
                    , ( "user"
                      , (\rec_0_5_1_1_0_32_1_0_0 ->
                            Json.Encode.object
                                [ ( "avatar_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.avatarUrl
                                  )
                                , ( "events_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.eventsUrl
                                  )
                                , ( "followers_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.followersUrl
                                  )
                                , ( "following_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.followingUrl
                                  )
                                , ( "gists_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.gistsUrl
                                  )
                                , ( "gravatar_id"
                                  , (\nullableValue ->
                                        case nullableValue of
                                            Null ->
                                                Json.Encode.null

                                            Present value ->
                                                Json.Encode.string value
                                    )
                                        rec_0_5_1_1_0_32_1_0_0.gravatarId
                                  )
                                , ( "html_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.htmlUrl
                                  )
                                , ( "id"
                                  , Json.Encode.int rec_0_5_1_1_0_32_1_0_0.id
                                  )
                                , ( "node_id"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.nodeId
                                  )
                                , ( "login"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.login
                                  )
                                , ( "organizations_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.organizationsUrl
                                  )
                                , ( "received_events_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.receivedEventsUrl
                                  )
                                , ( "repos_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.reposUrl
                                  )
                                , ( "site_admin"
                                  , Json.Encode.bool
                                        rec_0_5_1_1_0_32_1_0_0.siteAdmin
                                  )
                                , ( "starred_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.starredUrl
                                  )
                                , ( "subscriptions_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.subscriptionsUrl
                                  )
                                , ( "type"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.type_
                                  )
                                , ( "url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_32_1_0_0.url
                                  )
                                ]
                        )
                            rec0.user
                      )
                    ]
            )
                rec.base
          )
        , ( "_links"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "comments", encodeLink rec0.comments )
                    , ( "commits", encodeLink rec0.commits )
                    , ( "statuses", encodeLink rec0.statuses )
                    , ( "html", encodeLink rec0.html )
                    , ( "issue", encodeLink rec0.issue )
                    , ( "review_comments", encodeLink rec0.reviewComments )
                    , ( "review_comment", encodeLink rec0.reviewComment )
                    , ( "self", encodeLink rec0.self )
                    ]
            )
                rec.links
          )
        , ( "author_association"
          , encodeAuthorAssociation rec.authorAssociation
          )
        , ( "auto_merge", encodeAutoMerge rec.autoMerge )
        , ( "draft", Json.Encode.bool rec.draft )
        , ( "merged", Json.Encode.bool rec.merged )
        , ( "mergeable"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.mergeable
          )
        , ( "rebaseable"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.rebaseable
          )
        , ( "mergeable_state", Json.Encode.string rec.mergeableState )
        , ( "merged_by", Debug.todo "decode anyOf" rec.mergedBy )
        , ( "comments", Json.Encode.int rec.comments )
        , ( "review_comments", Json.Encode.int rec.reviewComments )
        , ( "maintainer_can_modify", Json.Encode.bool rec.maintainerCanModify )
        , ( "commits", Json.Encode.int rec.commits )
        , ( "additions", Json.Encode.int rec.additions )
        , ( "deletions", Json.Encode.int rec.deletions )
        , ( "changed_files", Json.Encode.int rec.changedFiles )
        ]


type alias PublicUser =
    { login : String
    , id : Int
    , nodeId : String
    , avatarUrl : String
    , gravatarId : Nullable String
    , url : String
    , htmlUrl : String
    , followersUrl : String
    , followingUrl : String
    , gistsUrl : String
    , starredUrl : String
    , subscriptionsUrl : String
    , organizationsUrl : String
    , reposUrl : String
    , eventsUrl : String
    , receivedEventsUrl : String
    , type_ : String
    , siteAdmin : Bool
    , name : Nullable String
    , company : Nullable String
    , blog : Nullable String
    , location : Nullable String
    , email : Nullable String
    , hireable : Nullable Bool
    , bio : Nullable String
    , twitterUsername : Nullable String
    , publicRepos : Int
    , publicGists : Int
    , followers : Int
    , following : Int
    , createdAt : String
    , updatedAt : String
    , plan :
        { collaborators : Int, name : String, space : Int, privateRepos : Int }
    , suspendedAt : Nullable String
    , privateGists : Int
    , totalPrivateRepos : Int
    , ownedPrivateRepos : Int
    , diskUsage : Int
    , collaborators : Int
    }


decodePublicUser : Json.Decode.Decoder PublicUser
decodePublicUser =
    Json.Decode.succeed
     (\login id nodeId avatarUrl gravatarId url htmlUrl followersUrl followingUrl gistsUrl starredUrl subscriptionsUrl organizationsUrl reposUrl eventsUrl receivedEventsUrl type_ siteAdmin name company blog location email hireable bio twitterUsername publicRepos publicGists followers following createdAt updatedAt plan suspendedAt privateGists totalPrivateRepos ownedPrivateRepos diskUsage collaborators ->
         { login = login
         , id = id
         , nodeId = nodeId
         , avatarUrl = avatarUrl
         , gravatarId = gravatarId
         , url = url
         , htmlUrl = htmlUrl
         , followersUrl = followersUrl
         , followingUrl = followingUrl
         , gistsUrl = gistsUrl
         , starredUrl = starredUrl
         , subscriptionsUrl = subscriptionsUrl
         , organizationsUrl = organizationsUrl
         , reposUrl = reposUrl
         , eventsUrl = eventsUrl
         , receivedEventsUrl = receivedEventsUrl
         , type_ = type_
         , siteAdmin = siteAdmin
         , name = name
         , company = company
         , blog = blog
         , location = location
         , email = email
         , hireable = hireable
         , bio = bio
         , twitterUsername = twitterUsername
         , publicRepos = publicRepos
         , publicGists = publicGists
         , followers = followers
         , following = following
         , createdAt = createdAt
         , updatedAt = updatedAt
         , plan = plan
         , suspendedAt = suspendedAt
         , privateGists = privateGists
         , totalPrivateRepos = totalPrivateRepos
         , ownedPrivateRepos = ownedPrivateRepos
         , diskUsage = diskUsage
         , collaborators = collaborators
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "login" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "avatar_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "gravatar_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "followers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "following_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "gists_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "starred_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscriptions_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organizations_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repos_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "received_events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "site_admin" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "company"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "blog"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "location"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "email"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "hireable"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "bio"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "twitter_username"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_repos" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_gists" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "followers" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "following" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "plan"
                (Json.Decode.succeed
                  (\collaborators name space privateRepos ->
                      { collaborators = collaborators
                      , name = name
                      , space = space
                      , privateRepos = privateRepos
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "collaborators" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "space" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "private_repos" Json.Decode.int)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "suspended_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "private_gists" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "total_private_repos" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "owned_private_repos" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "disk_usage" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "collaborators" Json.Decode.int)


encodePublicUser : PublicUser -> Json.Encode.Value
encodePublicUser rec =
    Json.Encode.object
        [ ( "login", Json.Encode.string rec.login )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "avatar_url", Json.Encode.string rec.avatarUrl )
        , ( "gravatar_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.gravatarId
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "followers_url", Json.Encode.string rec.followersUrl )
        , ( "following_url", Json.Encode.string rec.followingUrl )
        , ( "gists_url", Json.Encode.string rec.gistsUrl )
        , ( "starred_url", Json.Encode.string rec.starredUrl )
        , ( "subscriptions_url", Json.Encode.string rec.subscriptionsUrl )
        , ( "organizations_url", Json.Encode.string rec.organizationsUrl )
        , ( "repos_url", Json.Encode.string rec.reposUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "received_events_url", Json.Encode.string rec.receivedEventsUrl )
        , ( "type", Json.Encode.string rec.type_ )
        , ( "site_admin", Json.Encode.bool rec.siteAdmin )
        , ( "name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.name
          )
        , ( "company"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.company
          )
        , ( "blog"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.blog
          )
        , ( "location"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.location
          )
        , ( "email"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.email
          )
        , ( "hireable"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.hireable
          )
        , ( "bio"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.bio
          )
        , ( "twitter_username"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.twitterUsername
          )
        , ( "public_repos", Json.Encode.int rec.publicRepos )
        , ( "public_gists", Json.Encode.int rec.publicGists )
        , ( "followers", Json.Encode.int rec.followers )
        , ( "following", Json.Encode.int rec.following )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "plan"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "collaborators", Json.Encode.int rec0.collaborators )
                    , ( "name", Json.Encode.string rec0.name )
                    , ( "space", Json.Encode.int rec0.space )
                    , ( "private_repos", Json.Encode.int rec0.privateRepos )
                    ]
            )
                rec.plan
          )
        , ( "suspended_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.suspendedAt
          )
        , ( "private_gists", Json.Encode.int rec.privateGists )
        , ( "total_private_repos", Json.Encode.int rec.totalPrivateRepos )
        , ( "owned_private_repos", Json.Encode.int rec.ownedPrivateRepos )
        , ( "disk_usage", Json.Encode.int rec.diskUsage )
        , ( "collaborators", Json.Encode.int rec.collaborators )
        ]


type alias ProtectedBranchRequiredStatusCheck =
    { url : String
    , enforcementLevel : String
    , contexts : List String
    , checks : List { context : String, appId : Nullable Int }
    , contextsUrl : String
    , strict : Bool
    }


decodeProtectedBranchRequiredStatusCheck :
    Json.Decode.Decoder ProtectedBranchRequiredStatusCheck
decodeProtectedBranchRequiredStatusCheck =
    Json.Decode.succeed
     (\url enforcementLevel contexts checks contextsUrl strict ->
         { url = url
         , enforcementLevel = enforcementLevel
         , contexts = contexts
         , checks = checks
         , contextsUrl = contextsUrl
         , strict = strict
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "enforcement_level" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contexts" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "checks"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\context appId -> { context = context, appId = appId })
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "context" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "app_id"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.int
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contexts_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "strict" Json.Decode.bool)


encodeProtectedBranchRequiredStatusCheck :
    ProtectedBranchRequiredStatusCheck -> Json.Encode.Value
encodeProtectedBranchRequiredStatusCheck rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "enforcement_level", Json.Encode.string rec.enforcementLevel )
        , ( "contexts", Json.Encode.list Json.Encode.string rec.contexts )
        , ( "checks"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "context", Json.Encode.string rec0.context )
                        , ( "app_id"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.int value
                            )
                                rec0.appId
                          )
                        ]
                )
                rec.checks
          )
        , ( "contexts_url", Json.Encode.string rec.contextsUrl )
        , ( "strict", Json.Encode.bool rec.strict )
        ]


type alias ProtectedBranchPullRequestReview =
    { url : String
    , dismissalRestrictions :
        { users : List SimpleUser
        , teams : List Team
        , apps : List Integration
        , url : String
        , usersUrl : String
        , teamsUrl : String
        }
    , bypassPullRequestAllowances :
        { users : List SimpleUser, teams : List Team, apps : List Integration }
    , dismissStaleReviews : Bool
    , requireCodeOwnerReviews : Bool
    , requiredApprovingReviewCount : Int
    }


decodeProtectedBranchPullRequestReview :
    Json.Decode.Decoder ProtectedBranchPullRequestReview
decodeProtectedBranchPullRequestReview =
    Json.Decode.succeed
     (\url dismissalRestrictions bypassPullRequestAllowances dismissStaleReviews requireCodeOwnerReviews requiredApprovingReviewCount ->
         { url = url
         , dismissalRestrictions = dismissalRestrictions
         , bypassPullRequestAllowances = bypassPullRequestAllowances
         , dismissStaleReviews = dismissStaleReviews
         , requireCodeOwnerReviews = requireCodeOwnerReviews
         , requiredApprovingReviewCount = requiredApprovingReviewCount
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissal_restrictions"
                (Json.Decode.succeed
                  (\users teams apps url usersUrl teamsUrl ->
                      { users = users
                      , teams = teams
                      , apps = apps
                      , url = url
                      , usersUrl = usersUrl
                      , teamsUrl = teamsUrl
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "users"
                            (Json.Decode.list decodeSimpleUser)
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "teams" (Json.Decode.list decodeTeam)
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "apps"
                            (Json.Decode.list decodeIntegration)
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "users_url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "teams_url" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "bypass_pull_request_allowances"
                (Json.Decode.succeed
                  (\users teams apps ->
                      { users = users, teams = teams, apps = apps }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "users"
                            (Json.Decode.list decodeSimpleUser)
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "teams" (Json.Decode.list decodeTeam)
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "apps"
                            (Json.Decode.list decodeIntegration)
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "dismiss_stale_reviews" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "require_code_owner_reviews" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "required_approving_review_count" Json.Decode.int
            )


encodeProtectedBranchPullRequestReview :
    ProtectedBranchPullRequestReview -> Json.Encode.Value
encodeProtectedBranchPullRequestReview rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "dismissal_restrictions"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "users", Json.Encode.list encodeSimpleUser rec0.users )
                    , ( "teams", Json.Encode.list encodeTeam rec0.teams )
                    , ( "apps", Json.Encode.list encodeIntegration rec0.apps )
                    , ( "url", Json.Encode.string rec0.url )
                    , ( "users_url", Json.Encode.string rec0.usersUrl )
                    , ( "teams_url", Json.Encode.string rec0.teamsUrl )
                    ]
            )
                rec.dismissalRestrictions
          )
        , ( "bypass_pull_request_allowances"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "users", Json.Encode.list encodeSimpleUser rec0.users )
                    , ( "teams", Json.Encode.list encodeTeam rec0.teams )
                    , ( "apps", Json.Encode.list encodeIntegration rec0.apps )
                    ]
            )
                rec.bypassPullRequestAllowances
          )
        , ( "dismiss_stale_reviews", Json.Encode.bool rec.dismissStaleReviews )
        , ( "require_code_owner_reviews"
          , Json.Encode.bool rec.requireCodeOwnerReviews
          )
        , ( "required_approving_review_count"
          , Json.Encode.int rec.requiredApprovingReviewCount
          )
        ]


type alias ProtectedBranchAdminEnforced =
    { url : String, enabled : Bool }


decodeProtectedBranchAdminEnforced :
    Json.Decode.Decoder ProtectedBranchAdminEnforced
decodeProtectedBranchAdminEnforced =
    Json.Decode.succeed (\url enabled -> { url = url, enabled = enabled })
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "enabled" Json.Decode.bool)


encodeProtectedBranchAdminEnforced :
    ProtectedBranchAdminEnforced -> Json.Encode.Value
encodeProtectedBranchAdminEnforced rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "enabled", Json.Encode.bool rec.enabled )
        ]


type alias ProtectedBranch =
    { url : String
    , requiredStatusChecks : StatusCheckPolicy
    , requiredPullRequestReviews :
        { url : String
        , dismissStaleReviews : Bool
        , requireCodeOwnerReviews : Bool
        , requiredApprovingReviewCount : Int
        , dismissalRestrictions :
            { url : String
            , usersUrl : String
            , teamsUrl : String
            , users : List SimpleUser
            , teams : List Team
            , apps : List Integration
            }
        , bypassPullRequestAllowances :
            { users : List SimpleUser
            , teams : List Team
            , apps : List Integration
            }
        }
    , requiredSignatures : { url : String, enabled : Bool }
    , enforceAdmins : { url : String, enabled : Bool }
    , requiredLinearHistory : { enabled : Bool }
    , allowForcePushes : { enabled : Bool }
    , allowDeletions : { enabled : Bool }
    , restrictions : BranchRestrictionPolicy
    , requiredConversationResolution : { enabled : Bool }
    , blockCreations : { enabled : Bool }
    }


decodeProtectedBranch : Json.Decode.Decoder ProtectedBranch
decodeProtectedBranch =
    Json.Decode.succeed
     (\url requiredStatusChecks requiredPullRequestReviews requiredSignatures enforceAdmins requiredLinearHistory allowForcePushes allowDeletions restrictions requiredConversationResolution blockCreations ->
         { url = url
         , requiredStatusChecks = requiredStatusChecks
         , requiredPullRequestReviews = requiredPullRequestReviews
         , requiredSignatures = requiredSignatures
         , enforceAdmins = enforceAdmins
         , requiredLinearHistory = requiredLinearHistory
         , allowForcePushes = allowForcePushes
         , allowDeletions = allowDeletions
         , restrictions = restrictions
         , requiredConversationResolution = requiredConversationResolution
         , blockCreations = blockCreations
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "required_status_checks" decodeStatusCheckPolicy)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "required_pull_request_reviews"
                (Json.Decode.succeed
                  (\url dismissStaleReviews requireCodeOwnerReviews requiredApprovingReviewCount dismissalRestrictions bypassPullRequestAllowances ->
                      { url = url
                      , dismissStaleReviews = dismissStaleReviews
                      , requireCodeOwnerReviews = requireCodeOwnerReviews
                      , requiredApprovingReviewCount =
                          requiredApprovingReviewCount
                      , dismissalRestrictions = dismissalRestrictions
                      , bypassPullRequestAllowances =
                          bypassPullRequestAllowances
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "dismiss_stale_reviews"
                            Json.Decode.bool
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "require_code_owner_reviews"
                            Json.Decode.bool
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "required_approving_review_count"
                            Json.Decode.int
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "dismissal_restrictions"
                            (Json.Decode.succeed
                              (\url usersUrl teamsUrl users teams apps ->
                                  { url = url
                                  , usersUrl = usersUrl
                                  , teamsUrl = teamsUrl
                                  , users = users
                                  , teams = teams
                                  , apps = apps
                                  }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "url" Json.Decode.string)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "users_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "teams_url"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "users"
                                        (Json.Decode.list decodeSimpleUser)
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "teams"
                                        (Json.Decode.list decodeTeam)
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "apps"
                                        (Json.Decode.list decodeIntegration)
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "bypass_pull_request_allowances"
                            (Json.Decode.succeed
                              (\users teams apps ->
                                  { users = users, teams = teams, apps = apps }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "users"
                                        (Json.Decode.list decodeSimpleUser)
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "teams"
                                        (Json.Decode.list decodeTeam)
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "apps"
                                        (Json.Decode.list decodeIntegration)
                                    )
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "required_signatures"
                (Json.Decode.succeed
                  (\url enabled -> { url = url, enabled = enabled })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enabled" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "enforce_admins"
                (Json.Decode.succeed
                  (\url enabled -> { url = url, enabled = enabled })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enabled" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "required_linear_history"
                (Json.Decode.succeed (\enabled -> { enabled = enabled })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enabled" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "allow_force_pushes"
                (Json.Decode.succeed (\enabled -> { enabled = enabled })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enabled" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "allow_deletions"
                (Json.Decode.succeed (\enabled -> { enabled = enabled })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enabled" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "restrictions" decodeBranchRestrictionPolicy)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "required_conversation_resolution"
                (Json.Decode.succeed (\enabled -> { enabled = enabled })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enabled" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "block_creations"
                (Json.Decode.succeed (\enabled -> { enabled = enabled })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enabled" Json.Decode.bool)
                )
            )


encodeProtectedBranch : ProtectedBranch -> Json.Encode.Value
encodeProtectedBranch rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "required_status_checks"
          , encodeStatusCheckPolicy rec.requiredStatusChecks
          )
        , ( "required_pull_request_reviews"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "url", Json.Encode.string rec0.url )
                    , ( "dismiss_stale_reviews"
                      , Json.Encode.bool rec0.dismissStaleReviews
                      )
                    , ( "require_code_owner_reviews"
                      , Json.Encode.bool rec0.requireCodeOwnerReviews
                      )
                    , ( "required_approving_review_count"
                      , Json.Encode.int rec0.requiredApprovingReviewCount
                      )
                    , ( "dismissal_restrictions"
                      , (\rec_0_5_1_1_0_3_1_0_0 ->
                            Json.Encode.object
                                [ ( "url"
                                  , Json.Encode.string rec_0_5_1_1_0_3_1_0_0.url
                                  )
                                , ( "users_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_3_1_0_0.usersUrl
                                  )
                                , ( "teams_url"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_3_1_0_0.teamsUrl
                                  )
                                , ( "users"
                                  , Json.Encode.list encodeSimpleUser
                                        rec_0_5_1_1_0_3_1_0_0.users
                                  )
                                , ( "teams"
                                  , Json.Encode.list encodeTeam
                                        rec_0_5_1_1_0_3_1_0_0.teams
                                  )
                                , ( "apps"
                                  , Json.Encode.list encodeIntegration
                                        rec_0_5_1_1_0_3_1_0_0.apps
                                  )
                                ]
                        )
                            rec0.dismissalRestrictions
                      )
                    , ( "bypass_pull_request_allowances"
                      , (\rec_0_6_1_1_0_3_1_0_0 ->
                            Json.Encode.object
                                [ ( "users"
                                  , Json.Encode.list encodeSimpleUser
                                        rec_0_6_1_1_0_3_1_0_0.users
                                  )
                                , ( "teams"
                                  , Json.Encode.list encodeTeam
                                        rec_0_6_1_1_0_3_1_0_0.teams
                                  )
                                , ( "apps"
                                  , Json.Encode.list encodeIntegration
                                        rec_0_6_1_1_0_3_1_0_0.apps
                                  )
                                ]
                        )
                            rec0.bypassPullRequestAllowances
                      )
                    ]
            )
                rec.requiredPullRequestReviews
          )
        , ( "required_signatures"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "url", Json.Encode.string rec0.url )
                    , ( "enabled", Json.Encode.bool rec0.enabled )
                    ]
            )
                rec.requiredSignatures
          )
        , ( "enforce_admins"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "url", Json.Encode.string rec0.url )
                    , ( "enabled", Json.Encode.bool rec0.enabled )
                    ]
            )
                rec.enforceAdmins
          )
        , ( "required_linear_history"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "enabled", Json.Encode.bool rec0.enabled ) ]
            )
                rec.requiredLinearHistory
          )
        , ( "allow_force_pushes"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "enabled", Json.Encode.bool rec0.enabled ) ]
            )
                rec.allowForcePushes
          )
        , ( "allow_deletions"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "enabled", Json.Encode.bool rec0.enabled ) ]
            )
                rec.allowDeletions
          )
        , ( "restrictions", encodeBranchRestrictionPolicy rec.restrictions )
        , ( "required_conversation_resolution"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "enabled", Json.Encode.bool rec0.enabled ) ]
            )
                rec.requiredConversationResolution
          )
        , ( "block_creations"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "enabled", Json.Encode.bool rec0.enabled ) ]
            )
                rec.blockCreations
          )
        ]


type alias ProjectColumn =
    { url : String
    , projectUrl : String
    , cardsUrl : String
    , id : Int
    , nodeId : String
    , name : String
    , createdAt : String
    , updatedAt : String
    }


decodeProjectColumn : Json.Decode.Decoder ProjectColumn
decodeProjectColumn =
    Json.Decode.succeed
     (\url projectUrl cardsUrl id nodeId name createdAt updatedAt ->
         { url = url
         , projectUrl = projectUrl
         , cardsUrl = cardsUrl
         , id = id
         , nodeId = nodeId
         , name = name
         , createdAt = createdAt
         , updatedAt = updatedAt
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "project_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "cards_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)


encodeProjectColumn : ProjectColumn -> Json.Encode.Value
encodeProjectColumn rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "project_url", Json.Encode.string rec.projectUrl )
        , ( "cards_url", Json.Encode.string rec.cardsUrl )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        ]


type alias ProjectCollaboratorPermission =
    { permission : String, user : Debug.Todo }


decodeProjectCollaboratorPermission :
    Json.Decode.Decoder ProjectCollaboratorPermission
decodeProjectCollaboratorPermission =
    Json.Decode.succeed
     (\permission user -> { permission = permission, user = user })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "permission" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )


encodeProjectCollaboratorPermission :
    ProjectCollaboratorPermission -> Json.Encode.Value
encodeProjectCollaboratorPermission rec =
    Json.Encode.object
        [ ( "permission", Json.Encode.string rec.permission )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        ]


type alias ProjectCard =
    { url : String
    , id : Int
    , nodeId : String
    , note : Nullable String
    , creator : Debug.Todo
    , createdAt : String
    , updatedAt : String
    , archived : Bool
    , columnName : String
    , projectId : String
    , columnUrl : String
    , contentUrl : String
    , projectUrl : String
    }


decodeProjectCard : Json.Decode.Decoder ProjectCard
decodeProjectCard =
    Json.Decode.succeed
     (\url id nodeId note creator createdAt updatedAt archived columnName projectId columnUrl contentUrl projectUrl ->
         { url = url
         , id = id
         , nodeId = nodeId
         , note = note
         , creator = creator
         , createdAt = createdAt
         , updatedAt = updatedAt
         , archived = archived
         , columnName = columnName
         , projectId = projectId
         , columnUrl = columnUrl
         , contentUrl = contentUrl
         , projectUrl = projectUrl
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "note"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "creator"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archived" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "column_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "project_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "column_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "content_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "project_url" Json.Decode.string)


encodeProjectCard : ProjectCard -> Json.Encode.Value
encodeProjectCard rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "note"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.note
          )
        , ( "creator", Debug.todo "decode anyOf" rec.creator )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "archived", Json.Encode.bool rec.archived )
        , ( "column_name", Json.Encode.string rec.columnName )
        , ( "project_id", Json.Encode.string rec.projectId )
        , ( "column_url", Json.Encode.string rec.columnUrl )
        , ( "content_url", Json.Encode.string rec.contentUrl )
        , ( "project_url", Json.Encode.string rec.projectUrl )
        ]


type alias Project =
    { ownerUrl : String
    , url : String
    , htmlUrl : String
    , columnsUrl : String
    , id : Int
    , nodeId : String
    , name : String
    , body : Nullable String
    , number : Int
    , state : String
    , creator : Debug.Todo
    , createdAt : String
    , updatedAt : String
    , organizationPermission : String
    , private : Bool
    }


decodeProject : Json.Decode.Decoder Project
decodeProject =
    Json.Decode.succeed
     (\ownerUrl url htmlUrl columnsUrl id nodeId name body number state creator createdAt updatedAt organizationPermission private ->
         { ownerUrl = ownerUrl
         , url = url
         , htmlUrl = htmlUrl
         , columnsUrl = columnsUrl
         , id = id
         , nodeId = nodeId
         , name = name
         , body = body
         , number = number
         , state = state
         , creator = creator
         , createdAt = createdAt
         , updatedAt = updatedAt
         , organizationPermission = organizationPermission
         , private = private
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "owner_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "columns_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "body"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "number" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "creator"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_permission" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "private" Json.Decode.bool)


encodeProject : Project -> Json.Encode.Value
encodeProject rec =
    Json.Encode.object
        [ ( "owner_url", Json.Encode.string rec.ownerUrl )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "columns_url", Json.Encode.string rec.columnsUrl )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "body"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.body
          )
        , ( "number", Json.Encode.int rec.number )
        , ( "state", Json.Encode.string rec.state )
        , ( "creator", Debug.todo "decode anyOf" rec.creator )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "organization_permission"
          , Json.Encode.string rec.organizationPermission
          )
        , ( "private", Json.Encode.bool rec.private )
        ]


type alias PrivateUser =
    { login : String
    , id : Int
    , nodeId : String
    , avatarUrl : String
    , gravatarId : Nullable String
    , url : String
    , htmlUrl : String
    , followersUrl : String
    , followingUrl : String
    , gistsUrl : String
    , starredUrl : String
    , subscriptionsUrl : String
    , organizationsUrl : String
    , reposUrl : String
    , eventsUrl : String
    , receivedEventsUrl : String
    , type_ : String
    , siteAdmin : Bool
    , name : Nullable String
    , company : Nullable String
    , blog : Nullable String
    , location : Nullable String
    , email : Nullable String
    , hireable : Nullable Bool
    , bio : Nullable String
    , twitterUsername : Nullable String
    , publicRepos : Int
    , publicGists : Int
    , followers : Int
    , following : Int
    , createdAt : String
    , updatedAt : String
    , privateGists : Int
    , totalPrivateRepos : Int
    , ownedPrivateRepos : Int
    , diskUsage : Int
    , collaborators : Int
    , twoFactorAuthentication : Bool
    , plan :
        { collaborators : Int, name : String, space : Int, privateRepos : Int }
    , suspendedAt : Nullable String
    , businessPlus : Bool
    , ldapDn : String
    }


decodePrivateUser : Json.Decode.Decoder PrivateUser
decodePrivateUser =
    Json.Decode.succeed
     (\login id nodeId avatarUrl gravatarId url htmlUrl followersUrl followingUrl gistsUrl starredUrl subscriptionsUrl organizationsUrl reposUrl eventsUrl receivedEventsUrl type_ siteAdmin name company blog location email hireable bio twitterUsername publicRepos publicGists followers following createdAt updatedAt privateGists totalPrivateRepos ownedPrivateRepos diskUsage collaborators twoFactorAuthentication plan suspendedAt businessPlus ldapDn ->
         { login = login
         , id = id
         , nodeId = nodeId
         , avatarUrl = avatarUrl
         , gravatarId = gravatarId
         , url = url
         , htmlUrl = htmlUrl
         , followersUrl = followersUrl
         , followingUrl = followingUrl
         , gistsUrl = gistsUrl
         , starredUrl = starredUrl
         , subscriptionsUrl = subscriptionsUrl
         , organizationsUrl = organizationsUrl
         , reposUrl = reposUrl
         , eventsUrl = eventsUrl
         , receivedEventsUrl = receivedEventsUrl
         , type_ = type_
         , siteAdmin = siteAdmin
         , name = name
         , company = company
         , blog = blog
         , location = location
         , email = email
         , hireable = hireable
         , bio = bio
         , twitterUsername = twitterUsername
         , publicRepos = publicRepos
         , publicGists = publicGists
         , followers = followers
         , following = following
         , createdAt = createdAt
         , updatedAt = updatedAt
         , privateGists = privateGists
         , totalPrivateRepos = totalPrivateRepos
         , ownedPrivateRepos = ownedPrivateRepos
         , diskUsage = diskUsage
         , collaborators = collaborators
         , twoFactorAuthentication = twoFactorAuthentication
         , plan = plan
         , suspendedAt = suspendedAt
         , businessPlus = businessPlus
         , ldapDn = ldapDn
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "login" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "avatar_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "gravatar_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "followers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "following_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "gists_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "starred_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscriptions_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organizations_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repos_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "received_events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "site_admin" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "company"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "blog"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "location"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "email"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "hireable"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "bio"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "twitter_username"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_repos" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_gists" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "followers" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "following" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "private_gists" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "total_private_repos" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "owned_private_repos" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "disk_usage" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "collaborators" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "two_factor_authentication" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "plan"
                (Json.Decode.succeed
                  (\collaborators name space privateRepos ->
                      { collaborators = collaborators
                      , name = name
                      , space = space
                      , privateRepos = privateRepos
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "collaborators" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "space" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "private_repos" Json.Decode.int)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "suspended_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "business_plus" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ldap_dn" Json.Decode.string)


encodePrivateUser : PrivateUser -> Json.Encode.Value
encodePrivateUser rec =
    Json.Encode.object
        [ ( "login", Json.Encode.string rec.login )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "avatar_url", Json.Encode.string rec.avatarUrl )
        , ( "gravatar_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.gravatarId
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "followers_url", Json.Encode.string rec.followersUrl )
        , ( "following_url", Json.Encode.string rec.followingUrl )
        , ( "gists_url", Json.Encode.string rec.gistsUrl )
        , ( "starred_url", Json.Encode.string rec.starredUrl )
        , ( "subscriptions_url", Json.Encode.string rec.subscriptionsUrl )
        , ( "organizations_url", Json.Encode.string rec.organizationsUrl )
        , ( "repos_url", Json.Encode.string rec.reposUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "received_events_url", Json.Encode.string rec.receivedEventsUrl )
        , ( "type", Json.Encode.string rec.type_ )
        , ( "site_admin", Json.Encode.bool rec.siteAdmin )
        , ( "name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.name
          )
        , ( "company"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.company
          )
        , ( "blog"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.blog
          )
        , ( "location"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.location
          )
        , ( "email"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.email
          )
        , ( "hireable"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.hireable
          )
        , ( "bio"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.bio
          )
        , ( "twitter_username"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.twitterUsername
          )
        , ( "public_repos", Json.Encode.int rec.publicRepos )
        , ( "public_gists", Json.Encode.int rec.publicGists )
        , ( "followers", Json.Encode.int rec.followers )
        , ( "following", Json.Encode.int rec.following )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "private_gists", Json.Encode.int rec.privateGists )
        , ( "total_private_repos", Json.Encode.int rec.totalPrivateRepos )
        , ( "owned_private_repos", Json.Encode.int rec.ownedPrivateRepos )
        , ( "disk_usage", Json.Encode.int rec.diskUsage )
        , ( "collaborators", Json.Encode.int rec.collaborators )
        , ( "two_factor_authentication"
          , Json.Encode.bool rec.twoFactorAuthentication
          )
        , ( "plan"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "collaborators", Json.Encode.int rec0.collaborators )
                    , ( "name", Json.Encode.string rec0.name )
                    , ( "space", Json.Encode.int rec0.space )
                    , ( "private_repos", Json.Encode.int rec0.privateRepos )
                    ]
            )
                rec.plan
          )
        , ( "suspended_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.suspendedAt
          )
        , ( "business_plus", Json.Encode.bool rec.businessPlus )
        , ( "ldap_dn", Json.Encode.string rec.ldapDn )
        ]


type alias PorterLargeFile =
    { refName : String, path : String, oid : String, size : Int }


decodePorterLargeFile : Json.Decode.Decoder PorterLargeFile
decodePorterLargeFile =
    Json.Decode.succeed
     (\refName path oid size ->
         { refName = refName, path = path, oid = oid, size = size }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ref_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "oid" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "size" Json.Decode.int)


encodePorterLargeFile : PorterLargeFile -> Json.Encode.Value
encodePorterLargeFile rec =
    Json.Encode.object
        [ ( "ref_name", Json.Encode.string rec.refName )
        , ( "path", Json.Encode.string rec.path )
        , ( "oid", Json.Encode.string rec.oid )
        , ( "size", Json.Encode.int rec.size )
        ]


type alias PorterAuthor =
    { id : Int
    , remoteId : String
    , remoteName : String
    , email : String
    , name : String
    , url : String
    , importUrl : String
    }


decodePorterAuthor : Json.Decode.Decoder PorterAuthor
decodePorterAuthor =
    Json.Decode.succeed
     (\id remoteId remoteName email name url importUrl ->
         { id = id
         , remoteId = remoteId
         , remoteName = remoteName
         , email = email
         , name = name
         , url = url
         , importUrl = importUrl
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "remote_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "remote_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "email" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "import_url" Json.Decode.string)


encodePorterAuthor : PorterAuthor -> Json.Encode.Value
encodePorterAuthor rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "remote_id", Json.Encode.string rec.remoteId )
        , ( "remote_name", Json.Encode.string rec.remoteName )
        , ( "email", Json.Encode.string rec.email )
        , ( "name", Json.Encode.string rec.name )
        , ( "url", Json.Encode.string rec.url )
        , ( "import_url", Json.Encode.string rec.importUrl )
        ]


type alias PendingDeployment =
    { environment :
        { id : Int
        , nodeId : String
        , name : String
        , url : String
        , htmlUrl : String
        }
    , waitTimer : Int
    , waitTimerStartedAt : Nullable String
    , currentUserCanApprove : Bool
    , reviewers : List { type_ : DeploymentReviewerType, reviewer : Debug.Todo }
    }


decodePendingDeployment : Json.Decode.Decoder PendingDeployment
decodePendingDeployment =
    Json.Decode.succeed
     (\environment waitTimer waitTimerStartedAt currentUserCanApprove reviewers ->
         { environment = environment
         , waitTimer = waitTimer
         , waitTimerStartedAt = waitTimerStartedAt
         , currentUserCanApprove = currentUserCanApprove
         , reviewers = reviewers
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "environment"
                (Json.Decode.succeed
                  (\id nodeId name url htmlUrl ->
                      { id = id
                      , nodeId = nodeId
                      , name = name
                      , url = url
                      , htmlUrl = htmlUrl
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "id" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "node_id" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "html_url" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "wait_timer" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "wait_timer_started_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "current_user_can_approve" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "reviewers"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\type_ reviewer -> { type_ = type_, reviewer = reviewer }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "type"
                                decodeDeploymentReviewerType
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "reviewer"
                                (Debug.todo
                                    "decode anyOf 2: not nullable:: { additionalItems = Nothing, additionalProperties = Nothing, allOf = Nothing, anyOf = Nothing, const = Nothing, contains = Nothing, default = Nothing, definitions = Nothing, dependencies = [], description = Nothing, enum = Nothing, examples = Nothing, exclusiveMaximum = Nothing, exclusiveMinimum = Nothing, format = Nothing, id = Nothing, items = NoItems, maxItems = Nothing, maxLength = Nothing, maxProperties = Nothing, maximum = Nothing, minItems = Nothing, minLength = Nothing, minProperties = Nothing, minimum = Nothing, multipleOf = Nothing, not = Nothing, oneOf = Nothing, pattern = Nothing, patternProperties = Nothing, properties = Nothing, propertyNames = Nothing, ref = Just \"#/components/schemas/simple-user\", required = Nothing, source = <internals>, title = Nothing, type_ = AnyType, uniqueItems = Nothing } ,,, { additionalItems = Nothing, additionalProperties = Nothing, allOf = Nothing, anyOf = Nothing, const = Nothing, contains = Nothing, default = Nothing, definitions = Nothing, dependencies = [], description = Nothing, enum = Nothing, examples = Nothing, exclusiveMaximum = Nothing, exclusiveMinimum = Nothing, format = Nothing, id = Nothing, items = NoItems, maxItems = Nothing, maxLength = Nothing, maxProperties = Nothing, maximum = Nothing, minItems = Nothing, minLength = Nothing, minProperties = Nothing, minimum = Nothing, multipleOf = Nothing, not = Nothing, oneOf = Nothing, pattern = Nothing, patternProperties = Nothing, properties = Nothing, propertyNames = Nothing, ref = Just \"#/components/schemas/team\", required = Nothing, source = <internals>, title = Nothing, type_ = AnyType, uniqueItems = Nothing }"
                                )
                            )
                    )
                )
            )


encodePendingDeployment : PendingDeployment -> Json.Encode.Value
encodePendingDeployment rec =
    Json.Encode.object
        [ ( "environment"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "id", Json.Encode.int rec0.id )
                    , ( "node_id", Json.Encode.string rec0.nodeId )
                    , ( "name", Json.Encode.string rec0.name )
                    , ( "url", Json.Encode.string rec0.url )
                    , ( "html_url", Json.Encode.string rec0.htmlUrl )
                    ]
            )
                rec.environment
          )
        , ( "wait_timer", Json.Encode.int rec.waitTimer )
        , ( "wait_timer_started_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.waitTimerStartedAt
          )
        , ( "current_user_can_approve"
          , Json.Encode.bool rec.currentUserCanApprove
          )
        , ( "reviewers"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "type", encodeDeploymentReviewerType rec0.type_ )
                        , ( "reviewer"
                          , Debug.todo "decode anyOf" rec0.reviewer
                          )
                        ]
                )
                rec.reviewers
          )
        ]


type alias ParticipationStats =
    { all : List Int, owner : List Int }


decodeParticipationStats : Json.Decode.Decoder ParticipationStats
decodeParticipationStats =
    Json.Decode.succeed (\all owner -> { all = all, owner = owner })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "all" (Json.Decode.list Json.Decode.int))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "owner" (Json.Decode.list Json.Decode.int))


encodeParticipationStats : ParticipationStats -> Json.Encode.Value
encodeParticipationStats rec =
    Json.Encode.object
        [ ( "all", Json.Encode.list Json.Encode.int rec.all )
        , ( "owner", Json.Encode.list Json.Encode.int rec.owner )
        ]


type alias PagesSourceHash =
    { branch : String, path : String }


decodePagesSourceHash : Json.Decode.Decoder PagesSourceHash
decodePagesSourceHash =
    Json.Decode.succeed (\branch path -> { branch = branch, path = path })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "branch" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)


encodePagesSourceHash : PagesSourceHash -> Json.Encode.Value
encodePagesSourceHash rec =
    Json.Encode.object
        [ ( "branch", Json.Encode.string rec.branch )
        , ( "path", Json.Encode.string rec.path )
        ]


type alias PagesHttpsCertificate =
    { state : String
    , description : String
    , domains : List String
    , expiresAt : String
    }


decodePagesHttpsCertificate : Json.Decode.Decoder PagesHttpsCertificate
decodePagesHttpsCertificate =
    Json.Decode.succeed
     (\state description domains expiresAt ->
         { state = state
         , description = description
         , domains = domains
         , expiresAt = expiresAt
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "description" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "domains" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "expires_at" Json.Decode.string)


encodePagesHttpsCertificate : PagesHttpsCertificate -> Json.Encode.Value
encodePagesHttpsCertificate rec =
    Json.Encode.object
        [ ( "state", Json.Encode.string rec.state )
        , ( "description", Json.Encode.string rec.description )
        , ( "domains", Json.Encode.list Json.Encode.string rec.domains )
        , ( "expires_at", Json.Encode.string rec.expiresAt )
        ]


type alias PagesHealthCheck =
    { domain :
        { host : String
        , uri : String
        , nameservers : String
        , dnsResolves : Bool
        , isProxied : Nullable Bool
        , isCloudflareIp : Nullable Bool
        , isFastlyIp : Nullable Bool
        , isOldIpAddress : Nullable Bool
        , isARecord : Nullable Bool
        , hasCnameRecord : Nullable Bool
        , hasMxRecordsPresent : Nullable Bool
        , isValidDomain : Bool
        , isApexDomain : Bool
        , shouldBeARecord : Nullable Bool
        , isCnameToGithubUserDomain : Nullable Bool
        , isCnameToPagesDotGithubDotCom : Nullable Bool
        , isCnameToFastly : Nullable Bool
        , isPointedToGithubPagesIp : Nullable Bool
        , isNonGithubPagesIpPresent : Nullable Bool
        , isPagesDomain : Bool
        , isServedByPages : Nullable Bool
        , isValid : Bool
        , reason : Nullable String
        , respondsToHttps : Bool
        , enforcesHttps : Bool
        , httpsError : Nullable String
        , isHttpsEligible : Nullable Bool
        , caaError : Nullable String
        }
    , altDomain :
        Nullable { host : String
        , uri : String
        , nameservers : String
        , dnsResolves : Bool
        , isProxied : Nullable Bool
        , isCloudflareIp : Nullable Bool
        , isFastlyIp : Nullable Bool
        , isOldIpAddress : Nullable Bool
        , isARecord : Nullable Bool
        , hasCnameRecord : Nullable Bool
        , hasMxRecordsPresent : Nullable Bool
        , isValidDomain : Bool
        , isApexDomain : Bool
        , shouldBeARecord : Nullable Bool
        , isCnameToGithubUserDomain : Nullable Bool
        , isCnameToPagesDotGithubDotCom : Nullable Bool
        , isCnameToFastly : Nullable Bool
        , isPointedToGithubPagesIp : Nullable Bool
        , isNonGithubPagesIpPresent : Nullable Bool
        , isPagesDomain : Bool
        , isServedByPages : Nullable Bool
        , isValid : Bool
        , reason : Nullable String
        , respondsToHttps : Bool
        , enforcesHttps : Bool
        , httpsError : Nullable String
        , isHttpsEligible : Nullable Bool
        , caaError : Nullable String
        }
    }


decodePagesHealthCheck : Json.Decode.Decoder PagesHealthCheck
decodePagesHealthCheck =
    Json.Decode.succeed
     (\domain altDomain -> { domain = domain, altDomain = altDomain })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "domain"
                (Json.Decode.succeed
                  (\host uri nameservers dnsResolves isProxied isCloudflareIp isFastlyIp isOldIpAddress isARecord hasCnameRecord hasMxRecordsPresent isValidDomain isApexDomain shouldBeARecord isCnameToGithubUserDomain isCnameToPagesDotGithubDotCom isCnameToFastly isPointedToGithubPagesIp isNonGithubPagesIpPresent isPagesDomain isServedByPages isValid reason respondsToHttps enforcesHttps httpsError isHttpsEligible caaError ->
                      { host = host
                      , uri = uri
                      , nameservers = nameservers
                      , dnsResolves = dnsResolves
                      , isProxied = isProxied
                      , isCloudflareIp = isCloudflareIp
                      , isFastlyIp = isFastlyIp
                      , isOldIpAddress = isOldIpAddress
                      , isARecord = isARecord
                      , hasCnameRecord = hasCnameRecord
                      , hasMxRecordsPresent = hasMxRecordsPresent
                      , isValidDomain = isValidDomain
                      , isApexDomain = isApexDomain
                      , shouldBeARecord = shouldBeARecord
                      , isCnameToGithubUserDomain = isCnameToGithubUserDomain
                      , isCnameToPagesDotGithubDotCom =
                          isCnameToPagesDotGithubDotCom
                      , isCnameToFastly = isCnameToFastly
                      , isPointedToGithubPagesIp = isPointedToGithubPagesIp
                      , isNonGithubPagesIpPresent = isNonGithubPagesIpPresent
                      , isPagesDomain = isPagesDomain
                      , isServedByPages = isServedByPages
                      , isValid = isValid
                      , reason = reason
                      , respondsToHttps = respondsToHttps
                      , enforcesHttps = enforcesHttps
                      , httpsError = httpsError
                      , isHttpsEligible = isHttpsEligible
                      , caaError = caaError
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "host" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "uri" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "nameservers" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "dns_resolves" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "is_proxied"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "is_cloudflare_ip"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "is_fastly_ip"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "is_old_ip_address"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "is_a_record"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "has_cname_record"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "has_mx_records_present"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "is_valid_domain" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "is_apex_domain" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "should_be_a_record"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "is_cname_to_github_user_domain"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "is_cname_to_pages_dot_github_dot_com"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "is_cname_to_fastly"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "is_pointed_to_github_pages_ip"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "is_non_github_pages_ip_present"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "is_pages_domain" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "is_served_by_pages"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "is_valid" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "reason"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "responds_to_https" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enforces_https" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "https_error"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "is_https_eligible"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.bool
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "caa_error"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "alt_domain"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.succeed
                          (\host uri nameservers dnsResolves isProxied isCloudflareIp isFastlyIp isOldIpAddress isARecord hasCnameRecord hasMxRecordsPresent isValidDomain isApexDomain shouldBeARecord isCnameToGithubUserDomain isCnameToPagesDotGithubDotCom isCnameToFastly isPointedToGithubPagesIp isNonGithubPagesIpPresent isPagesDomain isServedByPages isValid reason respondsToHttps enforcesHttps httpsError isHttpsEligible caaError ->
                              { host = host
                              , uri = uri
                              , nameservers = nameservers
                              , dnsResolves = dnsResolves
                              , isProxied = isProxied
                              , isCloudflareIp = isCloudflareIp
                              , isFastlyIp = isFastlyIp
                              , isOldIpAddress = isOldIpAddress
                              , isARecord = isARecord
                              , hasCnameRecord = hasCnameRecord
                              , hasMxRecordsPresent = hasMxRecordsPresent
                              , isValidDomain = isValidDomain
                              , isApexDomain = isApexDomain
                              , shouldBeARecord = shouldBeARecord
                              , isCnameToGithubUserDomain =
                                  isCnameToGithubUserDomain
                              , isCnameToPagesDotGithubDotCom =
                                  isCnameToPagesDotGithubDotCom
                              , isCnameToFastly = isCnameToFastly
                              , isPointedToGithubPagesIp =
                                  isPointedToGithubPagesIp
                              , isNonGithubPagesIpPresent =
                                  isNonGithubPagesIpPresent
                              , isPagesDomain = isPagesDomain
                              , isServedByPages = isServedByPages
                              , isValid = isValid
                              , reason = reason
                              , respondsToHttps = respondsToHttps
                              , enforcesHttps = enforcesHttps
                              , httpsError = httpsError
                              , isHttpsEligible = isHttpsEligible
                              , caaError = caaError
                              }
                          )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "host" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "uri" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "nameservers"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "dns_resolves"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_proxied"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_cloudflare_ip"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_fastly_ip"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_old_ip_address"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_a_record"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "has_cname_record"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "has_mx_records_present"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_valid_domain"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_apex_domain"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "should_be_a_record"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_cname_to_github_user_domain"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_cname_to_pages_dot_github_dot_com"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_cname_to_fastly"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_pointed_to_github_pages_ip"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_non_github_pages_ip_present"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_pages_domain"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_served_by_pages"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "is_valid" Json.Decode.bool)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "reason"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.string
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "responds_to_https"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "enforces_https"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "https_error"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.string
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_https_eligible"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.bool
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "caa_error"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.string
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                        )
                    , Json.Decode.null Null
                    ]
                )
            )


encodePagesHealthCheck : PagesHealthCheck -> Json.Encode.Value
encodePagesHealthCheck rec =
    Json.Encode.object
        [ ( "domain"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "host", Json.Encode.string rec0.host )
                    , ( "uri", Json.Encode.string rec0.uri )
                    , ( "nameservers", Json.Encode.string rec0.nameservers )
                    , ( "dns_resolves", Json.Encode.bool rec0.dnsResolves )
                    , ( "is_proxied"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.isProxied
                      )
                    , ( "is_cloudflare_ip"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.isCloudflareIp
                      )
                    , ( "is_fastly_ip"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.isFastlyIp
                      )
                    , ( "is_old_ip_address"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.isOldIpAddress
                      )
                    , ( "is_a_record"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.isARecord
                      )
                    , ( "has_cname_record"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.hasCnameRecord
                      )
                    , ( "has_mx_records_present"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.hasMxRecordsPresent
                      )
                    , ( "is_valid_domain", Json.Encode.bool rec0.isValidDomain )
                    , ( "is_apex_domain", Json.Encode.bool rec0.isApexDomain )
                    , ( "should_be_a_record"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.shouldBeARecord
                      )
                    , ( "is_cname_to_github_user_domain"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.isCnameToGithubUserDomain
                      )
                    , ( "is_cname_to_pages_dot_github_dot_com"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.isCnameToPagesDotGithubDotCom
                      )
                    , ( "is_cname_to_fastly"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.isCnameToFastly
                      )
                    , ( "is_pointed_to_github_pages_ip"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.isPointedToGithubPagesIp
                      )
                    , ( "is_non_github_pages_ip_present"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.isNonGithubPagesIpPresent
                      )
                    , ( "is_pages_domain", Json.Encode.bool rec0.isPagesDomain )
                    , ( "is_served_by_pages"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.isServedByPages
                      )
                    , ( "is_valid", Json.Encode.bool rec0.isValid )
                    , ( "reason"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.reason
                      )
                    , ( "responds_to_https"
                      , Json.Encode.bool rec0.respondsToHttps
                      )
                    , ( "enforces_https", Json.Encode.bool rec0.enforcesHttps )
                    , ( "https_error"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.httpsError
                      )
                    , ( "is_https_eligible"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.bool value
                        )
                            rec0.isHttpsEligible
                      )
                    , ( "caa_error"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.caaError
                      )
                    ]
            )
                rec.domain
          )
        , ( "alt_domain"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        (\rec0 ->
                            Json.Encode.object
                                [ ( "host", Json.Encode.string rec0.host )
                                , ( "uri", Json.Encode.string rec0.uri )
                                , ( "nameservers"
                                  , Json.Encode.string rec0.nameservers
                                  )
                                , ( "dns_resolves"
                                  , Json.Encode.bool rec0.dnsResolves
                                  )
                                , ( "is_proxied"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.isProxied
                                  )
                                , ( "is_cloudflare_ip"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.isCloudflareIp
                                  )
                                , ( "is_fastly_ip"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.isFastlyIp
                                  )
                                , ( "is_old_ip_address"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.isOldIpAddress
                                  )
                                , ( "is_a_record"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.isARecord
                                  )
                                , ( "has_cname_record"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.hasCnameRecord
                                  )
                                , ( "has_mx_records_present"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.hasMxRecordsPresent
                                  )
                                , ( "is_valid_domain"
                                  , Json.Encode.bool rec0.isValidDomain
                                  )
                                , ( "is_apex_domain"
                                  , Json.Encode.bool rec0.isApexDomain
                                  )
                                , ( "should_be_a_record"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.shouldBeARecord
                                  )
                                , ( "is_cname_to_github_user_domain"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.isCnameToGithubUserDomain
                                  )
                                , ( "is_cname_to_pages_dot_github_dot_com"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.isCnameToPagesDotGithubDotCom
                                  )
                                , ( "is_cname_to_fastly"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.isCnameToFastly
                                  )
                                , ( "is_pointed_to_github_pages_ip"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.isPointedToGithubPagesIp
                                  )
                                , ( "is_non_github_pages_ip_present"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.isNonGithubPagesIpPresent
                                  )
                                , ( "is_pages_domain"
                                  , Json.Encode.bool rec0.isPagesDomain
                                  )
                                , ( "is_served_by_pages"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.isServedByPages
                                  )
                                , ( "is_valid", Json.Encode.bool rec0.isValid )
                                , ( "reason"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.string value0
                                    )
                                        rec0.reason
                                  )
                                , ( "responds_to_https"
                                  , Json.Encode.bool rec0.respondsToHttps
                                  )
                                , ( "enforces_https"
                                  , Json.Encode.bool rec0.enforcesHttps
                                  )
                                , ( "https_error"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.string value0
                                    )
                                        rec0.httpsError
                                  )
                                , ( "is_https_eligible"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.bool value0
                                    )
                                        rec0.isHttpsEligible
                                  )
                                , ( "caa_error"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.string value0
                                    )
                                        rec0.caaError
                                  )
                                ]
                        )
                            value
            )
                rec.altDomain
          )
        ]


type alias PageDeployment =
    { statusUrl : String, pageUrl : String, previewUrl : String }


decodePageDeployment : Json.Decode.Decoder PageDeployment
decodePageDeployment =
    Json.Decode.succeed
     (\statusUrl pageUrl previewUrl ->
         { statusUrl = statusUrl, pageUrl = pageUrl, previewUrl = previewUrl }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "page_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "preview_url" Json.Decode.string)


encodePageDeployment : PageDeployment -> Json.Encode.Value
encodePageDeployment rec =
    Json.Encode.object
        [ ( "status_url", Json.Encode.string rec.statusUrl )
        , ( "page_url", Json.Encode.string rec.pageUrl )
        , ( "preview_url", Json.Encode.string rec.previewUrl )
        ]


type alias PageBuildStatus =
    { url : String, status : String }


decodePageBuildStatus : Json.Decode.Decoder PageBuildStatus
decodePageBuildStatus =
    Json.Decode.succeed (\url status -> { url = url, status = status })
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status" Json.Decode.string)


encodePageBuildStatus : PageBuildStatus -> Json.Encode.Value
encodePageBuildStatus rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "status", Json.Encode.string rec.status )
        ]


type alias PageBuild =
    { url : String
    , status : String
    , error : { message : Nullable String }
    , pusher : Debug.Todo
    , commit : String
    , duration : Int
    , createdAt : String
    , updatedAt : String
    }


decodePageBuild : Json.Decode.Decoder PageBuild
decodePageBuild =
    Json.Decode.succeed
     (\url status error pusher commit duration createdAt updatedAt ->
         { url = url
         , status = status
         , error = error
         , pusher = pusher
         , commit = commit
         , duration = duration
         , createdAt = createdAt
         , updatedAt = updatedAt
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "error"
                (Json.Decode.succeed (\message -> { message = message })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "message"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pusher"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commit" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "duration" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)


encodePageBuild : PageBuild -> Json.Encode.Value
encodePageBuild rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "status", Json.Encode.string rec.status )
        , ( "error"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "message"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.message
                      )
                    ]
            )
                rec.error
          )
        , ( "pusher", Debug.todo "decode anyOf" rec.pusher )
        , ( "commit", Json.Encode.string rec.commit )
        , ( "duration", Json.Encode.int rec.duration )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        ]


type alias Page =
    { url : String
    , status : Nullable String
    , cname : Nullable String
    , protectedDomainState : Nullable String
    , pendingDomainUnverifiedAt : Nullable String
    , custom404 : Bool
    , htmlUrl : String
    , buildType : Nullable String
    , source : PagesSourceHash
    , public : Bool
    , httpsCertificate : PagesHttpsCertificate
    , httpsEnforced : Bool
    }


decodePage : Json.Decode.Decoder Page
decodePage =
    Json.Decode.succeed
     (\url status cname protectedDomainState pendingDomainUnverifiedAt custom404 htmlUrl buildType source public httpsCertificate httpsEnforced ->
         { url = url
         , status = status
         , cname = cname
         , protectedDomainState = protectedDomainState
         , pendingDomainUnverifiedAt = pendingDomainUnverifiedAt
         , custom404 = custom404
         , htmlUrl = htmlUrl
         , buildType = buildType
         , source = source
         , public = public
         , httpsCertificate = httpsCertificate
         , httpsEnforced = httpsEnforced
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "status"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "cname"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "protected_domain_state"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pending_domain_unverified_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "custom_404" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "build_type"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "source" decodePagesSourceHash)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "https_certificate" decodePagesHttpsCertificate)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "https_enforced" Json.Decode.bool)


encodePage : Page -> Json.Encode.Value
encodePage rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "status"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.status
          )
        , ( "cname"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.cname
          )
        , ( "protected_domain_state"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.protectedDomainState
          )
        , ( "pending_domain_unverified_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.pendingDomainUnverifiedAt
          )
        , ( "custom_404", Json.Encode.bool rec.custom404 )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "build_type"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.buildType
          )
        , ( "source", encodePagesSourceHash rec.source )
        , ( "public", Json.Encode.bool rec.public )
        , ( "https_certificate"
          , encodePagesHttpsCertificate rec.httpsCertificate
          )
        , ( "https_enforced", Json.Encode.bool rec.httpsEnforced )
        ]


type alias PackagesBillingUsage =
    { totalGigabytesBandwidthUsed : Int
    , totalPaidGigabytesBandwidthUsed : Int
    , includedGigabytesBandwidth : Int
    }


decodePackagesBillingUsage : Json.Decode.Decoder PackagesBillingUsage
decodePackagesBillingUsage =
    Json.Decode.succeed
     (\totalGigabytesBandwidthUsed totalPaidGigabytesBandwidthUsed includedGigabytesBandwidth ->
         { totalGigabytesBandwidthUsed = totalGigabytesBandwidthUsed
         , totalPaidGigabytesBandwidthUsed = totalPaidGigabytesBandwidthUsed
         , includedGigabytesBandwidth = includedGigabytesBandwidth
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "total_gigabytes_bandwidth_used" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "total_paid_gigabytes_bandwidth_used"
                Json.Decode.int
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "included_gigabytes_bandwidth" Json.Decode.int)


encodePackagesBillingUsage : PackagesBillingUsage -> Json.Encode.Value
encodePackagesBillingUsage rec =
    Json.Encode.object
        [ ( "total_gigabytes_bandwidth_used"
          , Json.Encode.int rec.totalGigabytesBandwidthUsed
          )
        , ( "total_paid_gigabytes_bandwidth_used"
          , Json.Encode.int rec.totalPaidGigabytesBandwidthUsed
          )
        , ( "included_gigabytes_bandwidth"
          , Json.Encode.int rec.includedGigabytesBandwidth
          )
        ]


type alias PackageVersion =
    { id : Int
    , name : String
    , url : String
    , packageHtmlUrl : String
    , htmlUrl : String
    , license : String
    , description : String
    , createdAt : String
    , updatedAt : String
    , deletedAt : String
    , metadata :
        { packageType : String
        , container : { tags : List String }
        , docker : { tag : List String }
        }
    }


decodePackageVersion : Json.Decode.Decoder PackageVersion
decodePackageVersion =
    Json.Decode.succeed
     (\id name url packageHtmlUrl htmlUrl license description createdAt updatedAt deletedAt metadata ->
         { id = id
         , name = name
         , url = url
         , packageHtmlUrl = packageHtmlUrl
         , htmlUrl = htmlUrl
         , license = license
         , description = description
         , createdAt = createdAt
         , updatedAt = updatedAt
         , deletedAt = deletedAt
         , metadata = metadata
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "package_html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "license" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "description" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deleted_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "metadata"
                (Json.Decode.succeed
                  (\packageType container docker ->
                      { packageType = packageType
                      , container = container
                      , docker = docker
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "package_type" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "container"
                            (Json.Decode.succeed (\tags -> { tags = tags })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "tags"
                                        (Json.Decode.list Json.Decode.string)
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "docker"
                            (Json.Decode.succeed (\tag -> { tag = tag })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "tag"
                                        (Json.Decode.list Json.Decode.string)
                                    )
                            )
                        )
                )
            )


encodePackageVersion : PackageVersion -> Json.Encode.Value
encodePackageVersion rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "name", Json.Encode.string rec.name )
        , ( "url", Json.Encode.string rec.url )
        , ( "package_html_url", Json.Encode.string rec.packageHtmlUrl )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "license", Json.Encode.string rec.license )
        , ( "description", Json.Encode.string rec.description )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "deleted_at", Json.Encode.string rec.deletedAt )
        , ( "metadata"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "package_type", Json.Encode.string rec0.packageType )
                    , ( "container"
                      , (\rec_0_2_1_1_0_11_1_0_0 ->
                            Json.Encode.object
                                [ ( "tags"
                                  , Json.Encode.list Json.Encode.string
                                        rec_0_2_1_1_0_11_1_0_0.tags
                                  )
                                ]
                        )
                            rec0.container
                      )
                    , ( "docker"
                      , (\rec_0_3_1_1_0_11_1_0_0 ->
                            Json.Encode.object
                                [ ( "tag"
                                  , Json.Encode.list Json.Encode.string
                                        rec_0_3_1_1_0_11_1_0_0.tag
                                  )
                                ]
                        )
                            rec0.docker
                      )
                    ]
            )
                rec.metadata
          )
        ]


type alias Package =
    { id : Int
    , name : String
    , packageType : String
    , url : String
    , htmlUrl : String
    , versionCount : Int
    , visibility : String
    , owner : Debug.Todo
    , repository : Debug.Todo
    , createdAt : String
    , updatedAt : String
    }


decodePackage : Json.Decode.Decoder Package
decodePackage =
    Json.Decode.succeed
     (\id name packageType url htmlUrl versionCount visibility owner repository createdAt updatedAt ->
         { id = id
         , name = name
         , packageType = packageType
         , url = url
         , htmlUrl = htmlUrl
         , versionCount = versionCount
         , visibility = visibility
         , owner = owner
         , repository = repository
         , createdAt = createdAt
         , updatedAt = updatedAt
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "package_type" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "version_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "visibility" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "owner"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "repository"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeMinimalRepository
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)


encodePackage : Package -> Json.Encode.Value
encodePackage rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "name", Json.Encode.string rec.name )
        , ( "package_type", Json.Encode.string rec.packageType )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "version_count", Json.Encode.int rec.versionCount )
        , ( "visibility", Json.Encode.string rec.visibility )
        , ( "owner", Debug.todo "decode anyOf" rec.owner )
        , ( "repository", Debug.todo "decode anyOf" rec.repository )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        ]


type alias OrganizationSimple =
    { login : String
    , id : Int
    , nodeId : String
    , url : String
    , reposUrl : String
    , eventsUrl : String
    , hooksUrl : String
    , issuesUrl : String
    , membersUrl : String
    , publicMembersUrl : String
    , avatarUrl : String
    , description : Nullable String
    }


decodeOrganizationSimple : Json.Decode.Decoder OrganizationSimple
decodeOrganizationSimple =
    Json.Decode.succeed
     (\login id nodeId url reposUrl eventsUrl hooksUrl issuesUrl membersUrl publicMembersUrl avatarUrl description ->
         { login = login
         , id = id
         , nodeId = nodeId
         , url = url
         , reposUrl = reposUrl
         , eventsUrl = eventsUrl
         , hooksUrl = hooksUrl
         , issuesUrl = issuesUrl
         , membersUrl = membersUrl
         , publicMembersUrl = publicMembersUrl
         , avatarUrl = avatarUrl
         , description = description
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "login" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repos_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "hooks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issues_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "members_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_members_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "avatar_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeOrganizationSimple : OrganizationSimple -> Json.Encode.Value
encodeOrganizationSimple rec =
    Json.Encode.object
        [ ( "login", Json.Encode.string rec.login )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "repos_url", Json.Encode.string rec.reposUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "hooks_url", Json.Encode.string rec.hooksUrl )
        , ( "issues_url", Json.Encode.string rec.issuesUrl )
        , ( "members_url", Json.Encode.string rec.membersUrl )
        , ( "public_members_url", Json.Encode.string rec.publicMembersUrl )
        , ( "avatar_url", Json.Encode.string rec.avatarUrl )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        ]


type alias OrganizationSecretScanningAlert =
    { number : AlertNumber
    , createdAt : AlertCreatedAt
    , updatedAt : Debug.Todo
    , url : AlertUrl
    , htmlUrl : AlertHtmlUrl
    , locationsUrl : String
    , state : SecretScanningAlertState
    , resolution : SecretScanningAlertResolution
    , resolvedAt : Nullable String
    , resolvedBy : Debug.Todo
    , secretType : String
    , secretTypeDisplayName : String
    , secret : String
    , repository : SimpleRepository
    , pushProtectionBypassed : Nullable Bool
    , pushProtectionBypassedBy : Debug.Todo
    , pushProtectionBypassedAt : Nullable String
    , resolutionComment : Nullable String
    }


decodeOrganizationSecretScanningAlert :
    Json.Decode.Decoder OrganizationSecretScanningAlert
decodeOrganizationSecretScanningAlert =
    Json.Decode.succeed
     (\number createdAt updatedAt url htmlUrl locationsUrl state resolution resolvedAt resolvedBy secretType secretTypeDisplayName secret repository pushProtectionBypassed pushProtectionBypassedBy pushProtectionBypassedAt resolutionComment ->
         { number = number
         , createdAt = createdAt
         , updatedAt = updatedAt
         , url = url
         , htmlUrl = htmlUrl
         , locationsUrl = locationsUrl
         , state = state
         , resolution = resolution
         , resolvedAt = resolvedAt
         , resolvedBy = resolvedBy
         , secretType = secretType
         , secretTypeDisplayName = secretTypeDisplayName
         , secret = secret
         , repository = repository
         , pushProtectionBypassed = pushProtectionBypassed
         , pushProtectionBypassedBy = pushProtectionBypassedBy
         , pushProtectionBypassedAt = pushProtectionBypassedAt
         , resolutionComment = resolutionComment
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "number" decodeAlertNumber)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" decodeAlertCreatedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "updated_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeAlertUpdatedAt
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" decodeAlertUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" decodeAlertHtmlUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "locations_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" decodeSecretScanningAlertState)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "resolution" decodeSecretScanningAlertResolution)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "resolved_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "resolved_by"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "secret_type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "secret_type_display_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "secret" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeSimpleRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "push_protection_bypassed"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "push_protection_bypassed_by"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "push_protection_bypassed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "resolution_comment"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeOrganizationSecretScanningAlert :
    OrganizationSecretScanningAlert -> Json.Encode.Value
encodeOrganizationSecretScanningAlert rec =
    Json.Encode.object
        [ ( "number", encodeAlertNumber rec.number )
        , ( "created_at", encodeAlertCreatedAt rec.createdAt )
        , ( "updated_at", Debug.todo "decode anyOf" rec.updatedAt )
        , ( "url", encodeAlertUrl rec.url )
        , ( "html_url", encodeAlertHtmlUrl rec.htmlUrl )
        , ( "locations_url", Json.Encode.string rec.locationsUrl )
        , ( "state", encodeSecretScanningAlertState rec.state )
        , ( "resolution", encodeSecretScanningAlertResolution rec.resolution )
        , ( "resolved_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.resolvedAt
          )
        , ( "resolved_by", Debug.todo "decode anyOf" rec.resolvedBy )
        , ( "secret_type", Json.Encode.string rec.secretType )
        , ( "secret_type_display_name"
          , Json.Encode.string rec.secretTypeDisplayName
          )
        , ( "secret", Json.Encode.string rec.secret )
        , ( "repository", encodeSimpleRepository rec.repository )
        , ( "push_protection_bypassed"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.pushProtectionBypassed
          )
        , ( "push_protection_bypassed_by"
          , Debug.todo "decode anyOf" rec.pushProtectionBypassedBy
          )
        , ( "push_protection_bypassed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.pushProtectionBypassedAt
          )
        , ( "resolution_comment"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.resolutionComment
          )
        ]


type alias OrganizationInvitation =
    { id : Int
    , login : Nullable String
    , email : Nullable String
    , role : String
    , createdAt : String
    , failedAt : Nullable String
    , failedReason : Nullable String
    , inviter : SimpleUser
    , teamCount : Int
    , nodeId : String
    , invitationTeamsUrl : String
    }


decodeOrganizationInvitation : Json.Decode.Decoder OrganizationInvitation
decodeOrganizationInvitation =
    Json.Decode.succeed
     (\id login email role createdAt failedAt failedReason inviter teamCount nodeId invitationTeamsUrl ->
         { id = id
         , login = login
         , email = email
         , role = role
         , createdAt = createdAt
         , failedAt = failedAt
         , failedReason = failedReason
         , inviter = inviter
         , teamCount = teamCount
         , nodeId = nodeId
         , invitationTeamsUrl = invitationTeamsUrl
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "login"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "email"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "role" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "failed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "failed_reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "inviter" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "team_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "invitation_teams_url" Json.Decode.string)


encodeOrganizationInvitation : OrganizationInvitation -> Json.Encode.Value
encodeOrganizationInvitation rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "login"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.login
          )
        , ( "email"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.email
          )
        , ( "role", Json.Encode.string rec.role )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "failed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.failedAt
          )
        , ( "failed_reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.failedReason
          )
        , ( "inviter", encodeSimpleUser rec.inviter )
        , ( "team_count", Json.Encode.int rec.teamCount )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "invitation_teams_url", Json.Encode.string rec.invitationTeamsUrl )
        ]


type alias OrganizationFull =
    { login : String
    , id : Int
    , nodeId : String
    , url : String
    , reposUrl : String
    , eventsUrl : String
    , hooksUrl : String
    , issuesUrl : String
    , membersUrl : String
    , publicMembersUrl : String
    , avatarUrl : String
    , description : Nullable String
    , name : String
    , company : String
    , blog : String
    , location : String
    , email : String
    , twitterUsername : Nullable String
    , isVerified : Bool
    , hasOrganizationProjects : Bool
    , hasRepositoryProjects : Bool
    , publicRepos : Int
    , publicGists : Int
    , followers : Int
    , following : Int
    , htmlUrl : String
    , createdAt : String
    , type_ : String
    , totalPrivateRepos : Int
    , ownedPrivateRepos : Int
    , privateGists : Nullable Int
    , diskUsage : Nullable Int
    , collaborators : Nullable Int
    , billingEmail : Nullable String
    , plan :
        { name : String
        , space : Int
        , privateRepos : Int
        , filledSeats : Int
        , seats : Int
        }
    , defaultRepositoryPermission : Nullable String
    , membersCanCreateRepositories : Nullable Bool
    , twoFactorRequirementEnabled : Nullable Bool
    , membersAllowedRepositoryCreationType : String
    , membersCanCreatePublicRepositories : Bool
    , membersCanCreatePrivateRepositories : Bool
    , membersCanCreateInternalRepositories : Bool
    , membersCanCreatePages : Bool
    , membersCanCreatePublicPages : Bool
    , membersCanCreatePrivatePages : Bool
    , membersCanForkPrivateRepositories : Nullable Bool
    , webCommitSignoffRequired : Bool
    , updatedAt : String
    , advancedSecurityEnabledForNewRepositories : Bool
    , dependabotAlertsEnabledForNewRepositories : Bool
    , dependabotSecurityUpdatesEnabledForNewRepositories : Bool
    , dependencyGraphEnabledForNewRepositories : Bool
    , secretScanningEnabledForNewRepositories : Bool
    , secretScanningPushProtectionEnabledForNewRepositories : Bool
    }


decodeOrganizationFull : Json.Decode.Decoder OrganizationFull
decodeOrganizationFull =
    Json.Decode.succeed
     (\login id nodeId url reposUrl eventsUrl hooksUrl issuesUrl membersUrl publicMembersUrl avatarUrl description name company blog location email twitterUsername isVerified hasOrganizationProjects hasRepositoryProjects publicRepos publicGists followers following htmlUrl createdAt type_ totalPrivateRepos ownedPrivateRepos privateGists diskUsage collaborators billingEmail plan defaultRepositoryPermission membersCanCreateRepositories twoFactorRequirementEnabled membersAllowedRepositoryCreationType membersCanCreatePublicRepositories membersCanCreatePrivateRepositories membersCanCreateInternalRepositories membersCanCreatePages membersCanCreatePublicPages membersCanCreatePrivatePages membersCanForkPrivateRepositories webCommitSignoffRequired updatedAt advancedSecurityEnabledForNewRepositories dependabotAlertsEnabledForNewRepositories dependabotSecurityUpdatesEnabledForNewRepositories dependencyGraphEnabledForNewRepositories secretScanningEnabledForNewRepositories secretScanningPushProtectionEnabledForNewRepositories ->
         { login = login
         , id = id
         , nodeId = nodeId
         , url = url
         , reposUrl = reposUrl
         , eventsUrl = eventsUrl
         , hooksUrl = hooksUrl
         , issuesUrl = issuesUrl
         , membersUrl = membersUrl
         , publicMembersUrl = publicMembersUrl
         , avatarUrl = avatarUrl
         , description = description
         , name = name
         , company = company
         , blog = blog
         , location = location
         , email = email
         , twitterUsername = twitterUsername
         , isVerified = isVerified
         , hasOrganizationProjects = hasOrganizationProjects
         , hasRepositoryProjects = hasRepositoryProjects
         , publicRepos = publicRepos
         , publicGists = publicGists
         , followers = followers
         , following = following
         , htmlUrl = htmlUrl
         , createdAt = createdAt
         , type_ = type_
         , totalPrivateRepos = totalPrivateRepos
         , ownedPrivateRepos = ownedPrivateRepos
         , privateGists = privateGists
         , diskUsage = diskUsage
         , collaborators = collaborators
         , billingEmail = billingEmail
         , plan = plan
         , defaultRepositoryPermission = defaultRepositoryPermission
         , membersCanCreateRepositories = membersCanCreateRepositories
         , twoFactorRequirementEnabled = twoFactorRequirementEnabled
         , membersAllowedRepositoryCreationType =
             membersAllowedRepositoryCreationType
         , membersCanCreatePublicRepositories =
             membersCanCreatePublicRepositories
         , membersCanCreatePrivateRepositories =
             membersCanCreatePrivateRepositories
         , membersCanCreateInternalRepositories =
             membersCanCreateInternalRepositories
         , membersCanCreatePages = membersCanCreatePages
         , membersCanCreatePublicPages = membersCanCreatePublicPages
         , membersCanCreatePrivatePages = membersCanCreatePrivatePages
         , membersCanForkPrivateRepositories = membersCanForkPrivateRepositories
         , webCommitSignoffRequired = webCommitSignoffRequired
         , updatedAt = updatedAt
         , advancedSecurityEnabledForNewRepositories =
             advancedSecurityEnabledForNewRepositories
         , dependabotAlertsEnabledForNewRepositories =
             dependabotAlertsEnabledForNewRepositories
         , dependabotSecurityUpdatesEnabledForNewRepositories =
             dependabotSecurityUpdatesEnabledForNewRepositories
         , dependencyGraphEnabledForNewRepositories =
             dependencyGraphEnabledForNewRepositories
         , secretScanningEnabledForNewRepositories =
             secretScanningEnabledForNewRepositories
         , secretScanningPushProtectionEnabledForNewRepositories =
             secretScanningPushProtectionEnabledForNewRepositories
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "login" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repos_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "hooks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issues_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "members_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_members_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "avatar_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "company" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "blog" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "location" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "email" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "twitter_username"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "is_verified" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_organization_projects" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_repository_projects" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_repos" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_gists" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "followers" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "following" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "total_private_repos" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "owned_private_repos" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "private_gists"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "disk_usage"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "collaborators"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "billing_email"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "plan"
                (Json.Decode.succeed
                  (\name space privateRepos filledSeats seats ->
                      { name = name
                      , space = space
                      , privateRepos = privateRepos
                      , filledSeats = filledSeats
                      , seats = seats
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "space" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "private_repos" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "filled_seats" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "seats" Json.Decode.int)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "default_repository_permission"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_create_repositories"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "two_factor_requirement_enabled"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_allowed_repository_creation_type"
                Json.Decode.string
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_create_public_repositories"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_create_private_repositories"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_create_internal_repositories"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "members_can_create_pages" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_create_public_pages"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_create_private_pages"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "members_can_fork_private_repositories"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "web_commit_signoff_required" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "advanced_security_enabled_for_new_repositories"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dependabot_alerts_enabled_for_new_repositories"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dependabot_security_updates_enabled_for_new_repositories"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dependency_graph_enabled_for_new_repositories"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "secret_scanning_enabled_for_new_repositories"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "secret_scanning_push_protection_enabled_for_new_repositories"
                Json.Decode.bool
            )


encodeOrganizationFull : OrganizationFull -> Json.Encode.Value
encodeOrganizationFull rec =
    Json.Encode.object
        [ ( "login", Json.Encode.string rec.login )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "repos_url", Json.Encode.string rec.reposUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "hooks_url", Json.Encode.string rec.hooksUrl )
        , ( "issues_url", Json.Encode.string rec.issuesUrl )
        , ( "members_url", Json.Encode.string rec.membersUrl )
        , ( "public_members_url", Json.Encode.string rec.publicMembersUrl )
        , ( "avatar_url", Json.Encode.string rec.avatarUrl )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "name", Json.Encode.string rec.name )
        , ( "company", Json.Encode.string rec.company )
        , ( "blog", Json.Encode.string rec.blog )
        , ( "location", Json.Encode.string rec.location )
        , ( "email", Json.Encode.string rec.email )
        , ( "twitter_username"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.twitterUsername
          )
        , ( "is_verified", Json.Encode.bool rec.isVerified )
        , ( "has_organization_projects"
          , Json.Encode.bool rec.hasOrganizationProjects
          )
        , ( "has_repository_projects"
          , Json.Encode.bool rec.hasRepositoryProjects
          )
        , ( "public_repos", Json.Encode.int rec.publicRepos )
        , ( "public_gists", Json.Encode.int rec.publicGists )
        , ( "followers", Json.Encode.int rec.followers )
        , ( "following", Json.Encode.int rec.following )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "type", Json.Encode.string rec.type_ )
        , ( "total_private_repos", Json.Encode.int rec.totalPrivateRepos )
        , ( "owned_private_repos", Json.Encode.int rec.ownedPrivateRepos )
        , ( "private_gists"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.privateGists
          )
        , ( "disk_usage"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.diskUsage
          )
        , ( "collaborators"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.collaborators
          )
        , ( "billing_email"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.billingEmail
          )
        , ( "plan"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "name", Json.Encode.string rec0.name )
                    , ( "space", Json.Encode.int rec0.space )
                    , ( "private_repos", Json.Encode.int rec0.privateRepos )
                    , ( "filled_seats", Json.Encode.int rec0.filledSeats )
                    , ( "seats", Json.Encode.int rec0.seats )
                    ]
            )
                rec.plan
          )
        , ( "default_repository_permission"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.defaultRepositoryPermission
          )
        , ( "members_can_create_repositories"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.membersCanCreateRepositories
          )
        , ( "two_factor_requirement_enabled"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.twoFactorRequirementEnabled
          )
        , ( "members_allowed_repository_creation_type"
          , Json.Encode.string rec.membersAllowedRepositoryCreationType
          )
        , ( "members_can_create_public_repositories"
          , Json.Encode.bool rec.membersCanCreatePublicRepositories
          )
        , ( "members_can_create_private_repositories"
          , Json.Encode.bool rec.membersCanCreatePrivateRepositories
          )
        , ( "members_can_create_internal_repositories"
          , Json.Encode.bool rec.membersCanCreateInternalRepositories
          )
        , ( "members_can_create_pages"
          , Json.Encode.bool rec.membersCanCreatePages
          )
        , ( "members_can_create_public_pages"
          , Json.Encode.bool rec.membersCanCreatePublicPages
          )
        , ( "members_can_create_private_pages"
          , Json.Encode.bool rec.membersCanCreatePrivatePages
          )
        , ( "members_can_fork_private_repositories"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.membersCanForkPrivateRepositories
          )
        , ( "web_commit_signoff_required"
          , Json.Encode.bool rec.webCommitSignoffRequired
          )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "advanced_security_enabled_for_new_repositories"
          , Json.Encode.bool rec.advancedSecurityEnabledForNewRepositories
          )
        , ( "dependabot_alerts_enabled_for_new_repositories"
          , Json.Encode.bool rec.dependabotAlertsEnabledForNewRepositories
          )
        , ( "dependabot_security_updates_enabled_for_new_repositories"
          , Json.Encode.bool
                rec.dependabotSecurityUpdatesEnabledForNewRepositories
          )
        , ( "dependency_graph_enabled_for_new_repositories"
          , Json.Encode.bool rec.dependencyGraphEnabledForNewRepositories
          )
        , ( "secret_scanning_enabled_for_new_repositories"
          , Json.Encode.bool rec.secretScanningEnabledForNewRepositories
          )
        , ( "secret_scanning_push_protection_enabled_for_new_repositories"
          , Json.Encode.bool
                rec.secretScanningPushProtectionEnabledForNewRepositories
          )
        ]


type alias OrganizationFineGrainedPermission =
    { name : String, description : String }


decodeOrganizationFineGrainedPermission :
    Json.Decode.Decoder OrganizationFineGrainedPermission
decodeOrganizationFineGrainedPermission =
    Json.Decode.succeed
     (\name description -> { name = name, description = description })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "description" Json.Decode.string)


encodeOrganizationFineGrainedPermission :
    OrganizationFineGrainedPermission -> Json.Encode.Value
encodeOrganizationFineGrainedPermission rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "description", Json.Encode.string rec.description )
        ]


type alias OrganizationDependabotSecret =
    { name : String
    , createdAt : String
    , updatedAt : String
    , visibility : String
    , selectedRepositoriesUrl : String
    }


decodeOrganizationDependabotSecret :
    Json.Decode.Decoder OrganizationDependabotSecret
decodeOrganizationDependabotSecret =
    Json.Decode.succeed
     (\name createdAt updatedAt visibility selectedRepositoriesUrl ->
         { name = name
         , createdAt = createdAt
         , updatedAt = updatedAt
         , visibility = visibility
         , selectedRepositoriesUrl = selectedRepositoriesUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "visibility" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "selected_repositories_url" Json.Decode.string)


encodeOrganizationDependabotSecret :
    OrganizationDependabotSecret -> Json.Encode.Value
encodeOrganizationDependabotSecret rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "visibility", Json.Encode.string rec.visibility )
        , ( "selected_repositories_url"
          , Json.Encode.string rec.selectedRepositoriesUrl
          )
        ]


type alias OrganizationCustomRepositoryRole =
    { id : Int
    , name : String
    , description : Nullable String
    , baseRole : String
    , permissions : List String
    , organization : SimpleUser
    , createdAt : String
    , updatedAt : String
    }


decodeOrganizationCustomRepositoryRole :
    Json.Decode.Decoder OrganizationCustomRepositoryRole
decodeOrganizationCustomRepositoryRole =
    Json.Decode.succeed
     (\id name description baseRole permissions organization createdAt updatedAt ->
         { id = id
         , name = name
         , description = description
         , baseRole = baseRole
         , permissions = permissions
         , organization = organization
         , createdAt = createdAt
         , updatedAt = updatedAt
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "base_role" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "permissions"
                (Json.Decode.list Json.Decode.string)
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)


encodeOrganizationCustomRepositoryRole :
    OrganizationCustomRepositoryRole -> Json.Encode.Value
encodeOrganizationCustomRepositoryRole rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "name", Json.Encode.string rec.name )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "base_role", Json.Encode.string rec.baseRole )
        , ( "permissions", Json.Encode.list Json.Encode.string rec.permissions )
        , ( "organization", encodeSimpleUser rec.organization )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        ]


type alias OrganizationActionsSecret =
    { name : String
    , createdAt : String
    , updatedAt : String
    , visibility : String
    , selectedRepositoriesUrl : String
    }


decodeOrganizationActionsSecret : Json.Decode.Decoder OrganizationActionsSecret
decodeOrganizationActionsSecret =
    Json.Decode.succeed
     (\name createdAt updatedAt visibility selectedRepositoriesUrl ->
         { name = name
         , createdAt = createdAt
         , updatedAt = updatedAt
         , visibility = visibility
         , selectedRepositoriesUrl = selectedRepositoriesUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "visibility" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "selected_repositories_url" Json.Decode.string)


encodeOrganizationActionsSecret : OrganizationActionsSecret -> Json.Encode.Value
encodeOrganizationActionsSecret rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "visibility", Json.Encode.string rec.visibility )
        , ( "selected_repositories_url"
          , Json.Encode.string rec.selectedRepositoriesUrl
          )
        ]


type alias OrgMembership =
    { url : String
    , state : String
    , role : String
    , organizationUrl : String
    , organization : OrganizationSimple
    , user : Debug.Todo
    , permissions : { canCreateRepository : Bool }
    }


decodeOrgMembership : Json.Decode.Decoder OrgMembership
decodeOrgMembership =
    Json.Decode.succeed
     (\url state role organizationUrl organization user permissions ->
         { url = url
         , state = state
         , role = role
         , organizationUrl = organizationUrl
         , organization = organization
         , user = user
         , permissions = permissions
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "role" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization" decodeOrganizationSimple)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "permissions"
                (Json.Decode.succeed
                    (\canCreateRepository ->
                        { canCreateRepository = canCreateRepository }
                    )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "can_create_repository"
                            Json.Decode.bool
                        )
                )
            )


encodeOrgMembership : OrgMembership -> Json.Encode.Value
encodeOrgMembership rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "state", Json.Encode.string rec.state )
        , ( "role", Json.Encode.string rec.role )
        , ( "organization_url", Json.Encode.string rec.organizationUrl )
        , ( "organization", encodeOrganizationSimple rec.organization )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "permissions"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "can_create_repository"
                      , Json.Encode.bool rec0.canCreateRepository
                      )
                    ]
            )
                rec.permissions
          )
        ]


type alias OrgHook =
    { id : Int
    , url : String
    , pingUrl : String
    , deliveriesUrl : String
    , name : String
    , events : List String
    , active : Bool
    , config :
        { url : String
        , insecureSsl : String
        , contentType : String
        , secret : String
        }
    , updatedAt : String
    , createdAt : String
    , type_ : String
    }


decodeOrgHook : Json.Decode.Decoder OrgHook
decodeOrgHook =
    Json.Decode.succeed
     (\id url pingUrl deliveriesUrl name events active config updatedAt createdAt type_ ->
         { id = id
         , url = url
         , pingUrl = pingUrl
         , deliveriesUrl = deliveriesUrl
         , name = name
         , events = events
         , active = active
         , config = config
         , updatedAt = updatedAt
         , createdAt = createdAt
         , type_ = type_
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ping_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deliveries_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "active" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "config"
                (Json.Decode.succeed
                  (\url insecureSsl contentType secret ->
                      { url = url
                      , insecureSsl = insecureSsl
                      , contentType = contentType
                      , secret = secret
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "insecure_ssl" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "content_type" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "secret" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)


encodeOrgHook : OrgHook -> Json.Encode.Value
encodeOrgHook rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "url", Json.Encode.string rec.url )
        , ( "ping_url", Json.Encode.string rec.pingUrl )
        , ( "deliveries_url", Json.Encode.string rec.deliveriesUrl )
        , ( "name", Json.Encode.string rec.name )
        , ( "events", Json.Encode.list Json.Encode.string rec.events )
        , ( "active", Json.Encode.bool rec.active )
        , ( "config"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "url", Json.Encode.string rec0.url )
                    , ( "insecure_ssl", Json.Encode.string rec0.insecureSsl )
                    , ( "content_type", Json.Encode.string rec0.contentType )
                    , ( "secret", Json.Encode.string rec0.secret )
                    ]
            )
                rec.config
          )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "type", Json.Encode.string rec.type_ )
        ]


type alias MovedColumnInProjectIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , projectCard :
        { id : Int
        , url : String
        , projectId : Int
        , projectUrl : String
        , columnName : String
        , previousColumnName : String
        }
    }


decodeMovedColumnInProjectIssueEvent :
    Json.Decode.Decoder MovedColumnInProjectIssueEvent
decodeMovedColumnInProjectIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp projectCard ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , projectCard = projectCard
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "project_card"
                (Json.Decode.succeed
                  (\id url projectId projectUrl columnName previousColumnName ->
                      { id = id
                      , url = url
                      , projectId = projectId
                      , projectUrl = projectUrl
                      , columnName = columnName
                      , previousColumnName = previousColumnName
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "id" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "project_id" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "project_url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "column_name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "previous_column_name"
                            Json.Decode.string
                        )
                )
            )


encodeMovedColumnInProjectIssueEvent :
    MovedColumnInProjectIssueEvent -> Json.Encode.Value
encodeMovedColumnInProjectIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "project_card"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "id", Json.Encode.int rec0.id )
                    , ( "url", Json.Encode.string rec0.url )
                    , ( "project_id", Json.Encode.int rec0.projectId )
                    , ( "project_url", Json.Encode.string rec0.projectUrl )
                    , ( "column_name", Json.Encode.string rec0.columnName )
                    , ( "previous_column_name"
                      , Json.Encode.string rec0.previousColumnName
                      )
                    ]
            )
                rec.projectCard
          )
        ]


type alias MinimalRepository =
    { id : Int
    , nodeId : String
    , name : String
    , fullName : String
    , owner : SimpleUser
    , private : Bool
    , htmlUrl : String
    , description : Nullable String
    , fork : Bool
    , url : String
    , archiveUrl : String
    , assigneesUrl : String
    , blobsUrl : String
    , branchesUrl : String
    , collaboratorsUrl : String
    , commentsUrl : String
    , commitsUrl : String
    , compareUrl : String
    , contentsUrl : String
    , contributorsUrl : String
    , deploymentsUrl : String
    , downloadsUrl : String
    , eventsUrl : String
    , forksUrl : String
    , gitCommitsUrl : String
    , gitRefsUrl : String
    , gitTagsUrl : String
    , gitUrl : String
    , issueCommentUrl : String
    , issueEventsUrl : String
    , issuesUrl : String
    , keysUrl : String
    , labelsUrl : String
    , languagesUrl : String
    , mergesUrl : String
    , milestonesUrl : String
    , notificationsUrl : String
    , pullsUrl : String
    , releasesUrl : String
    , sshUrl : String
    , stargazersUrl : String
    , statusesUrl : String
    , subscribersUrl : String
    , subscriptionUrl : String
    , tagsUrl : String
    , teamsUrl : String
    , treesUrl : String
    , cloneUrl : String
    , mirrorUrl : Nullable String
    , hooksUrl : String
    , svnUrl : String
    , homepage : Nullable String
    , language : Nullable String
    , forksCount : Int
    , stargazersCount : Int
    , watchersCount : Int
    , size : Int
    , defaultBranch : String
    , openIssuesCount : Int
    , isTemplate : Bool
    , topics : List String
    , hasIssues : Bool
    , hasProjects : Bool
    , hasWiki : Bool
    , hasPages : Bool
    , hasDownloads : Bool
    , archived : Bool
    , disabled : Bool
    , visibility : String
    , pushedAt : Nullable String
    , createdAt : Nullable String
    , updatedAt : Nullable String
    , permissions :
        { admin : Bool
        , maintain : Bool
        , push : Bool
        , triage : Bool
        , pull : Bool
        }
    , roleName : String
    , tempCloneToken : String
    , deleteBranchOnMerge : Bool
    , subscribersCount : Int
    , networkCount : Int
    , codeOfConduct : CodeOfConduct
    , license :
        Nullable { key : String
        , name : String
        , spdxId : String
        , url : String
        , nodeId : String
        }
    , forks : Int
    , openIssues : Int
    , watchers : Int
    , allowForking : Bool
    , webCommitSignoffRequired : Bool
    }


decodeMinimalRepository : Json.Decode.Decoder MinimalRepository
decodeMinimalRepository =
    Json.Decode.succeed
     (\id nodeId name fullName owner private htmlUrl description fork url archiveUrl assigneesUrl blobsUrl branchesUrl collaboratorsUrl commentsUrl commitsUrl compareUrl contentsUrl contributorsUrl deploymentsUrl downloadsUrl eventsUrl forksUrl gitCommitsUrl gitRefsUrl gitTagsUrl gitUrl issueCommentUrl issueEventsUrl issuesUrl keysUrl labelsUrl languagesUrl mergesUrl milestonesUrl notificationsUrl pullsUrl releasesUrl sshUrl stargazersUrl statusesUrl subscribersUrl subscriptionUrl tagsUrl teamsUrl treesUrl cloneUrl mirrorUrl hooksUrl svnUrl homepage language forksCount stargazersCount watchersCount size defaultBranch openIssuesCount isTemplate topics hasIssues hasProjects hasWiki hasPages hasDownloads archived disabled visibility pushedAt createdAt updatedAt permissions roleName tempCloneToken deleteBranchOnMerge subscribersCount networkCount codeOfConduct license forks openIssues watchers allowForking webCommitSignoffRequired ->
         { id = id
         , nodeId = nodeId
         , name = name
         , fullName = fullName
         , owner = owner
         , private = private
         , htmlUrl = htmlUrl
         , description = description
         , fork = fork
         , url = url
         , archiveUrl = archiveUrl
         , assigneesUrl = assigneesUrl
         , blobsUrl = blobsUrl
         , branchesUrl = branchesUrl
         , collaboratorsUrl = collaboratorsUrl
         , commentsUrl = commentsUrl
         , commitsUrl = commitsUrl
         , compareUrl = compareUrl
         , contentsUrl = contentsUrl
         , contributorsUrl = contributorsUrl
         , deploymentsUrl = deploymentsUrl
         , downloadsUrl = downloadsUrl
         , eventsUrl = eventsUrl
         , forksUrl = forksUrl
         , gitCommitsUrl = gitCommitsUrl
         , gitRefsUrl = gitRefsUrl
         , gitTagsUrl = gitTagsUrl
         , gitUrl = gitUrl
         , issueCommentUrl = issueCommentUrl
         , issueEventsUrl = issueEventsUrl
         , issuesUrl = issuesUrl
         , keysUrl = keysUrl
         , labelsUrl = labelsUrl
         , languagesUrl = languagesUrl
         , mergesUrl = mergesUrl
         , milestonesUrl = milestonesUrl
         , notificationsUrl = notificationsUrl
         , pullsUrl = pullsUrl
         , releasesUrl = releasesUrl
         , sshUrl = sshUrl
         , stargazersUrl = stargazersUrl
         , statusesUrl = statusesUrl
         , subscribersUrl = subscribersUrl
         , subscriptionUrl = subscriptionUrl
         , tagsUrl = tagsUrl
         , teamsUrl = teamsUrl
         , treesUrl = treesUrl
         , cloneUrl = cloneUrl
         , mirrorUrl = mirrorUrl
         , hooksUrl = hooksUrl
         , svnUrl = svnUrl
         , homepage = homepage
         , language = language
         , forksCount = forksCount
         , stargazersCount = stargazersCount
         , watchersCount = watchersCount
         , size = size
         , defaultBranch = defaultBranch
         , openIssuesCount = openIssuesCount
         , isTemplate = isTemplate
         , topics = topics
         , hasIssues = hasIssues
         , hasProjects = hasProjects
         , hasWiki = hasWiki
         , hasPages = hasPages
         , hasDownloads = hasDownloads
         , archived = archived
         , disabled = disabled
         , visibility = visibility
         , pushedAt = pushedAt
         , createdAt = createdAt
         , updatedAt = updatedAt
         , permissions = permissions
         , roleName = roleName
         , tempCloneToken = tempCloneToken
         , deleteBranchOnMerge = deleteBranchOnMerge
         , subscribersCount = subscribersCount
         , networkCount = networkCount
         , codeOfConduct = codeOfConduct
         , license = license
         , forks = forks
         , openIssues = openIssues
         , watchers = watchers
         , allowForking = allowForking
         , webCommitSignoffRequired = webCommitSignoffRequired
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "full_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "owner" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "private" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "fork" Json.Decode.bool)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archive_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assignees_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "blobs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "branches_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "collaborators_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "compare_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contents_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contributors_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deployments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "downloads_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_refs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_tags_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_comment_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issues_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "keys_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "labels_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "languages_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merges_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "milestones_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "notifications_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pulls_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "releases_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ssh_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "stargazers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "statuses_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscribers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscription_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tags_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "teams_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "trees_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "clone_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "mirror_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "hooks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "svn_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "homepage"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "language"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "stargazers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "watchers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "size" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "default_branch" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "open_issues_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "is_template" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "topics" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_issues" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_projects" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_wiki" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_pages" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_downloads" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archived" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "disabled" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "visibility" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pushed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "created_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "updated_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "permissions"
                (Json.Decode.succeed
                  (\admin maintain push triage pull ->
                      { admin = admin
                      , maintain = maintain
                      , push = push
                      , triage = triage
                      , pull = pull
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "admin" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "maintain" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "push" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "triage" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "pull" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "role_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "temp_clone_token" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "delete_branch_on_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscribers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "network_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "code_of_conduct" decodeCodeOfConduct)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "license"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.succeed
                          (\key name spdxId url nodeId ->
                              { key = key
                              , name = name
                              , spdxId = spdxId
                              , url = url
                              , nodeId = nodeId
                              }
                          )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "key" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "name" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "spdx_id" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "url" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "node_id" Json.Decode.string)
                        )
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "forks" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "open_issues" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "watchers" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_forking" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "web_commit_signoff_required" Json.Decode.bool)


encodeMinimalRepository : MinimalRepository -> Json.Encode.Value
encodeMinimalRepository rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "full_name", Json.Encode.string rec.fullName )
        , ( "owner", encodeSimpleUser rec.owner )
        , ( "private", Json.Encode.bool rec.private )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "fork", Json.Encode.bool rec.fork )
        , ( "url", Json.Encode.string rec.url )
        , ( "archive_url", Json.Encode.string rec.archiveUrl )
        , ( "assignees_url", Json.Encode.string rec.assigneesUrl )
        , ( "blobs_url", Json.Encode.string rec.blobsUrl )
        , ( "branches_url", Json.Encode.string rec.branchesUrl )
        , ( "collaborators_url", Json.Encode.string rec.collaboratorsUrl )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "commits_url", Json.Encode.string rec.commitsUrl )
        , ( "compare_url", Json.Encode.string rec.compareUrl )
        , ( "contents_url", Json.Encode.string rec.contentsUrl )
        , ( "contributors_url", Json.Encode.string rec.contributorsUrl )
        , ( "deployments_url", Json.Encode.string rec.deploymentsUrl )
        , ( "downloads_url", Json.Encode.string rec.downloadsUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "forks_url", Json.Encode.string rec.forksUrl )
        , ( "git_commits_url", Json.Encode.string rec.gitCommitsUrl )
        , ( "git_refs_url", Json.Encode.string rec.gitRefsUrl )
        , ( "git_tags_url", Json.Encode.string rec.gitTagsUrl )
        , ( "git_url", Json.Encode.string rec.gitUrl )
        , ( "issue_comment_url", Json.Encode.string rec.issueCommentUrl )
        , ( "issue_events_url", Json.Encode.string rec.issueEventsUrl )
        , ( "issues_url", Json.Encode.string rec.issuesUrl )
        , ( "keys_url", Json.Encode.string rec.keysUrl )
        , ( "labels_url", Json.Encode.string rec.labelsUrl )
        , ( "languages_url", Json.Encode.string rec.languagesUrl )
        , ( "merges_url", Json.Encode.string rec.mergesUrl )
        , ( "milestones_url", Json.Encode.string rec.milestonesUrl )
        , ( "notifications_url", Json.Encode.string rec.notificationsUrl )
        , ( "pulls_url", Json.Encode.string rec.pullsUrl )
        , ( "releases_url", Json.Encode.string rec.releasesUrl )
        , ( "ssh_url", Json.Encode.string rec.sshUrl )
        , ( "stargazers_url", Json.Encode.string rec.stargazersUrl )
        , ( "statuses_url", Json.Encode.string rec.statusesUrl )
        , ( "subscribers_url", Json.Encode.string rec.subscribersUrl )
        , ( "subscription_url", Json.Encode.string rec.subscriptionUrl )
        , ( "tags_url", Json.Encode.string rec.tagsUrl )
        , ( "teams_url", Json.Encode.string rec.teamsUrl )
        , ( "trees_url", Json.Encode.string rec.treesUrl )
        , ( "clone_url", Json.Encode.string rec.cloneUrl )
        , ( "mirror_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.mirrorUrl
          )
        , ( "hooks_url", Json.Encode.string rec.hooksUrl )
        , ( "svn_url", Json.Encode.string rec.svnUrl )
        , ( "homepage"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.homepage
          )
        , ( "language"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.language
          )
        , ( "forks_count", Json.Encode.int rec.forksCount )
        , ( "stargazers_count", Json.Encode.int rec.stargazersCount )
        , ( "watchers_count", Json.Encode.int rec.watchersCount )
        , ( "size", Json.Encode.int rec.size )
        , ( "default_branch", Json.Encode.string rec.defaultBranch )
        , ( "open_issues_count", Json.Encode.int rec.openIssuesCount )
        , ( "is_template", Json.Encode.bool rec.isTemplate )
        , ( "topics", Json.Encode.list Json.Encode.string rec.topics )
        , ( "has_issues", Json.Encode.bool rec.hasIssues )
        , ( "has_projects", Json.Encode.bool rec.hasProjects )
        , ( "has_wiki", Json.Encode.bool rec.hasWiki )
        , ( "has_pages", Json.Encode.bool rec.hasPages )
        , ( "has_downloads", Json.Encode.bool rec.hasDownloads )
        , ( "archived", Json.Encode.bool rec.archived )
        , ( "disabled", Json.Encode.bool rec.disabled )
        , ( "visibility", Json.Encode.string rec.visibility )
        , ( "pushed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.pushedAt
          )
        , ( "created_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.createdAt
          )
        , ( "updated_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.updatedAt
          )
        , ( "permissions"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "admin", Json.Encode.bool rec0.admin )
                    , ( "maintain", Json.Encode.bool rec0.maintain )
                    , ( "push", Json.Encode.bool rec0.push )
                    , ( "triage", Json.Encode.bool rec0.triage )
                    , ( "pull", Json.Encode.bool rec0.pull )
                    ]
            )
                rec.permissions
          )
        , ( "role_name", Json.Encode.string rec.roleName )
        , ( "temp_clone_token", Json.Encode.string rec.tempCloneToken )
        , ( "delete_branch_on_merge", Json.Encode.bool rec.deleteBranchOnMerge )
        , ( "subscribers_count", Json.Encode.int rec.subscribersCount )
        , ( "network_count", Json.Encode.int rec.networkCount )
        , ( "code_of_conduct", encodeCodeOfConduct rec.codeOfConduct )
        , ( "license"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        (\rec0 ->
                            Json.Encode.object
                                [ ( "key", Json.Encode.string rec0.key )
                                , ( "name", Json.Encode.string rec0.name )
                                , ( "spdx_id", Json.Encode.string rec0.spdxId )
                                , ( "url", Json.Encode.string rec0.url )
                                , ( "node_id", Json.Encode.string rec0.nodeId )
                                ]
                        )
                            value
            )
                rec.license
          )
        , ( "forks", Json.Encode.int rec.forks )
        , ( "open_issues", Json.Encode.int rec.openIssues )
        , ( "watchers", Json.Encode.int rec.watchers )
        , ( "allow_forking", Json.Encode.bool rec.allowForking )
        , ( "web_commit_signoff_required"
          , Json.Encode.bool rec.webCommitSignoffRequired
          )
        ]


type alias MilestonedIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , milestone : { title : String }
    }


decodeMilestonedIssueEvent : Json.Decode.Decoder MilestonedIssueEvent
decodeMilestonedIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp milestone ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , milestone = milestone
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "milestone"
                (Json.Decode.succeed (\title -> { title = title })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "title" Json.Decode.string)
                )
            )


encodeMilestonedIssueEvent : MilestonedIssueEvent -> Json.Encode.Value
encodeMilestonedIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "milestone"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "title", Json.Encode.string rec0.title ) ]
            )
                rec.milestone
          )
        ]


type alias Milestone =
    { url : String
    , htmlUrl : String
    , labelsUrl : String
    , id : Int
    , nodeId : String
    , number : Int
    , state : String
    , title : String
    , description : Nullable String
    , creator : Debug.Todo
    , openIssues : Int
    , closedIssues : Int
    , createdAt : String
    , updatedAt : String
    , closedAt : Nullable String
    , dueOn : Nullable String
    }


decodeMilestone : Json.Decode.Decoder Milestone
decodeMilestone =
    Json.Decode.succeed
     (\url htmlUrl labelsUrl id nodeId number state title description creator openIssues closedIssues createdAt updatedAt closedAt dueOn ->
         { url = url
         , htmlUrl = htmlUrl
         , labelsUrl = labelsUrl
         , id = id
         , nodeId = nodeId
         , number = number
         , state = state
         , title = title
         , description = description
         , creator = creator
         , openIssues = openIssues
         , closedIssues = closedIssues
         , createdAt = createdAt
         , updatedAt = updatedAt
         , closedAt = closedAt
         , dueOn = dueOn
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "labels_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "number" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "creator"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "open_issues" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "closed_issues" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "closed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "due_on"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeMilestone : Milestone -> Json.Encode.Value
encodeMilestone rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "labels_url", Json.Encode.string rec.labelsUrl )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "number", Json.Encode.int rec.number )
        , ( "state", Json.Encode.string rec.state )
        , ( "title", Json.Encode.string rec.title )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "creator", Debug.todo "decode anyOf" rec.creator )
        , ( "open_issues", Json.Encode.int rec.openIssues )
        , ( "closed_issues", Json.Encode.int rec.closedIssues )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "closed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.closedAt
          )
        , ( "due_on"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.dueOn
          )
        ]


type alias Migration =
    { id : Int
    , owner : Debug.Todo
    , guid : String
    , state : String
    , lockRepositories : Bool
    , excludeMetadata : Bool
    , excludeGitData : Bool
    , excludeAttachments : Bool
    , excludeReleases : Bool
    , excludeOwnerProjects : Bool
    , orgMetadataOnly : Bool
    , repositories : List Repository
    , url : String
    , createdAt : String
    , updatedAt : String
    , nodeId : String
    , archiveUrl : String
    , exclude : List Json.Encode.Value
    }


decodeMigration : Json.Decode.Decoder Migration
decodeMigration =
    Json.Decode.succeed
     (\id owner guid state lockRepositories excludeMetadata excludeGitData excludeAttachments excludeReleases excludeOwnerProjects orgMetadataOnly repositories url createdAt updatedAt nodeId archiveUrl exclude ->
         { id = id
         , owner = owner
         , guid = guid
         , state = state
         , lockRepositories = lockRepositories
         , excludeMetadata = excludeMetadata
         , excludeGitData = excludeGitData
         , excludeAttachments = excludeAttachments
         , excludeReleases = excludeReleases
         , excludeOwnerProjects = excludeOwnerProjects
         , orgMetadataOnly = orgMetadataOnly
         , repositories = repositories
         , url = url
         , createdAt = createdAt
         , updatedAt = updatedAt
         , nodeId = nodeId
         , archiveUrl = archiveUrl
         , exclude = exclude
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "owner"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "guid" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "lock_repositories" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "exclude_metadata" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "exclude_git_data" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "exclude_attachments" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "exclude_releases" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "exclude_owner_projects" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "org_metadata_only" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "repositories"
                (Json.Decode.list decodeRepository)
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archive_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "exclude" (Json.Decode.list Json.Decode.value))


encodeMigration : Migration -> Json.Encode.Value
encodeMigration rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "owner", Debug.todo "decode anyOf" rec.owner )
        , ( "guid", Json.Encode.string rec.guid )
        , ( "state", Json.Encode.string rec.state )
        , ( "lock_repositories", Json.Encode.bool rec.lockRepositories )
        , ( "exclude_metadata", Json.Encode.bool rec.excludeMetadata )
        , ( "exclude_git_data", Json.Encode.bool rec.excludeGitData )
        , ( "exclude_attachments", Json.Encode.bool rec.excludeAttachments )
        , ( "exclude_releases", Json.Encode.bool rec.excludeReleases )
        , ( "exclude_owner_projects"
          , Json.Encode.bool rec.excludeOwnerProjects
          )
        , ( "org_metadata_only", Json.Encode.bool rec.orgMetadataOnly )
        , ( "repositories", Json.Encode.list encodeRepository rec.repositories )
        , ( "url", Json.Encode.string rec.url )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "archive_url", Json.Encode.string rec.archiveUrl )
        , ( "exclude", Json.Encode.list Json.Decode.value rec.exclude )
        ]


type alias Metadata =
    {}


decodeMetadata : Json.Decode.Decoder Metadata
decodeMetadata =
    Json.Decode.succeed {}


encodeMetadata : Metadata -> Json.Encode.Value
encodeMetadata rec =
    Json.Encode.object []


type alias MergedUpstream =
    { message : String, mergeType : String, baseBranch : String }


decodeMergedUpstream : Json.Decode.Decoder MergedUpstream
decodeMergedUpstream =
    Json.Decode.succeed
     (\message mergeType baseBranch ->
         { message = message, mergeType = mergeType, baseBranch = baseBranch }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "message" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merge_type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "base_branch" Json.Decode.string)


encodeMergedUpstream : MergedUpstream -> Json.Encode.Value
encodeMergedUpstream rec =
    Json.Encode.object
        [ ( "message", Json.Encode.string rec.message )
        , ( "merge_type", Json.Encode.string rec.mergeType )
        , ( "base_branch", Json.Encode.string rec.baseBranch )
        ]


type alias MarketplacePurchase =
    { url : String
    , type_ : String
    , id : Int
    , login : String
    , organizationBillingEmail : String
    , email : Nullable String
    , marketplacePendingChange :
        Nullable { isInstalled : Bool
        , effectiveDate : String
        , unitCount : Nullable Int
        , id : Int
        , plan : MarketplaceListingPlan
        }
    , marketplacePurchase :
        { billingCycle : String
        , nextBillingDate : Nullable String
        , isInstalled : Bool
        , unitCount : Nullable Int
        , onFreeTrial : Bool
        , freeTrialEndsOn : Nullable String
        , updatedAt : String
        , plan : MarketplaceListingPlan
        }
    }


decodeMarketplacePurchase : Json.Decode.Decoder MarketplacePurchase
decodeMarketplacePurchase =
    Json.Decode.succeed
     (\url type_ id login organizationBillingEmail email marketplacePendingChange marketplacePurchase ->
         { url = url
         , type_ = type_
         , id = id
         , login = login
         , organizationBillingEmail = organizationBillingEmail
         , email = email
         , marketplacePendingChange = marketplacePendingChange
         , marketplacePurchase = marketplacePurchase
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "login" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_billing_email" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "email"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "marketplace_pending_change"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.succeed
                          (\isInstalled effectiveDate unitCount id plan ->
                              { isInstalled = isInstalled
                              , effectiveDate = effectiveDate
                              , unitCount = unitCount
                              , id = id
                              , plan = plan
                              }
                          )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "is_installed"
                                    Json.Decode.bool
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "effective_date"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "unit_count"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.int
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "id" Json.Decode.int)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "plan"
                                    decodeMarketplaceListingPlan
                                )
                        )
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "marketplace_purchase"
                (Json.Decode.succeed
                  (\billingCycle nextBillingDate isInstalled unitCount onFreeTrial freeTrialEndsOn updatedAt plan ->
                      { billingCycle = billingCycle
                      , nextBillingDate = nextBillingDate
                      , isInstalled = isInstalled
                      , unitCount = unitCount
                      , onFreeTrial = onFreeTrial
                      , freeTrialEndsOn = freeTrialEndsOn
                      , updatedAt = updatedAt
                      , plan = plan
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "billing_cycle" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "next_billing_date"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "is_installed" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "unit_count"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.int
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "on_free_trial" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "free_trial_ends_on"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "updated_at" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "plan" decodeMarketplaceListingPlan)
                )
            )


encodeMarketplacePurchase : MarketplacePurchase -> Json.Encode.Value
encodeMarketplacePurchase rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "type", Json.Encode.string rec.type_ )
        , ( "id", Json.Encode.int rec.id )
        , ( "login", Json.Encode.string rec.login )
        , ( "organization_billing_email"
          , Json.Encode.string rec.organizationBillingEmail
          )
        , ( "email"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.email
          )
        , ( "marketplace_pending_change"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        (\rec0 ->
                            Json.Encode.object
                                [ ( "is_installed"
                                  , Json.Encode.bool rec0.isInstalled
                                  )
                                , ( "effective_date"
                                  , Json.Encode.string rec0.effectiveDate
                                  )
                                , ( "unit_count"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.int value0
                                    )
                                        rec0.unitCount
                                  )
                                , ( "id", Json.Encode.int rec0.id )
                                , ( "plan"
                                  , encodeMarketplaceListingPlan rec0.plan
                                  )
                                ]
                        )
                            value
            )
                rec.marketplacePendingChange
          )
        , ( "marketplace_purchase"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "billing_cycle", Json.Encode.string rec0.billingCycle )
                    , ( "next_billing_date"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.nextBillingDate
                      )
                    , ( "is_installed", Json.Encode.bool rec0.isInstalled )
                    , ( "unit_count"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.int value
                        )
                            rec0.unitCount
                      )
                    , ( "on_free_trial", Json.Encode.bool rec0.onFreeTrial )
                    , ( "free_trial_ends_on"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.freeTrialEndsOn
                      )
                    , ( "updated_at", Json.Encode.string rec0.updatedAt )
                    , ( "plan", encodeMarketplaceListingPlan rec0.plan )
                    ]
            )
                rec.marketplacePurchase
          )
        ]


type alias MarketplaceListingPlan =
    { url : String
    , accountsUrl : String
    , id : Int
    , number : Int
    , name : String
    , description : String
    , monthlyPriceInCents : Int
    , yearlyPriceInCents : Int
    , priceModel : String
    , hasFreeTrial : Bool
    , unitName : Nullable String
    , state : String
    , bullets : List String
    }


decodeMarketplaceListingPlan : Json.Decode.Decoder MarketplaceListingPlan
decodeMarketplaceListingPlan =
    Json.Decode.succeed
     (\url accountsUrl id number name description monthlyPriceInCents yearlyPriceInCents priceModel hasFreeTrial unitName state bullets ->
         { url = url
         , accountsUrl = accountsUrl
         , id = id
         , number = number
         , name = name
         , description = description
         , monthlyPriceInCents = monthlyPriceInCents
         , yearlyPriceInCents = yearlyPriceInCents
         , priceModel = priceModel
         , hasFreeTrial = hasFreeTrial
         , unitName = unitName
         , state = state
         , bullets = bullets
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "accounts_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "number" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "description" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "monthly_price_in_cents" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "yearly_price_in_cents" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "price_model" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_free_trial" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "unit_name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "bullets" (Json.Decode.list Json.Decode.string))


encodeMarketplaceListingPlan : MarketplaceListingPlan -> Json.Encode.Value
encodeMarketplaceListingPlan rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "accounts_url", Json.Encode.string rec.accountsUrl )
        , ( "id", Json.Encode.int rec.id )
        , ( "number", Json.Encode.int rec.number )
        , ( "name", Json.Encode.string rec.name )
        , ( "description", Json.Encode.string rec.description )
        , ( "monthly_price_in_cents", Json.Encode.int rec.monthlyPriceInCents )
        , ( "yearly_price_in_cents", Json.Encode.int rec.yearlyPriceInCents )
        , ( "price_model", Json.Encode.string rec.priceModel )
        , ( "has_free_trial", Json.Encode.bool rec.hasFreeTrial )
        , ( "unit_name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.unitName
          )
        , ( "state", Json.Encode.string rec.state )
        , ( "bullets", Json.Encode.list Json.Encode.string rec.bullets )
        ]


type alias MarketplaceAccount =
    { url : String
    , id : Int
    , type_ : String
    , nodeId : String
    , login : String
    , email : Nullable String
    , organizationBillingEmail : Nullable String
    }


decodeMarketplaceAccount : Json.Decode.Decoder MarketplaceAccount
decodeMarketplaceAccount =
    Json.Decode.succeed
     (\url id type_ nodeId login email organizationBillingEmail ->
         { url = url
         , id = id
         , type_ = type_
         , nodeId = nodeId
         , login = login
         , email = email
         , organizationBillingEmail = organizationBillingEmail
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "login" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "email"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "organization_billing_email"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeMarketplaceAccount : MarketplaceAccount -> Json.Encode.Value
encodeMarketplaceAccount rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "id", Json.Encode.int rec.id )
        , ( "type", Json.Encode.string rec.type_ )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "login", Json.Encode.string rec.login )
        , ( "email"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.email
          )
        , ( "organization_billing_email"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.organizationBillingEmail
          )
        ]


type alias Manifest =
    { name : String
    , file : { sourceLocation : String }
    , metadata : Metadata
    , resolved : {}
    }


decodeManifest : Json.Decode.Decoder Manifest
decodeManifest =
    Json.Decode.succeed
     (\name file metadata resolved ->
         { name = name, file = file, metadata = metadata, resolved = resolved }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "file"
                (Json.Decode.succeed
                    (\sourceLocation -> { sourceLocation = sourceLocation })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "source_location" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "metadata" decodeMetadata)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "resolved" (Json.Decode.succeed {}))


encodeManifest : Manifest -> Json.Encode.Value
encodeManifest rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "file"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "source_location"
                      , Json.Encode.string rec0.sourceLocation
                      )
                    ]
            )
                rec.file
          )
        , ( "metadata", encodeMetadata rec.metadata )
        , ( "resolved", (\rec0 -> Json.Encode.object []) rec.resolved )
        ]


type alias LockedIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , lockReason : Nullable String
    }


decodeLockedIssueEvent : Json.Decode.Decoder LockedIssueEvent
decodeLockedIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp lockReason ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , lockReason = lockReason
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "lock_reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeLockedIssueEvent : LockedIssueEvent -> Json.Encode.Value
encodeLockedIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "lock_reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.lockReason
          )
        ]


type alias LinkWithType =
    { href : String, type_ : String }


decodeLinkWithType : Json.Decode.Decoder LinkWithType
decodeLinkWithType =
    Json.Decode.succeed (\href type_ -> { href = href, type_ = type_ })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "href" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)


encodeLinkWithType : LinkWithType -> Json.Encode.Value
encodeLinkWithType rec =
    Json.Encode.object
        [ ( "href", Json.Encode.string rec.href )
        , ( "type", Json.Encode.string rec.type_ )
        ]


type alias Link =
    { href : String }


decodeLink : Json.Decode.Decoder Link
decodeLink =
    Json.Decode.succeed (\href -> { href = href })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "href" Json.Decode.string)


encodeLink : Link -> Json.Encode.Value
encodeLink rec =
    Json.Encode.object [ ( "href", Json.Encode.string rec.href ) ]


type alias LicenseSimple =
    { key : String
    , name : String
    , url : Nullable String
    , spdxId : Nullable String
    , nodeId : String
    , htmlUrl : String
    }


decodeLicenseSimple : Json.Decode.Decoder LicenseSimple
decodeLicenseSimple =
    Json.Decode.succeed
     (\key name url spdxId nodeId htmlUrl ->
         { key = key
         , name = name
         , url = url
         , spdxId = spdxId
         , nodeId = nodeId
         , htmlUrl = htmlUrl
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "key" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "spdx_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)


encodeLicenseSimple : LicenseSimple -> Json.Encode.Value
encodeLicenseSimple rec =
    Json.Encode.object
        [ ( "key", Json.Encode.string rec.key )
        , ( "name", Json.Encode.string rec.name )
        , ( "url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.url
          )
        , ( "spdx_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.spdxId
          )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        ]


type alias LicenseContent =
    { name : String
    , path : String
    , sha : String
    , size : Int
    , url : String
    , htmlUrl : Nullable String
    , gitUrl : Nullable String
    , downloadUrl : Nullable String
    , type_ : String
    , content : String
    , encoding : String
    , links : { git : Nullable String, html : Nullable String, self : String }
    , license : Debug.Todo
    }


decodeLicenseContent : Json.Decode.Decoder LicenseContent
decodeLicenseContent =
    Json.Decode.succeed
     (\name path sha size url htmlUrl gitUrl downloadUrl type_ content encoding links license ->
         { name = name
         , path = path
         , sha = sha
         , size = size
         , url = url
         , htmlUrl = htmlUrl
         , gitUrl = gitUrl
         , downloadUrl = downloadUrl
         , type_ = type_
         , content = content
         , encoding = encoding
         , links = links
         , license = license
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "size" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "html_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "git_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "download_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "content" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "encoding" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "_links"
                (Json.Decode.succeed
                  (\git html self -> { git = git, html = html, self = self })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "git"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "html"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "self" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "license"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeLicenseSimple
                    , Json.Decode.null Null
                    ]
                )
            )


encodeLicenseContent : LicenseContent -> Json.Encode.Value
encodeLicenseContent rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "path", Json.Encode.string rec.path )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "size", Json.Encode.int rec.size )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.htmlUrl
          )
        , ( "git_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.gitUrl
          )
        , ( "download_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.downloadUrl
          )
        , ( "type", Json.Encode.string rec.type_ )
        , ( "content", Json.Encode.string rec.content )
        , ( "encoding", Json.Encode.string rec.encoding )
        , ( "_links"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "git"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.git
                      )
                    , ( "html"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.html
                      )
                    , ( "self", Json.Encode.string rec0.self )
                    ]
            )
                rec.links
          )
        , ( "license", Debug.todo "decode anyOf" rec.license )
        ]


type alias License =
    { key : String
    , name : String
    , spdxId : Nullable String
    , url : Nullable String
    , nodeId : String
    , htmlUrl : String
    , description : String
    , implementation : String
    , permissions : List String
    , conditions : List String
    , limitations : List String
    , body : String
    , featured : Bool
    }


decodeLicense : Json.Decode.Decoder License
decodeLicense =
    Json.Decode.succeed
     (\key name spdxId url nodeId htmlUrl description implementation permissions conditions limitations body featured ->
         { key = key
         , name = name
         , spdxId = spdxId
         , url = url
         , nodeId = nodeId
         , htmlUrl = htmlUrl
         , description = description
         , implementation = implementation
         , permissions = permissions
         , conditions = conditions
         , limitations = limitations
         , body = body
         , featured = featured
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "key" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "spdx_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "description" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "implementation" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "permissions"
                (Json.Decode.list Json.Decode.string)
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "conditions"
                (Json.Decode.list Json.Decode.string)
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "limitations"
                (Json.Decode.list Json.Decode.string)
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "featured" Json.Decode.bool)


encodeLicense : License -> Json.Encode.Value
encodeLicense rec =
    Json.Encode.object
        [ ( "key", Json.Encode.string rec.key )
        , ( "name", Json.Encode.string rec.name )
        , ( "spdx_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.spdxId
          )
        , ( "url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.url
          )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "description", Json.Encode.string rec.description )
        , ( "implementation", Json.Encode.string rec.implementation )
        , ( "permissions", Json.Encode.list Json.Encode.string rec.permissions )
        , ( "conditions", Json.Encode.list Json.Encode.string rec.conditions )
        , ( "limitations", Json.Encode.list Json.Encode.string rec.limitations )
        , ( "body", Json.Encode.string rec.body )
        , ( "featured", Json.Encode.bool rec.featured )
        ]


type alias Language =
    {}


decodeLanguage : Json.Decode.Decoder Language
decodeLanguage =
    Json.Decode.succeed {}


encodeLanguage : Language -> Json.Encode.Value
encodeLanguage rec =
    Json.Encode.object []


type alias LabeledIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , label : { name : String, color : String }
    }


decodeLabeledIssueEvent : Json.Decode.Decoder LabeledIssueEvent
decodeLabeledIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp label ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , label = label
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "label"
                (Json.Decode.succeed
                  (\name color -> { name = name, color = color })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "color" Json.Decode.string)
                )
            )


encodeLabeledIssueEvent : LabeledIssueEvent -> Json.Encode.Value
encodeLabeledIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "label"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "name", Json.Encode.string rec0.name )
                    , ( "color", Json.Encode.string rec0.color )
                    ]
            )
                rec.label
          )
        ]


type alias LabelSearchResultItem =
    { id : Int
    , nodeId : String
    , url : String
    , name : String
    , color : String
    , default : Bool
    , description : Nullable String
    , score : Float
    , textMatches : SearchResultTextMatches
    }


decodeLabelSearchResultItem : Json.Decode.Decoder LabelSearchResultItem
decodeLabelSearchResultItem =
    Json.Decode.succeed
     (\id nodeId url name color default description score textMatches ->
         { id = id
         , nodeId = nodeId
         , url = url
         , name = name
         , color = color
         , default = default
         , description = description
         , score = score
         , textMatches = textMatches
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "color" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "default" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "score" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "text_matches" decodeSearchResultTextMatches)


encodeLabelSearchResultItem : LabelSearchResultItem -> Json.Encode.Value
encodeLabelSearchResultItem rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "name", Json.Encode.string rec.name )
        , ( "color", Json.Encode.string rec.color )
        , ( "default", Json.Encode.bool rec.default )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "score", Json.Encode.float rec.score )
        , ( "text_matches", encodeSearchResultTextMatches rec.textMatches )
        ]


type alias Label =
    { id : Int
    , nodeId : String
    , url : String
    , name : String
    , description : Nullable String
    , color : String
    , default : Bool
    }


decodeLabel : Json.Decode.Decoder Label
decodeLabel =
    Json.Decode.succeed
     (\id nodeId url name description color default ->
         { id = id
         , nodeId = nodeId
         , url = url
         , name = name
         , description = description
         , color = color
         , default = default
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "color" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "default" Json.Decode.bool)


encodeLabel : Label -> Json.Encode.Value
encodeLabel rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "name", Json.Encode.string rec.name )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "color", Json.Encode.string rec.color )
        , ( "default", Json.Encode.bool rec.default )
        ]


type alias KeySimple =
    { id : Int, key : String }


decodeKeySimple : Json.Decode.Decoder KeySimple
decodeKeySimple =
    Json.Decode.succeed (\id key -> { id = id, key = key })
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "key" Json.Decode.string)


encodeKeySimple : KeySimple -> Json.Encode.Value
encodeKeySimple rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "key", Json.Encode.string rec.key )
        ]


type alias Key =
    { key : String
    , id : Int
    , url : String
    , title : String
    , createdAt : String
    , verified : Bool
    , readOnly : Bool
    }


decodeKey : Json.Decode.Decoder Key
decodeKey =
    Json.Decode.succeed
     (\key id url title createdAt verified readOnly ->
         { key = key
         , id = id
         , url = url
         , title = title
         , createdAt = createdAt
         , verified = verified
         , readOnly = readOnly
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "key" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "verified" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "read_only" Json.Decode.bool)


encodeKey : Key -> Json.Encode.Value
encodeKey rec =
    Json.Encode.object
        [ ( "key", Json.Encode.string rec.key )
        , ( "id", Json.Encode.int rec.id )
        , ( "url", Json.Encode.string rec.url )
        , ( "title", Json.Encode.string rec.title )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "verified", Json.Encode.bool rec.verified )
        , ( "read_only", Json.Encode.bool rec.readOnly )
        ]


type alias Job =
    { id : Int
    , runId : Int
    , runUrl : String
    , runAttempt : Int
    , nodeId : String
    , headSha : String
    , url : String
    , htmlUrl : Nullable String
    , status : String
    , conclusion : Nullable String
    , startedAt : String
    , completedAt : Nullable String
    , name : String
    , steps :
        List { status : String
        , conclusion : Nullable String
        , name : String
        , number : Int
        , startedAt : Nullable String
        , completedAt : Nullable String
        }
    , checkRunUrl : String
    , labels : List String
    , runnerId : Nullable Int
    , runnerName : Nullable String
    , runnerGroupId : Nullable Int
    , runnerGroupName : Nullable String
    }


decodeJob : Json.Decode.Decoder Job
decodeJob =
    Json.Decode.succeed
     (\id runId runUrl runAttempt nodeId headSha url htmlUrl status conclusion startedAt completedAt name steps checkRunUrl labels runnerId runnerName runnerGroupId runnerGroupName ->
         { id = id
         , runId = runId
         , runUrl = runUrl
         , runAttempt = runAttempt
         , nodeId = nodeId
         , headSha = headSha
         , url = url
         , htmlUrl = htmlUrl
         , status = status
         , conclusion = conclusion
         , startedAt = startedAt
         , completedAt = completedAt
         , name = name
         , steps = steps
         , checkRunUrl = checkRunUrl
         , labels = labels
         , runnerId = runnerId
         , runnerName = runnerName
         , runnerGroupId = runnerGroupId
         , runnerGroupName = runnerGroupName
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "run_id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "run_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "run_attempt" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "head_sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "html_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "conclusion"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "started_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "completed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "steps"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\status conclusion name number startedAt completedAt ->
                          { status = status
                          , conclusion = conclusion
                          , name = name
                          , number = number
                          , startedAt = startedAt
                          , completedAt = completedAt
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "status" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "conclusion"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "name" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "number" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "started_at"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "completed_at"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "check_run_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "labels" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "runner_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "runner_name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "runner_group_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "runner_group_name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeJob : Job -> Json.Encode.Value
encodeJob rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "run_id", Json.Encode.int rec.runId )
        , ( "run_url", Json.Encode.string rec.runUrl )
        , ( "run_attempt", Json.Encode.int rec.runAttempt )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "head_sha", Json.Encode.string rec.headSha )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.htmlUrl
          )
        , ( "status", Json.Encode.string rec.status )
        , ( "conclusion"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.conclusion
          )
        , ( "started_at", Json.Encode.string rec.startedAt )
        , ( "completed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.completedAt
          )
        , ( "name", Json.Encode.string rec.name )
        , ( "steps"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "status", Json.Encode.string rec0.status )
                        , ( "conclusion"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.string value
                            )
                                rec0.conclusion
                          )
                        , ( "name", Json.Encode.string rec0.name )
                        , ( "number", Json.Encode.int rec0.number )
                        , ( "started_at"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.string value
                            )
                                rec0.startedAt
                          )
                        , ( "completed_at"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.string value
                            )
                                rec0.completedAt
                          )
                        ]
                )
                rec.steps
          )
        , ( "check_run_url", Json.Encode.string rec.checkRunUrl )
        , ( "labels", Json.Encode.list Json.Encode.string rec.labels )
        , ( "runner_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.runnerId
          )
        , ( "runner_name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.runnerName
          )
        , ( "runner_group_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.runnerGroupId
          )
        , ( "runner_group_name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.runnerGroupName
          )
        ]


type alias IssueSearchResultItem =
    { url : String
    , repositoryUrl : String
    , labelsUrl : String
    , commentsUrl : String
    , eventsUrl : String
    , htmlUrl : String
    , id : Int
    , nodeId : String
    , number : Int
    , title : String
    , locked : Bool
    , activeLockReason : Nullable String
    , assignees : Nullable (List SimpleUser)
    , user : Debug.Todo
    , labels :
        List { id : Int
        , nodeId : String
        , url : String
        , name : String
        , color : String
        , default : Bool
        , description : Nullable String
        }
    , state : String
    , stateReason : Nullable String
    , assignee : Debug.Todo
    , milestone : Debug.Todo
    , comments : Int
    , createdAt : String
    , updatedAt : String
    , closedAt : Nullable String
    , textMatches : SearchResultTextMatches
    , pullRequest :
        { mergedAt : Nullable String
        , diffUrl : Nullable String
        , htmlUrl : Nullable String
        , patchUrl : Nullable String
        , url : Nullable String
        }
    , body : String
    , score : Float
    , authorAssociation : AuthorAssociation
    , draft : Bool
    , repository : Repository
    , bodyHtml : String
    , bodyText : String
    , timelineUrl : String
    , performedViaGithubApp : Debug.Todo
    , reactions : ReactionRollup
    }


decodeIssueSearchResultItem : Json.Decode.Decoder IssueSearchResultItem
decodeIssueSearchResultItem =
    Json.Decode.succeed
     (\url repositoryUrl labelsUrl commentsUrl eventsUrl htmlUrl id nodeId number title locked activeLockReason assignees user labels state stateReason assignee milestone comments createdAt updatedAt closedAt textMatches pullRequest body score authorAssociation draft repository bodyHtml bodyText timelineUrl performedViaGithubApp reactions ->
         { url = url
         , repositoryUrl = repositoryUrl
         , labelsUrl = labelsUrl
         , commentsUrl = commentsUrl
         , eventsUrl = eventsUrl
         , htmlUrl = htmlUrl
         , id = id
         , nodeId = nodeId
         , number = number
         , title = title
         , locked = locked
         , activeLockReason = activeLockReason
         , assignees = assignees
         , user = user
         , labels = labels
         , state = state
         , stateReason = stateReason
         , assignee = assignee
         , milestone = milestone
         , comments = comments
         , createdAt = createdAt
         , updatedAt = updatedAt
         , closedAt = closedAt
         , textMatches = textMatches
         , pullRequest = pullRequest
         , body = body
         , score = score
         , authorAssociation = authorAssociation
         , draft = draft
         , repository = repository
         , bodyHtml = bodyHtml
         , bodyText = bodyText
         , timelineUrl = timelineUrl
         , performedViaGithubApp = performedViaGithubApp
         , reactions = reactions
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "labels_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "number" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "locked" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "active_lock_reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "assignees"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list decodeSimpleUser)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "labels"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\id nodeId url name color default description ->
                          { id = id
                          , nodeId = nodeId
                          , url = url
                          , name = name
                          , color = color
                          , default = default
                          , description = description
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "id" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "node_id" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "name" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "color" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "default" Json.Decode.bool)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "description"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "state_reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "assignee"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "milestone"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeMilestone
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "closed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "text_matches" decodeSearchResultTextMatches)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pull_request"
                (Json.Decode.succeed
                  (\mergedAt diffUrl htmlUrl patchUrl url ->
                      { mergedAt = mergedAt
                      , diffUrl = diffUrl
                      , htmlUrl = htmlUrl
                      , patchUrl = patchUrl
                      , url = url
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "merged_at"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "diff_url"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "html_url"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "patch_url"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "url"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "score" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author_association" decodeAuthorAssociation)
        |> Json.Decode.Extra.andMap (Json.Decode.field "draft" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_html" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_text" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "timeline_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "reactions" decodeReactionRollup)


encodeIssueSearchResultItem : IssueSearchResultItem -> Json.Encode.Value
encodeIssueSearchResultItem rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "repository_url", Json.Encode.string rec.repositoryUrl )
        , ( "labels_url", Json.Encode.string rec.labelsUrl )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "number", Json.Encode.int rec.number )
        , ( "title", Json.Encode.string rec.title )
        , ( "locked", Json.Encode.bool rec.locked )
        , ( "active_lock_reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.activeLockReason
          )
        , ( "assignees"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list encodeSimpleUser value
            )
                rec.assignees
          )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "labels"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "id", Json.Encode.int rec0.id )
                        , ( "node_id", Json.Encode.string rec0.nodeId )
                        , ( "url", Json.Encode.string rec0.url )
                        , ( "name", Json.Encode.string rec0.name )
                        , ( "color", Json.Encode.string rec0.color )
                        , ( "default", Json.Encode.bool rec0.default )
                        , ( "description"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.string value
                            )
                                rec0.description
                          )
                        ]
                )
                rec.labels
          )
        , ( "state", Json.Encode.string rec.state )
        , ( "state_reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.stateReason
          )
        , ( "assignee", Debug.todo "decode anyOf" rec.assignee )
        , ( "milestone", Debug.todo "decode anyOf" rec.milestone )
        , ( "comments", Json.Encode.int rec.comments )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "closed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.closedAt
          )
        , ( "text_matches", encodeSearchResultTextMatches rec.textMatches )
        , ( "pull_request"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "merged_at"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.mergedAt
                      )
                    , ( "diff_url"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.diffUrl
                      )
                    , ( "html_url"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.htmlUrl
                      )
                    , ( "patch_url"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.patchUrl
                      )
                    , ( "url"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.url
                      )
                    ]
            )
                rec.pullRequest
          )
        , ( "body", Json.Encode.string rec.body )
        , ( "score", Json.Encode.float rec.score )
        , ( "author_association"
          , encodeAuthorAssociation rec.authorAssociation
          )
        , ( "draft", Json.Encode.bool rec.draft )
        , ( "repository", encodeRepository rec.repository )
        , ( "body_html", Json.Encode.string rec.bodyHtml )
        , ( "body_text", Json.Encode.string rec.bodyText )
        , ( "timeline_url", Json.Encode.string rec.timelineUrl )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "reactions", encodeReactionRollup rec.reactions )
        ]


type alias IssueEventRename =
    { from : String, to : String }


decodeIssueEventRename : Json.Decode.Decoder IssueEventRename
decodeIssueEventRename =
    Json.Decode.succeed (\from to -> { from = from, to = to })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "from" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "to" Json.Decode.string)


encodeIssueEventRename : IssueEventRename -> Json.Encode.Value
encodeIssueEventRename rec =
    Json.Encode.object
        [ ( "from", Json.Encode.string rec.from )
        , ( "to", Json.Encode.string rec.to )
        ]


type alias IssueEventProjectCard =
    { url : String
    , id : Int
    , projectUrl : String
    , projectId : Int
    , columnName : String
    , previousColumnName : String
    }


decodeIssueEventProjectCard : Json.Decode.Decoder IssueEventProjectCard
decodeIssueEventProjectCard =
    Json.Decode.succeed
     (\url id projectUrl projectId columnName previousColumnName ->
         { url = url
         , id = id
         , projectUrl = projectUrl
         , projectId = projectId
         , columnName = columnName
         , previousColumnName = previousColumnName
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "project_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "project_id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "column_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "previous_column_name" Json.Decode.string)


encodeIssueEventProjectCard : IssueEventProjectCard -> Json.Encode.Value
encodeIssueEventProjectCard rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "id", Json.Encode.int rec.id )
        , ( "project_url", Json.Encode.string rec.projectUrl )
        , ( "project_id", Json.Encode.int rec.projectId )
        , ( "column_name", Json.Encode.string rec.columnName )
        , ( "previous_column_name", Json.Encode.string rec.previousColumnName )
        ]


type alias IssueEventMilestone =
    { title : String }


decodeIssueEventMilestone : Json.Decode.Decoder IssueEventMilestone
decodeIssueEventMilestone =
    Json.Decode.succeed (\title -> { title = title })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "title" Json.Decode.string)


encodeIssueEventMilestone : IssueEventMilestone -> Json.Encode.Value
encodeIssueEventMilestone rec =
    Json.Encode.object [ ( "title", Json.Encode.string rec.title ) ]


type alias IssueEventLabel =
    { name : Nullable String, color : Nullable String }


decodeIssueEventLabel : Json.Decode.Decoder IssueEventLabel
decodeIssueEventLabel =
    Json.Decode.succeed (\name color -> { name = name, color = color })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "color"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeIssueEventLabel : IssueEventLabel -> Json.Encode.Value
encodeIssueEventLabel rec =
    Json.Encode.object
        [ ( "name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.name
          )
        , ( "color"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.color
          )
        ]


type alias IssueEventForIssue =
    Debug.Todo


decodeIssueEventForIssue : Json.Decode.Decoder IssueEventForIssue
decodeIssueEventForIssue =
    Debug.todo "decode anyOf: not exactly 2 items"


encodeIssueEventForIssue : IssueEventForIssue -> Json.Encode.Value
encodeIssueEventForIssue =
    Debug.todo "decode anyOf"


type alias IssueEventDismissedReview =
    { state : String
    , reviewId : Int
    , dismissalMessage : Nullable String
    , dismissalCommitId : Nullable String
    }


decodeIssueEventDismissedReview : Json.Decode.Decoder IssueEventDismissedReview
decodeIssueEventDismissedReview =
    Json.Decode.succeed
     (\state reviewId dismissalMessage dismissalCommitId ->
         { state = state
         , reviewId = reviewId
         , dismissalMessage = dismissalMessage
         , dismissalCommitId = dismissalCommitId
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "review_id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissal_message"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissal_commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeIssueEventDismissedReview : IssueEventDismissedReview -> Json.Encode.Value
encodeIssueEventDismissedReview rec =
    Json.Encode.object
        [ ( "state", Json.Encode.string rec.state )
        , ( "review_id", Json.Encode.int rec.reviewId )
        , ( "dismissal_message"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.dismissalMessage
          )
        , ( "dismissal_commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.dismissalCommitId
          )
        ]


type alias IssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : Debug.Todo
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , issue : Debug.Todo
    , label : IssueEventLabel
    , assignee : Debug.Todo
    , assigner : Debug.Todo
    , reviewRequester : Debug.Todo
    , requestedReviewer : Debug.Todo
    , requestedTeam : Team
    , dismissedReview : IssueEventDismissedReview
    , milestone : IssueEventMilestone
    , projectCard : IssueEventProjectCard
    , rename : IssueEventRename
    , authorAssociation : AuthorAssociation
    , lockReason : Nullable String
    , performedViaGithubApp : Debug.Todo
    }


decodeIssueEvent : Json.Decode.Decoder IssueEvent
decodeIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt issue label assignee assigner reviewRequester requestedReviewer requestedTeam dismissedReview milestone projectCard rename authorAssociation lockReason performedViaGithubApp ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , issue = issue
         , label = label
         , assignee = assignee
         , assigner = assigner
         , reviewRequester = reviewRequester
         , requestedReviewer = requestedReviewer
         , requestedTeam = requestedTeam
         , dismissedReview = dismissedReview
         , milestone = milestone
         , projectCard = projectCard
         , rename = rename
         , authorAssociation = authorAssociation
         , lockReason = lockReason
         , performedViaGithubApp = performedViaGithubApp
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "actor"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "issue"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIssue
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "label" decodeIssueEventLabel)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "assignee"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "assigner"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "review_requester"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "requested_reviewer"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "requested_team" decodeTeam)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_review"
                decodeIssueEventDismissedReview
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "milestone" decodeIssueEventMilestone)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "project_card" decodeIssueEventProjectCard)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "rename" decodeIssueEventRename)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author_association" decodeAuthorAssociation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "lock_reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )


encodeIssueEvent : IssueEvent -> Json.Encode.Value
encodeIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", Debug.todo "decode anyOf" rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "issue", Debug.todo "decode anyOf" rec.issue )
        , ( "label", encodeIssueEventLabel rec.label )
        , ( "assignee", Debug.todo "decode anyOf" rec.assignee )
        , ( "assigner", Debug.todo "decode anyOf" rec.assigner )
        , ( "review_requester", Debug.todo "decode anyOf" rec.reviewRequester )
        , ( "requested_reviewer"
          , Debug.todo "decode anyOf" rec.requestedReviewer
          )
        , ( "requested_team", encodeTeam rec.requestedTeam )
        , ( "dismissed_review"
          , encodeIssueEventDismissedReview rec.dismissedReview
          )
        , ( "milestone", encodeIssueEventMilestone rec.milestone )
        , ( "project_card", encodeIssueEventProjectCard rec.projectCard )
        , ( "rename", encodeIssueEventRename rec.rename )
        , ( "author_association"
          , encodeAuthorAssociation rec.authorAssociation
          )
        , ( "lock_reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.lockReason
          )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        ]


type alias IssueComment =
    { id : Int
    , nodeId : String
    , url : String
    , body : String
    , bodyText : String
    , bodyHtml : String
    , htmlUrl : String
    , user : Debug.Todo
    , createdAt : String
    , updatedAt : String
    , issueUrl : String
    , authorAssociation : AuthorAssociation
    , performedViaGithubApp : Debug.Todo
    , reactions : ReactionRollup
    }


decodeIssueComment : Json.Decode.Decoder IssueComment
decodeIssueComment =
    Json.Decode.succeed
     (\id nodeId url body bodyText bodyHtml htmlUrl user createdAt updatedAt issueUrl authorAssociation performedViaGithubApp reactions ->
         { id = id
         , nodeId = nodeId
         , url = url
         , body = body
         , bodyText = bodyText
         , bodyHtml = bodyHtml
         , htmlUrl = htmlUrl
         , user = user
         , createdAt = createdAt
         , updatedAt = updatedAt
         , issueUrl = issueUrl
         , authorAssociation = authorAssociation
         , performedViaGithubApp = performedViaGithubApp
         , reactions = reactions
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_text" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_html" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author_association" decodeAuthorAssociation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "reactions" decodeReactionRollup)


encodeIssueComment : IssueComment -> Json.Encode.Value
encodeIssueComment rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "body", Json.Encode.string rec.body )
        , ( "body_text", Json.Encode.string rec.bodyText )
        , ( "body_html", Json.Encode.string rec.bodyHtml )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "issue_url", Json.Encode.string rec.issueUrl )
        , ( "author_association"
          , encodeAuthorAssociation rec.authorAssociation
          )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "reactions", encodeReactionRollup rec.reactions )
        ]


type alias Issue =
    { id : Int
    , nodeId : String
    , url : String
    , repositoryUrl : String
    , labelsUrl : String
    , commentsUrl : String
    , eventsUrl : String
    , htmlUrl : String
    , number : Int
    , state : String
    , stateReason : Nullable String
    , title : String
    , body : Nullable String
    , user : Debug.Todo
    , labels : List Json.Encode.Value
    , assignee : Debug.Todo
    , assignees : Nullable (List SimpleUser)
    , milestone : Debug.Todo
    , locked : Bool
    , activeLockReason : Nullable String
    , comments : Int
    , pullRequest :
        { mergedAt : Nullable String
        , diffUrl : Nullable String
        , htmlUrl : Nullable String
        , patchUrl : Nullable String
        , url : Nullable String
        }
    , closedAt : Nullable String
    , createdAt : String
    , updatedAt : String
    , draft : Bool
    , closedBy : Debug.Todo
    , bodyHtml : String
    , bodyText : String
    , timelineUrl : String
    , repository : Repository
    , performedViaGithubApp : Debug.Todo
    , authorAssociation : AuthorAssociation
    , reactions : ReactionRollup
    }


decodeIssue : Json.Decode.Decoder Issue
decodeIssue =
    Json.Decode.succeed
     (\id nodeId url repositoryUrl labelsUrl commentsUrl eventsUrl htmlUrl number state stateReason title body user labels assignee assignees milestone locked activeLockReason comments pullRequest closedAt createdAt updatedAt draft closedBy bodyHtml bodyText timelineUrl repository performedViaGithubApp authorAssociation reactions ->
         { id = id
         , nodeId = nodeId
         , url = url
         , repositoryUrl = repositoryUrl
         , labelsUrl = labelsUrl
         , commentsUrl = commentsUrl
         , eventsUrl = eventsUrl
         , htmlUrl = htmlUrl
         , number = number
         , state = state
         , stateReason = stateReason
         , title = title
         , body = body
         , user = user
         , labels = labels
         , assignee = assignee
         , assignees = assignees
         , milestone = milestone
         , locked = locked
         , activeLockReason = activeLockReason
         , comments = comments
         , pullRequest = pullRequest
         , closedAt = closedAt
         , createdAt = createdAt
         , updatedAt = updatedAt
         , draft = draft
         , closedBy = closedBy
         , bodyHtml = bodyHtml
         , bodyText = bodyText
         , timelineUrl = timelineUrl
         , repository = repository
         , performedViaGithubApp = performedViaGithubApp
         , authorAssociation = authorAssociation
         , reactions = reactions
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "labels_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "number" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "state_reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "body"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "labels" (Json.Decode.list Json.Decode.value))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "assignee"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "assignees"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list decodeSimpleUser)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "milestone"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeMilestone
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "locked" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "active_lock_reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pull_request"
                (Json.Decode.succeed
                  (\mergedAt diffUrl htmlUrl patchUrl url ->
                      { mergedAt = mergedAt
                      , diffUrl = diffUrl
                      , htmlUrl = htmlUrl
                      , patchUrl = patchUrl
                      , url = url
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "merged_at"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "diff_url"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "html_url"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "patch_url"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "url"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "closed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "draft" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "closed_by"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_html" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body_text" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "timeline_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author_association" decodeAuthorAssociation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "reactions" decodeReactionRollup)


encodeIssue : Issue -> Json.Encode.Value
encodeIssue rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "repository_url", Json.Encode.string rec.repositoryUrl )
        , ( "labels_url", Json.Encode.string rec.labelsUrl )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "number", Json.Encode.int rec.number )
        , ( "state", Json.Encode.string rec.state )
        , ( "state_reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.stateReason
          )
        , ( "title", Json.Encode.string rec.title )
        , ( "body"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.body
          )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "labels", Json.Encode.list Json.Decode.value rec.labels )
        , ( "assignee", Debug.todo "decode anyOf" rec.assignee )
        , ( "assignees"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list encodeSimpleUser value
            )
                rec.assignees
          )
        , ( "milestone", Debug.todo "decode anyOf" rec.milestone )
        , ( "locked", Json.Encode.bool rec.locked )
        , ( "active_lock_reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.activeLockReason
          )
        , ( "comments", Json.Encode.int rec.comments )
        , ( "pull_request"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "merged_at"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.mergedAt
                      )
                    , ( "diff_url"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.diffUrl
                      )
                    , ( "html_url"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.htmlUrl
                      )
                    , ( "patch_url"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.patchUrl
                      )
                    , ( "url"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.url
                      )
                    ]
            )
                rec.pullRequest
          )
        , ( "closed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.closedAt
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "draft", Json.Encode.bool rec.draft )
        , ( "closed_by", Debug.todo "decode anyOf" rec.closedBy )
        , ( "body_html", Json.Encode.string rec.bodyHtml )
        , ( "body_text", Json.Encode.string rec.bodyText )
        , ( "timeline_url", Json.Encode.string rec.timelineUrl )
        , ( "repository", encodeRepository rec.repository )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "author_association"
          , encodeAuthorAssociation rec.authorAssociation
          )
        , ( "reactions", encodeReactionRollup rec.reactions )
        ]


type alias InteractionLimitResponse =
    { limit : InteractionGroup, origin : String, expiresAt : String }


decodeInteractionLimitResponse : Json.Decode.Decoder InteractionLimitResponse
decodeInteractionLimitResponse =
    Json.Decode.succeed
     (\limit origin expiresAt ->
         { limit = limit, origin = origin, expiresAt = expiresAt }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "limit" decodeInteractionGroup)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "origin" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "expires_at" Json.Decode.string)


encodeInteractionLimitResponse : InteractionLimitResponse -> Json.Encode.Value
encodeInteractionLimitResponse rec =
    Json.Encode.object
        [ ( "limit", encodeInteractionGroup rec.limit )
        , ( "origin", Json.Encode.string rec.origin )
        , ( "expires_at", Json.Encode.string rec.expiresAt )
        ]


type alias InteractionLimit =
    { limit : InteractionGroup, expiry : InteractionExpiry }


decodeInteractionLimit : Json.Decode.Decoder InteractionLimit
decodeInteractionLimit =
    Json.Decode.succeed (\limit expiry -> { limit = limit, expiry = expiry })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "limit" decodeInteractionGroup)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "expiry" decodeInteractionExpiry)


encodeInteractionLimit : InteractionLimit -> Json.Encode.Value
encodeInteractionLimit rec =
    Json.Encode.object
        [ ( "limit", encodeInteractionGroup rec.limit )
        , ( "expiry", encodeInteractionExpiry rec.expiry )
        ]


type alias InteractionGroup =
    String


decodeInteractionGroup : Json.Decode.Decoder InteractionGroup
decodeInteractionGroup =
    Json.Decode.string


encodeInteractionGroup : InteractionGroup -> Json.Encode.Value
encodeInteractionGroup =
    Json.Encode.string


type alias InteractionExpiry =
    String


decodeInteractionExpiry : Json.Decode.Decoder InteractionExpiry
decodeInteractionExpiry =
    Json.Decode.string


encodeInteractionExpiry : InteractionExpiry -> Json.Encode.Value
encodeInteractionExpiry =
    Json.Encode.string


type alias Integration =
    { id : Int
    , slug : String
    , nodeId : String
    , owner : Debug.Todo
    , name : String
    , description : Nullable String
    , externalUrl : String
    , htmlUrl : String
    , createdAt : String
    , updatedAt : String
    , permissions :
        { issues : String
        , checks : String
        , metadata : String
        , contents : String
        , deployments : String
        }
    , events : List String
    , installationsCount : Int
    , clientId : String
    , clientSecret : String
    , webhookSecret : Nullable String
    , pem : String
    }


decodeIntegration : Json.Decode.Decoder Integration
decodeIntegration =
    Json.Decode.succeed
     (\id slug nodeId owner name description externalUrl htmlUrl createdAt updatedAt permissions events installationsCount clientId clientSecret webhookSecret pem ->
         { id = id
         , slug = slug
         , nodeId = nodeId
         , owner = owner
         , name = name
         , description = description
         , externalUrl = externalUrl
         , htmlUrl = htmlUrl
         , createdAt = createdAt
         , updatedAt = updatedAt
         , permissions = permissions
         , events = events
         , installationsCount = installationsCount
         , clientId = clientId
         , clientSecret = clientSecret
         , webhookSecret = webhookSecret
         , pem = pem
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "slug" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "owner"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "external_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "permissions"
                (Json.Decode.succeed
                  (\issues checks metadata contents deployments ->
                      { issues = issues
                      , checks = checks
                      , metadata = metadata
                      , contents = contents
                      , deployments = deployments
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "issues" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "checks" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "metadata" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "contents" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "deployments" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "installations_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "client_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "client_secret" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "webhook_secret"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "pem" Json.Decode.string)


encodeIntegration : Integration -> Json.Encode.Value
encodeIntegration rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "slug", Json.Encode.string rec.slug )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "owner", Debug.todo "decode anyOf" rec.owner )
        , ( "name", Json.Encode.string rec.name )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "external_url", Json.Encode.string rec.externalUrl )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "permissions"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "issues", Json.Encode.string rec0.issues )
                    , ( "checks", Json.Encode.string rec0.checks )
                    , ( "metadata", Json.Encode.string rec0.metadata )
                    , ( "contents", Json.Encode.string rec0.contents )
                    , ( "deployments", Json.Encode.string rec0.deployments )
                    ]
            )
                rec.permissions
          )
        , ( "events", Json.Encode.list Json.Encode.string rec.events )
        , ( "installations_count", Json.Encode.int rec.installationsCount )
        , ( "client_id", Json.Encode.string rec.clientId )
        , ( "client_secret", Json.Encode.string rec.clientSecret )
        , ( "webhook_secret"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.webhookSecret
          )
        , ( "pem", Json.Encode.string rec.pem )
        ]


type alias InstallationToken =
    { token : String
    , expiresAt : String
    , permissions : AppPermissions
    , repositorySelection : String
    , repositories : List Repository
    , singleFile : String
    , hasMultipleSingleFiles : Bool
    , singleFilePaths : List String
    }


decodeInstallationToken : Json.Decode.Decoder InstallationToken
decodeInstallationToken =
    Json.Decode.succeed
     (\token expiresAt permissions repositorySelection repositories singleFile hasMultipleSingleFiles singleFilePaths ->
         { token = token
         , expiresAt = expiresAt
         , permissions = permissions
         , repositorySelection = repositorySelection
         , repositories = repositories
         , singleFile = singleFile
         , hasMultipleSingleFiles = hasMultipleSingleFiles
         , singleFilePaths = singleFilePaths
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "token" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "expires_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "permissions" decodeAppPermissions)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_selection" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "repositories"
                (Json.Decode.list decodeRepository)
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "single_file" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_multiple_single_files" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "single_file_paths"
                (Json.Decode.list Json.Decode.string)
            )


encodeInstallationToken : InstallationToken -> Json.Encode.Value
encodeInstallationToken rec =
    Json.Encode.object
        [ ( "token", Json.Encode.string rec.token )
        , ( "expires_at", Json.Encode.string rec.expiresAt )
        , ( "permissions", encodeAppPermissions rec.permissions )
        , ( "repository_selection", Json.Encode.string rec.repositorySelection )
        , ( "repositories", Json.Encode.list encodeRepository rec.repositories )
        , ( "single_file", Json.Encode.string rec.singleFile )
        , ( "has_multiple_single_files"
          , Json.Encode.bool rec.hasMultipleSingleFiles
          )
        , ( "single_file_paths"
          , Json.Encode.list Json.Encode.string rec.singleFilePaths
          )
        ]


type alias Installation =
    { id : Int
    , account : Nullable {}
    , repositorySelection : String
    , accessTokensUrl : String
    , repositoriesUrl : String
    , htmlUrl : String
    , appId : Int
    , targetId : Int
    , targetType : String
    , permissions : AppPermissions
    , events : List String
    , createdAt : String
    , updatedAt : String
    , singleFileName : Nullable String
    , hasMultipleSingleFiles : Bool
    , singleFilePaths : List String
    , appSlug : String
    , suspendedBy : Debug.Todo
    , suspendedAt : Nullable String
    , contactEmail : Nullable String
    }


decodeInstallation : Json.Decode.Decoder Installation
decodeInstallation =
    Json.Decode.succeed
     (\id account repositorySelection accessTokensUrl repositoriesUrl htmlUrl appId targetId targetType permissions events createdAt updatedAt singleFileName hasMultipleSingleFiles singleFilePaths appSlug suspendedBy suspendedAt contactEmail ->
         { id = id
         , account = account
         , repositorySelection = repositorySelection
         , accessTokensUrl = accessTokensUrl
         , repositoriesUrl = repositoriesUrl
         , htmlUrl = htmlUrl
         , appId = appId
         , targetId = targetId
         , targetType = targetType
         , permissions = permissions
         , events = events
         , createdAt = createdAt
         , updatedAt = updatedAt
         , singleFileName = singleFileName
         , hasMultipleSingleFiles = hasMultipleSingleFiles
         , singleFilePaths = singleFilePaths
         , appSlug = appSlug
         , suspendedBy = suspendedBy
         , suspendedAt = suspendedAt
         , contactEmail = contactEmail
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "account"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present (Json.Decode.succeed {})
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_selection" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "access_tokens_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repositories_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "app_id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "target_id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "target_type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "permissions" decodeAppPermissions)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "single_file_name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_multiple_single_files" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "single_file_paths"
                (Json.Decode.list Json.Decode.string)
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "app_slug" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "suspended_by"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "suspended_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "contact_email"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeInstallation : Installation -> Json.Encode.Value
encodeInstallation rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "account"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        (\rec0 -> Json.Encode.object []) value
            )
                rec.account
          )
        , ( "repository_selection", Json.Encode.string rec.repositorySelection )
        , ( "access_tokens_url", Json.Encode.string rec.accessTokensUrl )
        , ( "repositories_url", Json.Encode.string rec.repositoriesUrl )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "app_id", Json.Encode.int rec.appId )
        , ( "target_id", Json.Encode.int rec.targetId )
        , ( "target_type", Json.Encode.string rec.targetType )
        , ( "permissions", encodeAppPermissions rec.permissions )
        , ( "events", Json.Encode.list Json.Encode.string rec.events )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "single_file_name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.singleFileName
          )
        , ( "has_multiple_single_files"
          , Json.Encode.bool rec.hasMultipleSingleFiles
          )
        , ( "single_file_paths"
          , Json.Encode.list Json.Encode.string rec.singleFilePaths
          )
        , ( "app_slug", Json.Encode.string rec.appSlug )
        , ( "suspended_by", Debug.todo "decode anyOf" rec.suspendedBy )
        , ( "suspended_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.suspendedAt
          )
        , ( "contact_email"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.contactEmail
          )
        ]


type alias Import =
    { vcs : Nullable String
    , useLfs : Bool
    , vcsUrl : String
    , svcRoot : String
    , tfvcProject : String
    , status : String
    , statusText : Nullable String
    , failedStep : Nullable String
    , errorMessage : Nullable String
    , importPercent : Nullable Int
    , commitCount : Nullable Int
    , pushPercent : Nullable Int
    , hasLargeFiles : Bool
    , largeFilesSize : Int
    , largeFilesCount : Int
    , projectChoices :
        List { vcs : String, tfvcProject : String, humanName : String }
    , message : String
    , authorsCount : Nullable Int
    , url : String
    , htmlUrl : String
    , authorsUrl : String
    , repositoryUrl : String
    , svnRoot : String
    }


decodeImport : Json.Decode.Decoder Import
decodeImport =
    Json.Decode.succeed
     (\vcs useLfs vcsUrl svcRoot tfvcProject status statusText failedStep errorMessage importPercent commitCount pushPercent hasLargeFiles largeFilesSize largeFilesCount projectChoices message authorsCount url htmlUrl authorsUrl repositoryUrl svnRoot ->
         { vcs = vcs
         , useLfs = useLfs
         , vcsUrl = vcsUrl
         , svcRoot = svcRoot
         , tfvcProject = tfvcProject
         , status = status
         , statusText = statusText
         , failedStep = failedStep
         , errorMessage = errorMessage
         , importPercent = importPercent
         , commitCount = commitCount
         , pushPercent = pushPercent
         , hasLargeFiles = hasLargeFiles
         , largeFilesSize = largeFilesSize
         , largeFilesCount = largeFilesCount
         , projectChoices = projectChoices
         , message = message
         , authorsCount = authorsCount
         , url = url
         , htmlUrl = htmlUrl
         , authorsUrl = authorsUrl
         , repositoryUrl = repositoryUrl
         , svnRoot = svnRoot
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "vcs"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "use_lfs" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "vcs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "svc_root" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tfvc_project" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "status_text"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "failed_step"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "error_message"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "import_percent"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_count"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "push_percent"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_large_files" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "large_files_size" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "large_files_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "project_choices"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\vcs tfvcProject humanName ->
                          { vcs = vcs
                          , tfvcProject = tfvcProject
                          , humanName = humanName
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "vcs" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "tfvc_project" Json.Decode.string
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "human_name" Json.Decode.string)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "message" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "authors_count"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "authors_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "svn_root" Json.Decode.string)


encodeImport : Import -> Json.Encode.Value
encodeImport rec =
    Json.Encode.object
        [ ( "vcs"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.vcs
          )
        , ( "use_lfs", Json.Encode.bool rec.useLfs )
        , ( "vcs_url", Json.Encode.string rec.vcsUrl )
        , ( "svc_root", Json.Encode.string rec.svcRoot )
        , ( "tfvc_project", Json.Encode.string rec.tfvcProject )
        , ( "status", Json.Encode.string rec.status )
        , ( "status_text"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.statusText
          )
        , ( "failed_step"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.failedStep
          )
        , ( "error_message"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.errorMessage
          )
        , ( "import_percent"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.importPercent
          )
        , ( "commit_count"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.commitCount
          )
        , ( "push_percent"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.pushPercent
          )
        , ( "has_large_files", Json.Encode.bool rec.hasLargeFiles )
        , ( "large_files_size", Json.Encode.int rec.largeFilesSize )
        , ( "large_files_count", Json.Encode.int rec.largeFilesCount )
        , ( "project_choices"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "vcs", Json.Encode.string rec0.vcs )
                        , ( "tfvc_project"
                          , Json.Encode.string rec0.tfvcProject
                          )
                        , ( "human_name", Json.Encode.string rec0.humanName )
                        ]
                )
                rec.projectChoices
          )
        , ( "message", Json.Encode.string rec.message )
        , ( "authors_count"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.authorsCount
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "authors_url", Json.Encode.string rec.authorsUrl )
        , ( "repository_url", Json.Encode.string rec.repositoryUrl )
        , ( "svn_root", Json.Encode.string rec.svnRoot )
        ]


type alias Hovercard =
    { contexts : List { message : String, octicon : String } }


decodeHovercard : Json.Decode.Decoder Hovercard
decodeHovercard =
    Json.Decode.succeed (\contexts -> { contexts = contexts })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "contexts"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\message octicon ->
                          { message = message, octicon = octicon }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "message" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "octicon" Json.Decode.string)
                    )
                )
            )


encodeHovercard : Hovercard -> Json.Encode.Value
encodeHovercard rec =
    Json.Encode.object
        [ ( "contexts"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "message", Json.Encode.string rec0.message )
                        , ( "octicon", Json.Encode.string rec0.octicon )
                        ]
                )
                rec.contexts
          )
        ]


type alias HookResponse =
    { code : Nullable Int, status : Nullable String, message : Nullable String }


decodeHookResponse : Json.Decode.Decoder HookResponse
decodeHookResponse =
    Json.Decode.succeed
     (\code status message ->
         { code = code, status = status, message = message }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "code"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "status"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "message"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeHookResponse : HookResponse -> Json.Encode.Value
encodeHookResponse rec =
    Json.Encode.object
        [ ( "code"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.code
          )
        , ( "status"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.status
          )
        , ( "message"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.message
          )
        ]


type alias HookDeliveryItem =
    { id : Int
    , guid : String
    , deliveredAt : String
    , redelivery : Bool
    , duration : Float
    , status : String
    , statusCode : Int
    , event : String
    , action : Nullable String
    , installationId : Nullable Int
    , repositoryId : Nullable Int
    }


decodeHookDeliveryItem : Json.Decode.Decoder HookDeliveryItem
decodeHookDeliveryItem =
    Json.Decode.succeed
     (\id guid deliveredAt redelivery duration status statusCode event action installationId repositoryId ->
         { id = id
         , guid = guid
         , deliveredAt = deliveredAt
         , redelivery = redelivery
         , duration = duration
         , status = status
         , statusCode = statusCode
         , event = event
         , action = action
         , installationId = installationId
         , repositoryId = repositoryId
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "guid" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "delivered_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "redelivery" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "duration" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status_code" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "action"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "installation_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "repository_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )


encodeHookDeliveryItem : HookDeliveryItem -> Json.Encode.Value
encodeHookDeliveryItem rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "guid", Json.Encode.string rec.guid )
        , ( "delivered_at", Json.Encode.string rec.deliveredAt )
        , ( "redelivery", Json.Encode.bool rec.redelivery )
        , ( "duration", Json.Encode.float rec.duration )
        , ( "status", Json.Encode.string rec.status )
        , ( "status_code", Json.Encode.int rec.statusCode )
        , ( "event", Json.Encode.string rec.event )
        , ( "action"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.action
          )
        , ( "installation_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.installationId
          )
        , ( "repository_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.repositoryId
          )
        ]


type alias HookDelivery =
    { id : Int
    , guid : String
    , deliveredAt : String
    , redelivery : Bool
    , duration : Float
    , status : String
    , statusCode : Int
    , event : String
    , action : Nullable String
    , installationId : Nullable Int
    , repositoryId : Nullable Int
    , url : String
    , request : { headers : Nullable {}, payload : Nullable {} }
    , response : { headers : Nullable {}, payload : Nullable String }
    }


decodeHookDelivery : Json.Decode.Decoder HookDelivery
decodeHookDelivery =
    Json.Decode.succeed
     (\id guid deliveredAt redelivery duration status statusCode event action installationId repositoryId url request response ->
         { id = id
         , guid = guid
         , deliveredAt = deliveredAt
         , redelivery = redelivery
         , duration = duration
         , status = status
         , statusCode = statusCode
         , event = event
         , action = action
         , installationId = installationId
         , repositoryId = repositoryId
         , url = url
         , request = request
         , response = response
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "guid" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "delivered_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "redelivery" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "duration" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status_code" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "action"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "installation_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "repository_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "request"
                (Json.Decode.succeed
                  (\headers payload -> { headers = headers, payload = payload })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "headers"
                            (Json.Decode.oneOf
                                [ Json.Decode.map
                                    Present
                                    (Json.Decode.succeed {})
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "payload"
                            (Json.Decode.oneOf
                                [ Json.Decode.map
                                    Present
                                    (Json.Decode.succeed {})
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "response"
                (Json.Decode.succeed
                  (\headers payload -> { headers = headers, payload = payload })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "headers"
                            (Json.Decode.oneOf
                                [ Json.Decode.map
                                    Present
                                    (Json.Decode.succeed {})
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "payload"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )


encodeHookDelivery : HookDelivery -> Json.Encode.Value
encodeHookDelivery rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "guid", Json.Encode.string rec.guid )
        , ( "delivered_at", Json.Encode.string rec.deliveredAt )
        , ( "redelivery", Json.Encode.bool rec.redelivery )
        , ( "duration", Json.Encode.float rec.duration )
        , ( "status", Json.Encode.string rec.status )
        , ( "status_code", Json.Encode.int rec.statusCode )
        , ( "event", Json.Encode.string rec.event )
        , ( "action"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.action
          )
        , ( "installation_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.installationId
          )
        , ( "repository_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.repositoryId
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "request"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "headers"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    (\rec_0_0_1_0_0_1_1_1_0_13_1_0_0 ->
                                        Json.Encode.object []
                                    )
                                        value
                        )
                            rec0.headers
                      )
                    , ( "payload"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    (\rec_0_0_1_0_0_2_1_1_0_13_1_0_0 ->
                                        Json.Encode.object []
                                    )
                                        value
                        )
                            rec0.payload
                      )
                    ]
            )
                rec.request
          )
        , ( "response"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "headers"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    (\rec_0_0_1_0_0_1_1_1_0_14_1_0_0 ->
                                        Json.Encode.object []
                                    )
                                        value
                        )
                            rec0.headers
                      )
                    , ( "payload"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.payload
                      )
                    ]
            )
                rec.response
          )
        ]


type alias Hook =
    { type_ : String
    , id : Int
    , name : String
    , active : Bool
    , events : List String
    , config :
        { email : String
        , password : String
        , room : String
        , subdomain : String
        , url : WebhookConfigUrl
        , insecureSsl : WebhookConfigInsecureSsl
        , contentType : WebhookConfigContentType
        , digest : String
        , secret : WebhookConfigSecret
        , token : String
        }
    , updatedAt : String
    , createdAt : String
    , url : String
    , testUrl : String
    , pingUrl : String
    , deliveriesUrl : String
    , lastResponse : HookResponse
    }


decodeHook : Json.Decode.Decoder Hook
decodeHook =
    Json.Decode.succeed
     (\type_ id name active events config updatedAt createdAt url testUrl pingUrl deliveriesUrl lastResponse ->
         { type_ = type_
         , id = id
         , name = name
         , active = active
         , events = events
         , config = config
         , updatedAt = updatedAt
         , createdAt = createdAt
         , url = url
         , testUrl = testUrl
         , pingUrl = pingUrl
         , deliveriesUrl = deliveriesUrl
         , lastResponse = lastResponse
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "active" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "config"
                (Json.Decode.succeed
                  (\email password room subdomain url insecureSsl contentType digest secret token ->
                      { email = email
                      , password = password
                      , room = room
                      , subdomain = subdomain
                      , url = url
                      , insecureSsl = insecureSsl
                      , contentType = contentType
                      , digest = digest
                      , secret = secret
                      , token = token
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "email" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "password" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "room" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "subdomain" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" decodeWebhookConfigUrl)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "insecure_ssl"
                            decodeWebhookConfigInsecureSsl
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "content_type"
                            decodeWebhookConfigContentType
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "digest" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "secret" decodeWebhookConfigSecret)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "token" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "test_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ping_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deliveries_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "last_response" decodeHookResponse)


encodeHook : Hook -> Json.Encode.Value
encodeHook rec =
    Json.Encode.object
        [ ( "type", Json.Encode.string rec.type_ )
        , ( "id", Json.Encode.int rec.id )
        , ( "name", Json.Encode.string rec.name )
        , ( "active", Json.Encode.bool rec.active )
        , ( "events", Json.Encode.list Json.Encode.string rec.events )
        , ( "config"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "email", Json.Encode.string rec0.email )
                    , ( "password", Json.Encode.string rec0.password )
                    , ( "room", Json.Encode.string rec0.room )
                    , ( "subdomain", Json.Encode.string rec0.subdomain )
                    , ( "url", encodeWebhookConfigUrl rec0.url )
                    , ( "insecure_ssl"
                      , encodeWebhookConfigInsecureSsl rec0.insecureSsl
                      )
                    , ( "content_type"
                      , encodeWebhookConfigContentType rec0.contentType
                      )
                    , ( "digest", Json.Encode.string rec0.digest )
                    , ( "secret", encodeWebhookConfigSecret rec0.secret )
                    , ( "token", Json.Encode.string rec0.token )
                    ]
            )
                rec.config
          )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "url", Json.Encode.string rec.url )
        , ( "test_url", Json.Encode.string rec.testUrl )
        , ( "ping_url", Json.Encode.string rec.pingUrl )
        , ( "deliveries_url", Json.Encode.string rec.deliveriesUrl )
        , ( "last_response", encodeHookResponse rec.lastResponse )
        ]


type alias GpgKey =
    { id : Int
    , name : Nullable String
    , primaryKeyId : Nullable Int
    , keyId : String
    , publicKey : String
    , emails : List { email : String, verified : Bool }
    , subkeys :
        List { id : Int
        , primaryKeyId : Int
        , keyId : String
        , publicKey : String
        , emails : List Json.Encode.Value
        , subkeys : List Json.Encode.Value
        , canSign : Bool
        , canEncryptComms : Bool
        , canEncryptStorage : Bool
        , canCertify : Bool
        , createdAt : String
        , expiresAt : Nullable String
        , rawKey : Nullable String
        , revoked : Bool
        }
    , canSign : Bool
    , canEncryptComms : Bool
    , canEncryptStorage : Bool
    , canCertify : Bool
    , createdAt : String
    , expiresAt : Nullable String
    , revoked : Bool
    , rawKey : Nullable String
    }


decodeGpgKey : Json.Decode.Decoder GpgKey
decodeGpgKey =
    Json.Decode.succeed
     (\id name primaryKeyId keyId publicKey emails subkeys canSign canEncryptComms canEncryptStorage canCertify createdAt expiresAt revoked rawKey ->
         { id = id
         , name = name
         , primaryKeyId = primaryKeyId
         , keyId = keyId
         , publicKey = publicKey
         , emails = emails
         , subkeys = subkeys
         , canSign = canSign
         , canEncryptComms = canEncryptComms
         , canEncryptStorage = canEncryptStorage
         , canCertify = canCertify
         , createdAt = createdAt
         , expiresAt = expiresAt
         , revoked = revoked
         , rawKey = rawKey
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "primary_key_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "key_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public_key" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "emails"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\email verified -> { email = email, verified = verified }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "email" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "verified" Json.Decode.bool)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "subkeys"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\id primaryKeyId keyId publicKey emails subkeys canSign canEncryptComms canEncryptStorage canCertify createdAt expiresAt rawKey revoked ->
                          { id = id
                          , primaryKeyId = primaryKeyId
                          , keyId = keyId
                          , publicKey = publicKey
                          , emails = emails
                          , subkeys = subkeys
                          , canSign = canSign
                          , canEncryptComms = canEncryptComms
                          , canEncryptStorage = canEncryptStorage
                          , canCertify = canCertify
                          , createdAt = createdAt
                          , expiresAt = expiresAt
                          , rawKey = rawKey
                          , revoked = revoked
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "id" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "primary_key_id" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "key_id" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "public_key" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "emails"
                                (Json.Decode.list Json.Decode.value)
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "subkeys"
                                (Json.Decode.list Json.Decode.value)
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "can_sign" Json.Decode.bool)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "can_encrypt_comms"
                                Json.Decode.bool
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "can_encrypt_storage"
                                Json.Decode.bool
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "can_certify" Json.Decode.bool)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "created_at" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "expires_at"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "raw_key"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "revoked" Json.Decode.bool)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "can_sign" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "can_encrypt_comms" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "can_encrypt_storage" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "can_certify" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "expires_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "revoked" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "raw_key"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeGpgKey : GpgKey -> Json.Encode.Value
encodeGpgKey rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.name
          )
        , ( "primary_key_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.primaryKeyId
          )
        , ( "key_id", Json.Encode.string rec.keyId )
        , ( "public_key", Json.Encode.string rec.publicKey )
        , ( "emails"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "email", Json.Encode.string rec0.email )
                        , ( "verified", Json.Encode.bool rec0.verified )
                        ]
                )
                rec.emails
          )
        , ( "subkeys"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "id", Json.Encode.int rec0.id )
                        , ( "primary_key_id"
                          , Json.Encode.int rec0.primaryKeyId
                          )
                        , ( "key_id", Json.Encode.string rec0.keyId )
                        , ( "public_key", Json.Encode.string rec0.publicKey )
                        , ( "emails"
                          , Json.Encode.list Json.Decode.value rec0.emails
                          )
                        , ( "subkeys"
                          , Json.Encode.list Json.Decode.value rec0.subkeys
                          )
                        , ( "can_sign", Json.Encode.bool rec0.canSign )
                        , ( "can_encrypt_comms"
                          , Json.Encode.bool rec0.canEncryptComms
                          )
                        , ( "can_encrypt_storage"
                          , Json.Encode.bool rec0.canEncryptStorage
                          )
                        , ( "can_certify", Json.Encode.bool rec0.canCertify )
                        , ( "created_at", Json.Encode.string rec0.createdAt )
                        , ( "expires_at"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.string value
                            )
                                rec0.expiresAt
                          )
                        , ( "raw_key"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.string value
                            )
                                rec0.rawKey
                          )
                        , ( "revoked", Json.Encode.bool rec0.revoked )
                        ]
                )
                rec.subkeys
          )
        , ( "can_sign", Json.Encode.bool rec.canSign )
        , ( "can_encrypt_comms", Json.Encode.bool rec.canEncryptComms )
        , ( "can_encrypt_storage", Json.Encode.bool rec.canEncryptStorage )
        , ( "can_certify", Json.Encode.bool rec.canCertify )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "expires_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.expiresAt
          )
        , ( "revoked", Json.Encode.bool rec.revoked )
        , ( "raw_key"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.rawKey
          )
        ]


type alias GitignoreTemplate =
    { name : String, source : String }


decodeGitignoreTemplate : Json.Decode.Decoder GitignoreTemplate
decodeGitignoreTemplate =
    Json.Decode.succeed (\name source -> { name = name, source = source })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "source" Json.Decode.string)


encodeGitignoreTemplate : GitignoreTemplate -> Json.Encode.Value
encodeGitignoreTemplate rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "source", Json.Encode.string rec.source )
        ]


type alias GitUser =
    { name : String, email : String, date : String }


decodeGitUser : Json.Decode.Decoder GitUser
decodeGitUser =
    Json.Decode.succeed
     (\name email date -> { name = name, email = email, date = date })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "email" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "date" Json.Decode.string)


encodeGitUser : GitUser -> Json.Encode.Value
encodeGitUser rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "email", Json.Encode.string rec.email )
        , ( "date", Json.Encode.string rec.date )
        ]


type alias GitTree =
    { sha : String
    , url : String
    , truncated : Bool
    , tree :
        List { path : String
        , mode : String
        , type_ : String
        , sha : String
        , size : Int
        , url : String
        }
    }


decodeGitTree : Json.Decode.Decoder GitTree
decodeGitTree =
    Json.Decode.succeed
     (\sha url truncated tree ->
         { sha = sha, url = url, truncated = truncated, tree = tree }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "truncated" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "tree"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\path mode type_ sha size url ->
                          { path = path
                          , mode = mode
                          , type_ = type_
                          , sha = sha
                          , size = size
                          , url = url
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "path" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "mode" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "type" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "sha" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "size" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "url" Json.Decode.string)
                    )
                )
            )


encodeGitTree : GitTree -> Json.Encode.Value
encodeGitTree rec =
    Json.Encode.object
        [ ( "sha", Json.Encode.string rec.sha )
        , ( "url", Json.Encode.string rec.url )
        , ( "truncated", Json.Encode.bool rec.truncated )
        , ( "tree"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "path", Json.Encode.string rec0.path )
                        , ( "mode", Json.Encode.string rec0.mode )
                        , ( "type", Json.Encode.string rec0.type_ )
                        , ( "sha", Json.Encode.string rec0.sha )
                        , ( "size", Json.Encode.int rec0.size )
                        , ( "url", Json.Encode.string rec0.url )
                        ]
                )
                rec.tree
          )
        ]


type alias GitTag =
    { nodeId : String
    , tag : String
    , sha : String
    , url : String
    , message : String
    , tagger : { date : String, email : String, name : String }
    , object : { sha : String, type_ : String, url : String }
    , verification : Verification
    }


decodeGitTag : Json.Decode.Decoder GitTag
decodeGitTag =
    Json.Decode.succeed
     (\nodeId tag sha url message tagger object verification ->
         { nodeId = nodeId
         , tag = tag
         , sha = sha
         , url = url
         , message = message
         , tagger = tagger
         , object = object
         , verification = verification
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "tag" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "message" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "tagger"
                (Json.Decode.succeed
                  (\date email name ->
                      { date = date, email = email, name = name }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "date" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "email" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "object"
                (Json.Decode.succeed
                  (\sha type_ url -> { sha = sha, type_ = type_, url = url })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "type" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "verification" decodeVerification)


encodeGitTag : GitTag -> Json.Encode.Value
encodeGitTag rec =
    Json.Encode.object
        [ ( "node_id", Json.Encode.string rec.nodeId )
        , ( "tag", Json.Encode.string rec.tag )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "url", Json.Encode.string rec.url )
        , ( "message", Json.Encode.string rec.message )
        , ( "tagger"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "date", Json.Encode.string rec0.date )
                    , ( "email", Json.Encode.string rec0.email )
                    , ( "name", Json.Encode.string rec0.name )
                    ]
            )
                rec.tagger
          )
        , ( "object"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "sha", Json.Encode.string rec0.sha )
                    , ( "type", Json.Encode.string rec0.type_ )
                    , ( "url", Json.Encode.string rec0.url )
                    ]
            )
                rec.object
          )
        , ( "verification", encodeVerification rec.verification )
        ]


type alias GitRef =
    { ref : String
    , nodeId : String
    , url : String
    , object : { type_ : String, sha : String, url : String }
    }


decodeGitRef : Json.Decode.Decoder GitRef
decodeGitRef =
    Json.Decode.succeed
     (\ref nodeId url object ->
         { ref = ref, nodeId = nodeId, url = url, object = object }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "ref" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "object"
                (Json.Decode.succeed
                  (\type_ sha url -> { type_ = type_, sha = sha, url = url })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "type" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                )
            )


encodeGitRef : GitRef -> Json.Encode.Value
encodeGitRef rec =
    Json.Encode.object
        [ ( "ref", Json.Encode.string rec.ref )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "object"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "type", Json.Encode.string rec0.type_ )
                    , ( "sha", Json.Encode.string rec0.sha )
                    , ( "url", Json.Encode.string rec0.url )
                    ]
            )
                rec.object
          )
        ]


type alias GitCommit =
    { sha : String
    , nodeId : String
    , url : String
    , author : { date : String, email : String, name : String }
    , committer : { date : String, email : String, name : String }
    , message : String
    , tree : { sha : String, url : String }
    , parents : List { sha : String, url : String, htmlUrl : String }
    , verification :
        { verified : Bool
        , reason : String
        , signature : Nullable String
        , payload : Nullable String
        }
    , htmlUrl : String
    }


decodeGitCommit : Json.Decode.Decoder GitCommit
decodeGitCommit =
    Json.Decode.succeed
     (\sha nodeId url author committer message tree parents verification htmlUrl ->
         { sha = sha
         , nodeId = nodeId
         , url = url
         , author = author
         , committer = committer
         , message = message
         , tree = tree
         , parents = parents
         , verification = verification
         , htmlUrl = htmlUrl
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "author"
                (Json.Decode.succeed
                  (\date email name ->
                      { date = date, email = email, name = name }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "date" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "email" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "committer"
                (Json.Decode.succeed
                  (\date email name ->
                      { date = date, email = email, name = name }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "date" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "email" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "message" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "tree"
                (Json.Decode.succeed (\sha url -> { sha = sha, url = url })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "parents"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\sha url htmlUrl ->
                          { sha = sha, url = url, htmlUrl = htmlUrl }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "sha" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "html_url" Json.Decode.string)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "verification"
                (Json.Decode.succeed
                  (\verified reason signature payload ->
                      { verified = verified
                      , reason = reason
                      , signature = signature
                      , payload = payload
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "verified" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "reason" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "signature"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "payload"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)


encodeGitCommit : GitCommit -> Json.Encode.Value
encodeGitCommit rec =
    Json.Encode.object
        [ ( "sha", Json.Encode.string rec.sha )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "author"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "date", Json.Encode.string rec0.date )
                    , ( "email", Json.Encode.string rec0.email )
                    , ( "name", Json.Encode.string rec0.name )
                    ]
            )
                rec.author
          )
        , ( "committer"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "date", Json.Encode.string rec0.date )
                    , ( "email", Json.Encode.string rec0.email )
                    , ( "name", Json.Encode.string rec0.name )
                    ]
            )
                rec.committer
          )
        , ( "message", Json.Encode.string rec.message )
        , ( "tree"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "sha", Json.Encode.string rec0.sha )
                    , ( "url", Json.Encode.string rec0.url )
                    ]
            )
                rec.tree
          )
        , ( "parents"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "sha", Json.Encode.string rec0.sha )
                        , ( "url", Json.Encode.string rec0.url )
                        , ( "html_url", Json.Encode.string rec0.htmlUrl )
                        ]
                )
                rec.parents
          )
        , ( "verification"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "verified", Json.Encode.bool rec0.verified )
                    , ( "reason", Json.Encode.string rec0.reason )
                    , ( "signature"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.signature
                      )
                    , ( "payload"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.payload
                      )
                    ]
            )
                rec.verification
          )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        ]


type alias GistSimple =
    { forks :
        Nullable (List { id : String
        , url : String
        , user : PublicUser
        , createdAt : String
        , updatedAt : String
        })
    , history : Nullable (List GistHistory)
    , forkOf :
        Nullable { url : String
        , forksUrl : String
        , commitsUrl : String
        , id : String
        , nodeId : String
        , gitPullUrl : String
        , gitPushUrl : String
        , htmlUrl : String
        , files : {}
        , public : Bool
        , createdAt : String
        , updatedAt : String
        , description : Nullable String
        , comments : Int
        , user : Debug.Todo
        , commentsUrl : String
        , owner : Debug.Todo
        , truncated : Bool
        , forks : List Json.Encode.Value
        , history : List Json.Encode.Value
        }
    , url : String
    , forksUrl : String
    , commitsUrl : String
    , id : String
    , nodeId : String
    , gitPullUrl : String
    , gitPushUrl : String
    , htmlUrl : String
    , files : {}
    , public : Bool
    , createdAt : String
    , updatedAt : String
    , description : Nullable String
    , comments : Int
    , user : Nullable String
    , commentsUrl : String
    , owner : SimpleUser
    , truncated : Bool
    }


decodeGistSimple : Json.Decode.Decoder GistSimple
decodeGistSimple =
    Json.Decode.succeed
     (\forks history forkOf url forksUrl commitsUrl id nodeId gitPullUrl gitPushUrl htmlUrl files public createdAt updatedAt description comments user commentsUrl owner truncated ->
         { forks = forks
         , history = history
         , forkOf = forkOf
         , url = url
         , forksUrl = forksUrl
         , commitsUrl = commitsUrl
         , id = id
         , nodeId = nodeId
         , gitPullUrl = gitPullUrl
         , gitPushUrl = gitPushUrl
         , htmlUrl = htmlUrl
         , files = files
         , public = public
         , createdAt = createdAt
         , updatedAt = updatedAt
         , description = description
         , comments = comments
         , user = user
         , commentsUrl = commentsUrl
         , owner = owner
         , truncated = truncated
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "forks"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list
                            (Json.Decode.succeed
                              (\id url user createdAt updatedAt ->
                                  { id = id
                                  , url = url
                                  , user = user
                                  , createdAt = createdAt
                                  , updatedAt = updatedAt
                                  }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "id" Json.Decode.string)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "url" Json.Decode.string)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "user" decodePublicUser)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "created_at"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "updated_at"
                                        Json.Decode.string
                                    )
                            )
                        )
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "history"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list decodeGistHistory)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "fork_of"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.succeed
                          (\url forksUrl commitsUrl id nodeId gitPullUrl gitPushUrl htmlUrl files public createdAt updatedAt description comments user commentsUrl owner truncated forks history ->
                              { url = url
                              , forksUrl = forksUrl
                              , commitsUrl = commitsUrl
                              , id = id
                              , nodeId = nodeId
                              , gitPullUrl = gitPullUrl
                              , gitPushUrl = gitPushUrl
                              , htmlUrl = htmlUrl
                              , files = files
                              , public = public
                              , createdAt = createdAt
                              , updatedAt = updatedAt
                              , description = description
                              , comments = comments
                              , user = user
                              , commentsUrl = commentsUrl
                              , owner = owner
                              , truncated = truncated
                              , forks = forks
                              , history = history
                              }
                          )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "url" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "forks_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "commits_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "id" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "node_id" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "git_pull_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "git_push_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "html_url" Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "files"
                                    (Json.Decode.succeed {})
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "public" Json.Decode.bool)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "created_at"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "updated_at"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "description"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            Json.Decode.string
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "comments" Json.Decode.int)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "user"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            decodeSimpleUser
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "comments_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "owner"
                                    (Json.Decode.oneOf
                                        [ Json.Decode.map
                                            Present
                                            decodeSimpleUser
                                        , Json.Decode.null Null
                                        ]
                                    )
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "truncated" Json.Decode.bool)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "forks"
                                    (Json.Decode.list Json.Decode.value)
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "history"
                                    (Json.Decode.list Json.Decode.value)
                                )
                        )
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_pull_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_push_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "files" (Json.Decode.succeed {}))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "owner" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "truncated" Json.Decode.bool)


encodeGistSimple : GistSimple -> Json.Encode.Value
encodeGistSimple rec =
    Json.Encode.object
        [ ( "forks"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list
                            (\rec0 ->
                                Json.Encode.object
                                    [ ( "id", Json.Encode.string rec0.id )
                                    , ( "url", Json.Encode.string rec0.url )
                                    , ( "user", encodePublicUser rec0.user )
                                    , ( "created_at"
                                      , Json.Encode.string rec0.createdAt
                                      )
                                    , ( "updated_at"
                                      , Json.Encode.string rec0.updatedAt
                                      )
                                    ]
                            )
                            value
            )
                rec.forks
          )
        , ( "history"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list encodeGistHistory value
            )
                rec.history
          )
        , ( "fork_of"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        (\rec0 ->
                            Json.Encode.object
                                [ ( "url", Json.Encode.string rec0.url )
                                , ( "forks_url"
                                  , Json.Encode.string rec0.forksUrl
                                  )
                                , ( "commits_url"
                                  , Json.Encode.string rec0.commitsUrl
                                  )
                                , ( "id", Json.Encode.string rec0.id )
                                , ( "node_id", Json.Encode.string rec0.nodeId )
                                , ( "git_pull_url"
                                  , Json.Encode.string rec0.gitPullUrl
                                  )
                                , ( "git_push_url"
                                  , Json.Encode.string rec0.gitPushUrl
                                  )
                                , ( "html_url"
                                  , Json.Encode.string rec0.htmlUrl
                                  )
                                , ( "files"
                                  , (\rec_0_9_1_1_0_0_1_0_0_3_1_0_0 ->
                                        Json.Encode.object []
                                    )
                                        rec0.files
                                  )
                                , ( "public", Json.Encode.bool rec0.public )
                                , ( "created_at"
                                  , Json.Encode.string rec0.createdAt
                                  )
                                , ( "updated_at"
                                  , Json.Encode.string rec0.updatedAt
                                  )
                                , ( "description"
                                  , (\nullableValue0 ->
                                        case nullableValue0 of
                                            Null ->
                                                Json.Encode.null

                                            Present value0 ->
                                                Json.Encode.string value0
                                    )
                                        rec0.description
                                  )
                                , ( "comments", Json.Encode.int rec0.comments )
                                , ( "user"
                                  , Debug.todo "decode anyOf" rec0.user
                                  )
                                , ( "comments_url"
                                  , Json.Encode.string rec0.commentsUrl
                                  )
                                , ( "owner"
                                  , Debug.todo "decode anyOf" rec0.owner
                                  )
                                , ( "truncated"
                                  , Json.Encode.bool rec0.truncated
                                  )
                                , ( "forks"
                                  , Json.Encode.list Json.Decode.value
                                        rec0.forks
                                  )
                                , ( "history"
                                  , Json.Encode.list Json.Decode.value
                                        rec0.history
                                  )
                                ]
                        )
                            value
            )
                rec.forkOf
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "forks_url", Json.Encode.string rec.forksUrl )
        , ( "commits_url", Json.Encode.string rec.commitsUrl )
        , ( "id", Json.Encode.string rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "git_pull_url", Json.Encode.string rec.gitPullUrl )
        , ( "git_push_url", Json.Encode.string rec.gitPushUrl )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "files", (\rec0 -> Json.Encode.object []) rec.files )
        , ( "public", Json.Encode.bool rec.public )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "comments", Json.Encode.int rec.comments )
        , ( "user"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.user
          )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "owner", encodeSimpleUser rec.owner )
        , ( "truncated", Json.Encode.bool rec.truncated )
        ]


type alias GistHistory =
    { user : Debug.Todo
    , version : String
    , committedAt : String
    , changeStatus : { total : Int, additions : Int, deletions : Int }
    , url : String
    }


decodeGistHistory : Json.Decode.Decoder GistHistory
decodeGistHistory =
    Json.Decode.succeed
     (\user version committedAt changeStatus url ->
         { user = user
         , version = version
         , committedAt = committedAt
         , changeStatus = changeStatus
         , url = url
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "version" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "committed_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "change_status"
                (Json.Decode.succeed
                  (\total additions deletions ->
                      { total = total
                      , additions = additions
                      , deletions = deletions
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "total" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "additions" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "deletions" Json.Decode.int)
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)


encodeGistHistory : GistHistory -> Json.Encode.Value
encodeGistHistory rec =
    Json.Encode.object
        [ ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "version", Json.Encode.string rec.version )
        , ( "committed_at", Json.Encode.string rec.committedAt )
        , ( "change_status"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "total", Json.Encode.int rec0.total )
                    , ( "additions", Json.Encode.int rec0.additions )
                    , ( "deletions", Json.Encode.int rec0.deletions )
                    ]
            )
                rec.changeStatus
          )
        , ( "url", Json.Encode.string rec.url )
        ]


type alias GistCommit =
    { url : String
    , version : String
    , user : Debug.Todo
    , changeStatus : { total : Int, additions : Int, deletions : Int }
    , committedAt : String
    }


decodeGistCommit : Json.Decode.Decoder GistCommit
decodeGistCommit =
    Json.Decode.succeed
     (\url version user changeStatus committedAt ->
         { url = url
         , version = version
         , user = user
         , changeStatus = changeStatus
         , committedAt = committedAt
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "version" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "change_status"
                (Json.Decode.succeed
                  (\total additions deletions ->
                      { total = total
                      , additions = additions
                      , deletions = deletions
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "total" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "additions" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "deletions" Json.Decode.int)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "committed_at" Json.Decode.string)


encodeGistCommit : GistCommit -> Json.Encode.Value
encodeGistCommit rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "version", Json.Encode.string rec.version )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "change_status"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "total", Json.Encode.int rec0.total )
                    , ( "additions", Json.Encode.int rec0.additions )
                    , ( "deletions", Json.Encode.int rec0.deletions )
                    ]
            )
                rec.changeStatus
          )
        , ( "committed_at", Json.Encode.string rec.committedAt )
        ]


type alias GistComment =
    { id : Int
    , nodeId : String
    , url : String
    , body : String
    , user : Debug.Todo
    , createdAt : String
    , updatedAt : String
    , authorAssociation : AuthorAssociation
    }


decodeGistComment : Json.Decode.Decoder GistComment
decodeGistComment =
    Json.Decode.succeed
     (\id nodeId url body user createdAt updatedAt authorAssociation ->
         { id = id
         , nodeId = nodeId
         , url = url
         , body = body
         , user = user
         , createdAt = createdAt
         , updatedAt = updatedAt
         , authorAssociation = authorAssociation
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author_association" decodeAuthorAssociation)


encodeGistComment : GistComment -> Json.Encode.Value
encodeGistComment rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "body", Json.Encode.string rec.body )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "author_association"
          , encodeAuthorAssociation rec.authorAssociation
          )
        ]


type alias FullRepository =
    { id : Int
    , nodeId : String
    , name : String
    , fullName : String
    , owner : SimpleUser
    , private : Bool
    , htmlUrl : String
    , description : Nullable String
    , fork : Bool
    , url : String
    , archiveUrl : String
    , assigneesUrl : String
    , blobsUrl : String
    , branchesUrl : String
    , collaboratorsUrl : String
    , commentsUrl : String
    , commitsUrl : String
    , compareUrl : String
    , contentsUrl : String
    , contributorsUrl : String
    , deploymentsUrl : String
    , downloadsUrl : String
    , eventsUrl : String
    , forksUrl : String
    , gitCommitsUrl : String
    , gitRefsUrl : String
    , gitTagsUrl : String
    , gitUrl : String
    , issueCommentUrl : String
    , issueEventsUrl : String
    , issuesUrl : String
    , keysUrl : String
    , labelsUrl : String
    , languagesUrl : String
    , mergesUrl : String
    , milestonesUrl : String
    , notificationsUrl : String
    , pullsUrl : String
    , releasesUrl : String
    , sshUrl : String
    , stargazersUrl : String
    , statusesUrl : String
    , subscribersUrl : String
    , subscriptionUrl : String
    , tagsUrl : String
    , teamsUrl : String
    , treesUrl : String
    , cloneUrl : String
    , mirrorUrl : Nullable String
    , hooksUrl : String
    , svnUrl : String
    , homepage : Nullable String
    , language : Nullable String
    , forksCount : Int
    , stargazersCount : Int
    , watchersCount : Int
    , size : Int
    , defaultBranch : String
    , openIssuesCount : Int
    , isTemplate : Bool
    , topics : List String
    , hasIssues : Bool
    , hasProjects : Bool
    , hasWiki : Bool
    , hasPages : Bool
    , hasDownloads : Bool
    , archived : Bool
    , disabled : Bool
    , visibility : String
    , pushedAt : String
    , createdAt : String
    , updatedAt : String
    , permissions :
        { admin : Bool
        , maintain : Bool
        , push : Bool
        , triage : Bool
        , pull : Bool
        }
    , allowRebaseMerge : Bool
    , templateRepository : Debug.Todo
    , tempCloneToken : Nullable String
    , allowSquashMerge : Bool
    , allowAutoMerge : Bool
    , deleteBranchOnMerge : Bool
    , allowMergeCommit : Bool
    , allowUpdateBranch : Bool
    , useSquashPrTitleAsDefault : Bool
    , squashMergeCommitTitle : String
    , squashMergeCommitMessage : String
    , mergeCommitTitle : String
    , mergeCommitMessage : String
    , allowForking : Bool
    , webCommitSignoffRequired : Bool
    , subscribersCount : Int
    , networkCount : Int
    , license : Debug.Todo
    , organization : Debug.Todo
    , parent : Repository
    , source : Repository
    , forks : Int
    , masterBranch : String
    , openIssues : Int
    , watchers : Int
    , anonymousAccessEnabled : Bool
    , codeOfConduct : CodeOfConductSimple
    , securityAndAnalysis : SecurityAndAnalysis
    }


decodeFullRepository : Json.Decode.Decoder FullRepository
decodeFullRepository =
    Json.Decode.succeed
     (\id nodeId name fullName owner private htmlUrl description fork url archiveUrl assigneesUrl blobsUrl branchesUrl collaboratorsUrl commentsUrl commitsUrl compareUrl contentsUrl contributorsUrl deploymentsUrl downloadsUrl eventsUrl forksUrl gitCommitsUrl gitRefsUrl gitTagsUrl gitUrl issueCommentUrl issueEventsUrl issuesUrl keysUrl labelsUrl languagesUrl mergesUrl milestonesUrl notificationsUrl pullsUrl releasesUrl sshUrl stargazersUrl statusesUrl subscribersUrl subscriptionUrl tagsUrl teamsUrl treesUrl cloneUrl mirrorUrl hooksUrl svnUrl homepage language forksCount stargazersCount watchersCount size defaultBranch openIssuesCount isTemplate topics hasIssues hasProjects hasWiki hasPages hasDownloads archived disabled visibility pushedAt createdAt updatedAt permissions allowRebaseMerge templateRepository tempCloneToken allowSquashMerge allowAutoMerge deleteBranchOnMerge allowMergeCommit allowUpdateBranch useSquashPrTitleAsDefault squashMergeCommitTitle squashMergeCommitMessage mergeCommitTitle mergeCommitMessage allowForking webCommitSignoffRequired subscribersCount networkCount license organization parent source forks masterBranch openIssues watchers anonymousAccessEnabled codeOfConduct securityAndAnalysis ->
         { id = id
         , nodeId = nodeId
         , name = name
         , fullName = fullName
         , owner = owner
         , private = private
         , htmlUrl = htmlUrl
         , description = description
         , fork = fork
         , url = url
         , archiveUrl = archiveUrl
         , assigneesUrl = assigneesUrl
         , blobsUrl = blobsUrl
         , branchesUrl = branchesUrl
         , collaboratorsUrl = collaboratorsUrl
         , commentsUrl = commentsUrl
         , commitsUrl = commitsUrl
         , compareUrl = compareUrl
         , contentsUrl = contentsUrl
         , contributorsUrl = contributorsUrl
         , deploymentsUrl = deploymentsUrl
         , downloadsUrl = downloadsUrl
         , eventsUrl = eventsUrl
         , forksUrl = forksUrl
         , gitCommitsUrl = gitCommitsUrl
         , gitRefsUrl = gitRefsUrl
         , gitTagsUrl = gitTagsUrl
         , gitUrl = gitUrl
         , issueCommentUrl = issueCommentUrl
         , issueEventsUrl = issueEventsUrl
         , issuesUrl = issuesUrl
         , keysUrl = keysUrl
         , labelsUrl = labelsUrl
         , languagesUrl = languagesUrl
         , mergesUrl = mergesUrl
         , milestonesUrl = milestonesUrl
         , notificationsUrl = notificationsUrl
         , pullsUrl = pullsUrl
         , releasesUrl = releasesUrl
         , sshUrl = sshUrl
         , stargazersUrl = stargazersUrl
         , statusesUrl = statusesUrl
         , subscribersUrl = subscribersUrl
         , subscriptionUrl = subscriptionUrl
         , tagsUrl = tagsUrl
         , teamsUrl = teamsUrl
         , treesUrl = treesUrl
         , cloneUrl = cloneUrl
         , mirrorUrl = mirrorUrl
         , hooksUrl = hooksUrl
         , svnUrl = svnUrl
         , homepage = homepage
         , language = language
         , forksCount = forksCount
         , stargazersCount = stargazersCount
         , watchersCount = watchersCount
         , size = size
         , defaultBranch = defaultBranch
         , openIssuesCount = openIssuesCount
         , isTemplate = isTemplate
         , topics = topics
         , hasIssues = hasIssues
         , hasProjects = hasProjects
         , hasWiki = hasWiki
         , hasPages = hasPages
         , hasDownloads = hasDownloads
         , archived = archived
         , disabled = disabled
         , visibility = visibility
         , pushedAt = pushedAt
         , createdAt = createdAt
         , updatedAt = updatedAt
         , permissions = permissions
         , allowRebaseMerge = allowRebaseMerge
         , templateRepository = templateRepository
         , tempCloneToken = tempCloneToken
         , allowSquashMerge = allowSquashMerge
         , allowAutoMerge = allowAutoMerge
         , deleteBranchOnMerge = deleteBranchOnMerge
         , allowMergeCommit = allowMergeCommit
         , allowUpdateBranch = allowUpdateBranch
         , useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
         , squashMergeCommitTitle = squashMergeCommitTitle
         , squashMergeCommitMessage = squashMergeCommitMessage
         , mergeCommitTitle = mergeCommitTitle
         , mergeCommitMessage = mergeCommitMessage
         , allowForking = allowForking
         , webCommitSignoffRequired = webCommitSignoffRequired
         , subscribersCount = subscribersCount
         , networkCount = networkCount
         , license = license
         , organization = organization
         , parent = parent
         , source = source
         , forks = forks
         , masterBranch = masterBranch
         , openIssues = openIssues
         , watchers = watchers
         , anonymousAccessEnabled = anonymousAccessEnabled
         , codeOfConduct = codeOfConduct
         , securityAndAnalysis = securityAndAnalysis
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "full_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "owner" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "private" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "fork" Json.Decode.bool)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archive_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assignees_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "blobs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "branches_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "collaborators_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "compare_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contents_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contributors_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deployments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "downloads_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_refs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_tags_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_comment_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issue_events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issues_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "keys_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "labels_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "languages_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merges_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "milestones_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "notifications_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pulls_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "releases_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ssh_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "stargazers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "statuses_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscribers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscription_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tags_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "teams_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "trees_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "clone_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "mirror_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "hooks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "svn_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "homepage"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "language"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "stargazers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "watchers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "size" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "default_branch" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "open_issues_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "is_template" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "topics" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_issues" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_projects" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_wiki" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_pages" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "has_downloads" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archived" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "disabled" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "visibility" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pushed_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "permissions"
                (Json.Decode.succeed
                  (\admin maintain push triage pull ->
                      { admin = admin
                      , maintain = maintain
                      , push = push
                      , triage = triage
                      , pull = pull
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "admin" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "maintain" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "push" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "triage" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "pull" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_rebase_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "template_repository"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeRepository
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "temp_clone_token"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_squash_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_auto_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "delete_branch_on_merge" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_merge_commit" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_update_branch" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "use_squash_pr_title_as_default" Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "squash_merge_commit_title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "squash_merge_commit_message" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merge_commit_title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merge_commit_message" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allow_forking" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "web_commit_signoff_required" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscribers_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "network_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "license"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeLicenseSimple
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "organization"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "parent" decodeRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "source" decodeRepository)
        |> Json.Decode.Extra.andMap (Json.Decode.field "forks" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "master_branch" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "open_issues" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "watchers" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "anonymous_access_enabled" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "code_of_conduct" decodeCodeOfConductSimple)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "security_and_analysis" decodeSecurityAndAnalysis
            )


encodeFullRepository : FullRepository -> Json.Encode.Value
encodeFullRepository rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "full_name", Json.Encode.string rec.fullName )
        , ( "owner", encodeSimpleUser rec.owner )
        , ( "private", Json.Encode.bool rec.private )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "fork", Json.Encode.bool rec.fork )
        , ( "url", Json.Encode.string rec.url )
        , ( "archive_url", Json.Encode.string rec.archiveUrl )
        , ( "assignees_url", Json.Encode.string rec.assigneesUrl )
        , ( "blobs_url", Json.Encode.string rec.blobsUrl )
        , ( "branches_url", Json.Encode.string rec.branchesUrl )
        , ( "collaborators_url", Json.Encode.string rec.collaboratorsUrl )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "commits_url", Json.Encode.string rec.commitsUrl )
        , ( "compare_url", Json.Encode.string rec.compareUrl )
        , ( "contents_url", Json.Encode.string rec.contentsUrl )
        , ( "contributors_url", Json.Encode.string rec.contributorsUrl )
        , ( "deployments_url", Json.Encode.string rec.deploymentsUrl )
        , ( "downloads_url", Json.Encode.string rec.downloadsUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "forks_url", Json.Encode.string rec.forksUrl )
        , ( "git_commits_url", Json.Encode.string rec.gitCommitsUrl )
        , ( "git_refs_url", Json.Encode.string rec.gitRefsUrl )
        , ( "git_tags_url", Json.Encode.string rec.gitTagsUrl )
        , ( "git_url", Json.Encode.string rec.gitUrl )
        , ( "issue_comment_url", Json.Encode.string rec.issueCommentUrl )
        , ( "issue_events_url", Json.Encode.string rec.issueEventsUrl )
        , ( "issues_url", Json.Encode.string rec.issuesUrl )
        , ( "keys_url", Json.Encode.string rec.keysUrl )
        , ( "labels_url", Json.Encode.string rec.labelsUrl )
        , ( "languages_url", Json.Encode.string rec.languagesUrl )
        , ( "merges_url", Json.Encode.string rec.mergesUrl )
        , ( "milestones_url", Json.Encode.string rec.milestonesUrl )
        , ( "notifications_url", Json.Encode.string rec.notificationsUrl )
        , ( "pulls_url", Json.Encode.string rec.pullsUrl )
        , ( "releases_url", Json.Encode.string rec.releasesUrl )
        , ( "ssh_url", Json.Encode.string rec.sshUrl )
        , ( "stargazers_url", Json.Encode.string rec.stargazersUrl )
        , ( "statuses_url", Json.Encode.string rec.statusesUrl )
        , ( "subscribers_url", Json.Encode.string rec.subscribersUrl )
        , ( "subscription_url", Json.Encode.string rec.subscriptionUrl )
        , ( "tags_url", Json.Encode.string rec.tagsUrl )
        , ( "teams_url", Json.Encode.string rec.teamsUrl )
        , ( "trees_url", Json.Encode.string rec.treesUrl )
        , ( "clone_url", Json.Encode.string rec.cloneUrl )
        , ( "mirror_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.mirrorUrl
          )
        , ( "hooks_url", Json.Encode.string rec.hooksUrl )
        , ( "svn_url", Json.Encode.string rec.svnUrl )
        , ( "homepage"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.homepage
          )
        , ( "language"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.language
          )
        , ( "forks_count", Json.Encode.int rec.forksCount )
        , ( "stargazers_count", Json.Encode.int rec.stargazersCount )
        , ( "watchers_count", Json.Encode.int rec.watchersCount )
        , ( "size", Json.Encode.int rec.size )
        , ( "default_branch", Json.Encode.string rec.defaultBranch )
        , ( "open_issues_count", Json.Encode.int rec.openIssuesCount )
        , ( "is_template", Json.Encode.bool rec.isTemplate )
        , ( "topics", Json.Encode.list Json.Encode.string rec.topics )
        , ( "has_issues", Json.Encode.bool rec.hasIssues )
        , ( "has_projects", Json.Encode.bool rec.hasProjects )
        , ( "has_wiki", Json.Encode.bool rec.hasWiki )
        , ( "has_pages", Json.Encode.bool rec.hasPages )
        , ( "has_downloads", Json.Encode.bool rec.hasDownloads )
        , ( "archived", Json.Encode.bool rec.archived )
        , ( "disabled", Json.Encode.bool rec.disabled )
        , ( "visibility", Json.Encode.string rec.visibility )
        , ( "pushed_at", Json.Encode.string rec.pushedAt )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "permissions"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "admin", Json.Encode.bool rec0.admin )
                    , ( "maintain", Json.Encode.bool rec0.maintain )
                    , ( "push", Json.Encode.bool rec0.push )
                    , ( "triage", Json.Encode.bool rec0.triage )
                    , ( "pull", Json.Encode.bool rec0.pull )
                    ]
            )
                rec.permissions
          )
        , ( "allow_rebase_merge", Json.Encode.bool rec.allowRebaseMerge )
        , ( "template_repository"
          , Debug.todo "decode anyOf" rec.templateRepository
          )
        , ( "temp_clone_token"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.tempCloneToken
          )
        , ( "allow_squash_merge", Json.Encode.bool rec.allowSquashMerge )
        , ( "allow_auto_merge", Json.Encode.bool rec.allowAutoMerge )
        , ( "delete_branch_on_merge", Json.Encode.bool rec.deleteBranchOnMerge )
        , ( "allow_merge_commit", Json.Encode.bool rec.allowMergeCommit )
        , ( "allow_update_branch", Json.Encode.bool rec.allowUpdateBranch )
        , ( "use_squash_pr_title_as_default"
          , Json.Encode.bool rec.useSquashPrTitleAsDefault
          )
        , ( "squash_merge_commit_title"
          , Json.Encode.string rec.squashMergeCommitTitle
          )
        , ( "squash_merge_commit_message"
          , Json.Encode.string rec.squashMergeCommitMessage
          )
        , ( "merge_commit_title", Json.Encode.string rec.mergeCommitTitle )
        , ( "merge_commit_message", Json.Encode.string rec.mergeCommitMessage )
        , ( "allow_forking", Json.Encode.bool rec.allowForking )
        , ( "web_commit_signoff_required"
          , Json.Encode.bool rec.webCommitSignoffRequired
          )
        , ( "subscribers_count", Json.Encode.int rec.subscribersCount )
        , ( "network_count", Json.Encode.int rec.networkCount )
        , ( "license", Debug.todo "decode anyOf" rec.license )
        , ( "organization", Debug.todo "decode anyOf" rec.organization )
        , ( "parent", encodeRepository rec.parent )
        , ( "source", encodeRepository rec.source )
        , ( "forks", Json.Encode.int rec.forks )
        , ( "master_branch", Json.Encode.string rec.masterBranch )
        , ( "open_issues", Json.Encode.int rec.openIssues )
        , ( "watchers", Json.Encode.int rec.watchers )
        , ( "anonymous_access_enabled"
          , Json.Encode.bool rec.anonymousAccessEnabled
          )
        , ( "code_of_conduct", encodeCodeOfConductSimple rec.codeOfConduct )
        , ( "security_and_analysis"
          , encodeSecurityAndAnalysis rec.securityAndAnalysis
          )
        ]


type alias FileCommit =
    { content :
        Nullable { name : String
        , path : String
        , sha : String
        , size : Int
        , url : String
        , htmlUrl : String
        , gitUrl : String
        , downloadUrl : String
        , type_ : String
        , links : { self : String, git : String, html : String }
        }
    , commit :
        { sha : String
        , nodeId : String
        , url : String
        , htmlUrl : String
        , author : { date : String, name : String, email : String }
        , committer : { date : String, name : String, email : String }
        , message : String
        , tree : { url : String, sha : String }
        , parents : List { url : String, htmlUrl : String, sha : String }
        , verification :
            { verified : Bool
            , reason : String
            , signature : Nullable String
            , payload : Nullable String
            }
        }
    }


decodeFileCommit : Json.Decode.Decoder FileCommit
decodeFileCommit =
    Json.Decode.succeed
     (\content commit -> { content = content, commit = commit })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "content"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.succeed
                          (\name path sha size url htmlUrl gitUrl downloadUrl type_ links ->
                              { name = name
                              , path = path
                              , sha = sha
                              , size = size
                              , url = url
                              , htmlUrl = htmlUrl
                              , gitUrl = gitUrl
                              , downloadUrl = downloadUrl
                              , type_ = type_
                              , links = links
                              }
                          )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "name" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "path" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "sha" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "size" Json.Decode.int)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "url" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "html_url" Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "git_url" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "download_url"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "type" Json.Decode.string)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "_links"
                                    (Json.Decode.succeed
                                      (\self git html ->
                                          { self = self
                                          , git = git
                                          , html = html
                                          }
                                      )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "self"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "git"
                                                Json.Decode.string
                                            )
                                        |> Json.Decode.Extra.andMap
                                            (Json.Decode.field
                                                "html"
                                                Json.Decode.string
                                            )
                                    )
                                )
                        )
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit"
                (Json.Decode.succeed
                  (\sha nodeId url htmlUrl author committer message tree parents verification ->
                      { sha = sha
                      , nodeId = nodeId
                      , url = url
                      , htmlUrl = htmlUrl
                      , author = author
                      , committer = committer
                      , message = message
                      , tree = tree
                      , parents = parents
                      , verification = verification
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "node_id" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "html_url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "author"
                            (Json.Decode.succeed
                              (\date name email ->
                                  { date = date, name = name, email = email }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "date" Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "name" Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "email"
                                        Json.Decode.string
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "committer"
                            (Json.Decode.succeed
                              (\date name email ->
                                  { date = date, name = name, email = email }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "date" Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "name" Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "email"
                                        Json.Decode.string
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "message" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "tree"
                            (Json.Decode.succeed
                              (\url sha -> { url = url, sha = sha })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "url" Json.Decode.string)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "sha" Json.Decode.string)
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "parents"
                            (Json.Decode.list
                                (Json.Decode.succeed
                                  (\url htmlUrl sha ->
                                      { url = url
                                      , htmlUrl = htmlUrl
                                      , sha = sha
                                      }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "html_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "sha"
                                            Json.Decode.string
                                        )
                                )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "verification"
                            (Json.Decode.succeed
                              (\verified reason signature payload ->
                                  { verified = verified
                                  , reason = reason
                                  , signature = signature
                                  , payload = payload
                                  }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "verified"
                                        Json.Decode.bool
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "reason"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "signature"
                                        (Json.Decode.oneOf
                                            [ Json.Decode.map
                                                Present
                                                Json.Decode.string
                                            , Json.Decode.null Null
                                            ]
                                        )
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "payload"
                                        (Json.Decode.oneOf
                                            [ Json.Decode.map
                                                Present
                                                Json.Decode.string
                                            , Json.Decode.null Null
                                            ]
                                        )
                                    )
                            )
                        )
                )
            )


encodeFileCommit : FileCommit -> Json.Encode.Value
encodeFileCommit rec =
    Json.Encode.object
        [ ( "content"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        (\rec0 ->
                            Json.Encode.object
                                [ ( "name", Json.Encode.string rec0.name )
                                , ( "path", Json.Encode.string rec0.path )
                                , ( "sha", Json.Encode.string rec0.sha )
                                , ( "size", Json.Encode.int rec0.size )
                                , ( "url", Json.Encode.string rec0.url )
                                , ( "html_url"
                                  , Json.Encode.string rec0.htmlUrl
                                  )
                                , ( "git_url", Json.Encode.string rec0.gitUrl )
                                , ( "download_url"
                                  , Json.Encode.string rec0.downloadUrl
                                  )
                                , ( "type", Json.Encode.string rec0.type_ )
                                , ( "_links"
                                  , (\rec_0_10_1_1_0_0_1_0_0_1_1_0_0 ->
                                        Json.Encode.object
                                            [ ( "self"
                                              , Json.Encode.string
                                                    rec_0_10_1_1_0_0_1_0_0_1_1_0_0.self
                                              )
                                            , ( "git"
                                              , Json.Encode.string
                                                    rec_0_10_1_1_0_0_1_0_0_1_1_0_0.git
                                              )
                                            , ( "html"
                                              , Json.Encode.string
                                                    rec_0_10_1_1_0_0_1_0_0_1_1_0_0.html
                                              )
                                            ]
                                    )
                                        rec0.links
                                  )
                                ]
                        )
                            value
            )
                rec.content
          )
        , ( "commit"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "sha", Json.Encode.string rec0.sha )
                    , ( "node_id", Json.Encode.string rec0.nodeId )
                    , ( "url", Json.Encode.string rec0.url )
                    , ( "html_url", Json.Encode.string rec0.htmlUrl )
                    , ( "author"
                      , (\rec_0_5_1_1_0_2_1_0_0 ->
                            Json.Encode.object
                                [ ( "date"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_2_1_0_0.date
                                  )
                                , ( "name"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_2_1_0_0.name
                                  )
                                , ( "email"
                                  , Json.Encode.string
                                        rec_0_5_1_1_0_2_1_0_0.email
                                  )
                                ]
                        )
                            rec0.author
                      )
                    , ( "committer"
                      , (\rec_0_6_1_1_0_2_1_0_0 ->
                            Json.Encode.object
                                [ ( "date"
                                  , Json.Encode.string
                                        rec_0_6_1_1_0_2_1_0_0.date
                                  )
                                , ( "name"
                                  , Json.Encode.string
                                        rec_0_6_1_1_0_2_1_0_0.name
                                  )
                                , ( "email"
                                  , Json.Encode.string
                                        rec_0_6_1_1_0_2_1_0_0.email
                                  )
                                ]
                        )
                            rec0.committer
                      )
                    , ( "message", Json.Encode.string rec0.message )
                    , ( "tree"
                      , (\rec_0_8_1_1_0_2_1_0_0 ->
                            Json.Encode.object
                                [ ( "url"
                                  , Json.Encode.string rec_0_8_1_1_0_2_1_0_0.url
                                  )
                                , ( "sha"
                                  , Json.Encode.string rec_0_8_1_1_0_2_1_0_0.sha
                                  )
                                ]
                        )
                            rec0.tree
                      )
                    , ( "parents"
                      , Json.Encode.list
                            (\rec_1_0_9_1_1_0_2_1_0_0 ->
                                Json.Encode.object
                                    [ ( "url"
                                      , Json.Encode.string
                                            rec_1_0_9_1_1_0_2_1_0_0.url
                                      )
                                    , ( "html_url"
                                      , Json.Encode.string
                                            rec_1_0_9_1_1_0_2_1_0_0.htmlUrl
                                      )
                                    , ( "sha"
                                      , Json.Encode.string
                                            rec_1_0_9_1_1_0_2_1_0_0.sha
                                      )
                                    ]
                            )
                            rec0.parents
                      )
                    , ( "verification"
                      , (\rec_0_10_1_1_0_2_1_0_0 ->
                            Json.Encode.object
                                [ ( "verified"
                                  , Json.Encode.bool
                                        rec_0_10_1_1_0_2_1_0_0.verified
                                  )
                                , ( "reason"
                                  , Json.Encode.string
                                        rec_0_10_1_1_0_2_1_0_0.reason
                                  )
                                , ( "signature"
                                  , (\nullableValue ->
                                        case nullableValue of
                                            Null ->
                                                Json.Encode.null

                                            Present value ->
                                                Json.Encode.string value
                                    )
                                        rec_0_10_1_1_0_2_1_0_0.signature
                                  )
                                , ( "payload"
                                  , (\nullableValue ->
                                        case nullableValue of
                                            Null ->
                                                Json.Encode.null

                                            Present value ->
                                                Json.Encode.string value
                                    )
                                        rec_0_10_1_1_0_2_1_0_0.payload
                                  )
                                ]
                        )
                            rec0.verification
                      )
                    ]
            )
                rec.commit
          )
        ]


type alias Feed =
    { timelineUrl : String
    , userUrl : String
    , currentUserPublicUrl : String
    , currentUserUrl : String
    , currentUserActorUrl : String
    , currentUserOrganizationUrl : String
    , currentUserOrganizationUrls : List String
    , securityAdvisoriesUrl : String
    , links :
        { timeline : LinkWithType
        , user : LinkWithType
        , securityAdvisories : LinkWithType
        , currentUser : LinkWithType
        , currentUserPublic : LinkWithType
        , currentUserActor : LinkWithType
        , currentUserOrganization : LinkWithType
        , currentUserOrganizations : List LinkWithType
        }
    }


decodeFeed : Json.Decode.Decoder Feed
decodeFeed =
    Json.Decode.succeed
     (\timelineUrl userUrl currentUserPublicUrl currentUserUrl currentUserActorUrl currentUserOrganizationUrl currentUserOrganizationUrls securityAdvisoriesUrl links ->
         { timelineUrl = timelineUrl
         , userUrl = userUrl
         , currentUserPublicUrl = currentUserPublicUrl
         , currentUserUrl = currentUserUrl
         , currentUserActorUrl = currentUserActorUrl
         , currentUserOrganizationUrl = currentUserOrganizationUrl
         , currentUserOrganizationUrls = currentUserOrganizationUrls
         , securityAdvisoriesUrl = securityAdvisoriesUrl
         , links = links
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "timeline_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "user_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "current_user_public_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "current_user_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "current_user_actor_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "current_user_organization_url"
                Json.Decode.string
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "current_user_organization_urls"
                (Json.Decode.list Json.Decode.string)
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "security_advisories_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "_links"
                (Json.Decode.succeed
                  (\timeline user securityAdvisories currentUser currentUserPublic currentUserActor currentUserOrganization currentUserOrganizations ->
                      { timeline = timeline
                      , user = user
                      , securityAdvisories = securityAdvisories
                      , currentUser = currentUser
                      , currentUserPublic = currentUserPublic
                      , currentUserActor = currentUserActor
                      , currentUserOrganization = currentUserOrganization
                      , currentUserOrganizations = currentUserOrganizations
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "timeline" decodeLinkWithType)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "user" decodeLinkWithType)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "security_advisories"
                            decodeLinkWithType
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "current_user" decodeLinkWithType)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "current_user_public"
                            decodeLinkWithType
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "current_user_actor"
                            decodeLinkWithType
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "current_user_organization"
                            decodeLinkWithType
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "current_user_organizations"
                            (Json.Decode.list decodeLinkWithType)
                        )
                )
            )


encodeFeed : Feed -> Json.Encode.Value
encodeFeed rec =
    Json.Encode.object
        [ ( "timeline_url", Json.Encode.string rec.timelineUrl )
        , ( "user_url", Json.Encode.string rec.userUrl )
        , ( "current_user_public_url"
          , Json.Encode.string rec.currentUserPublicUrl
          )
        , ( "current_user_url", Json.Encode.string rec.currentUserUrl )
        , ( "current_user_actor_url"
          , Json.Encode.string rec.currentUserActorUrl
          )
        , ( "current_user_organization_url"
          , Json.Encode.string rec.currentUserOrganizationUrl
          )
        , ( "current_user_organization_urls"
          , Json.Encode.list Json.Encode.string rec.currentUserOrganizationUrls
          )
        , ( "security_advisories_url"
          , Json.Encode.string rec.securityAdvisoriesUrl
          )
        , ( "_links"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "timeline", encodeLinkWithType rec0.timeline )
                    , ( "user", encodeLinkWithType rec0.user )
                    , ( "security_advisories"
                      , encodeLinkWithType rec0.securityAdvisories
                      )
                    , ( "current_user", encodeLinkWithType rec0.currentUser )
                    , ( "current_user_public"
                      , encodeLinkWithType rec0.currentUserPublic
                      )
                    , ( "current_user_actor"
                      , encodeLinkWithType rec0.currentUserActor
                      )
                    , ( "current_user_organization"
                      , encodeLinkWithType rec0.currentUserOrganization
                      )
                    , ( "current_user_organizations"
                      , Json.Encode.list encodeLinkWithType
                            rec0.currentUserOrganizations
                      )
                    ]
            )
                rec.links
          )
        ]


type alias Event =
    { id : String
    , type_ : Nullable String
    , actor : Actor
    , repo : { id : Int, name : String, url : String }
    , org : Actor
    , payload :
        { action : String
        , issue : Issue
        , comment : IssueComment
        , pages :
            List { pageName : String
            , title : String
            , summary : Nullable String
            , action : String
            , sha : String
            , htmlUrl : String
            }
        }
    , public : Bool
    , createdAt : Nullable String
    }


decodeEvent : Json.Decode.Decoder Event
decodeEvent =
    Json.Decode.succeed
     (\id type_ actor repo org payload public createdAt ->
         { id = id
         , type_ = type_
         , actor = actor
         , repo = repo
         , org = org
         , payload = payload
         , public = public
         , createdAt = createdAt
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "type"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeActor)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "repo"
                (Json.Decode.succeed
                  (\id name url -> { id = id, name = name, url = url })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "id" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "org" decodeActor)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "payload"
                (Json.Decode.succeed
                  (\action issue comment pages ->
                      { action = action
                      , issue = issue
                      , comment = comment
                      , pages = pages
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "action" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "issue" decodeIssue)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "comment" decodeIssueComment)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "pages"
                            (Json.Decode.list
                                (Json.Decode.succeed
                                  (\pageName title summary action sha htmlUrl ->
                                      { pageName = pageName
                                      , title = title
                                      , summary = summary
                                      , action = action
                                      , sha = sha
                                      , htmlUrl = htmlUrl
                                      }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "page_name"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "title"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "summary"
                                            (Json.Decode.oneOf
                                                [ Json.Decode.map
                                                    Present
                                                    Json.Decode.string
                                                , Json.Decode.null Null
                                                ]
                                            )
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "action"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "sha"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "html_url"
                                            Json.Decode.string
                                        )
                                )
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "created_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeEvent : Event -> Json.Encode.Value
encodeEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.string rec.id )
        , ( "type"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.type_
          )
        , ( "actor", encodeActor rec.actor )
        , ( "repo"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "id", Json.Encode.int rec0.id )
                    , ( "name", Json.Encode.string rec0.name )
                    , ( "url", Json.Encode.string rec0.url )
                    ]
            )
                rec.repo
          )
        , ( "org", encodeActor rec.org )
        , ( "payload"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "action", Json.Encode.string rec0.action )
                    , ( "issue", encodeIssue rec0.issue )
                    , ( "comment", encodeIssueComment rec0.comment )
                    , ( "pages"
                      , Json.Encode.list
                            (\rec_1_0_4_1_1_0_6_1_0_0 ->
                                Json.Encode.object
                                    [ ( "page_name"
                                      , Json.Encode.string
                                            rec_1_0_4_1_1_0_6_1_0_0.pageName
                                      )
                                    , ( "title"
                                      , Json.Encode.string
                                            rec_1_0_4_1_1_0_6_1_0_0.title
                                      )
                                    , ( "summary"
                                      , (\nullableValue ->
                                            case nullableValue of
                                                Null ->
                                                    Json.Encode.null

                                                Present value ->
                                                    Json.Encode.string value
                                        )
                                            rec_1_0_4_1_1_0_6_1_0_0.summary
                                      )
                                    , ( "action"
                                      , Json.Encode.string
                                            rec_1_0_4_1_1_0_6_1_0_0.action
                                      )
                                    , ( "sha"
                                      , Json.Encode.string
                                            rec_1_0_4_1_1_0_6_1_0_0.sha
                                      )
                                    , ( "html_url"
                                      , Json.Encode.string
                                            rec_1_0_4_1_1_0_6_1_0_0.htmlUrl
                                      )
                                    ]
                            )
                            rec0.pages
                      )
                    ]
            )
                rec.payload
          )
        , ( "public", Json.Encode.bool rec.public )
        , ( "created_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.createdAt
          )
        ]


type alias EnvironmentApprovals =
    { environments :
        List { id : Int
        , nodeId : String
        , name : String
        , url : String
        , htmlUrl : String
        , createdAt : String
        , updatedAt : String
        }
    , state : String
    , user : SimpleUser
    , comment : String
    }


decodeEnvironmentApprovals : Json.Decode.Decoder EnvironmentApprovals
decodeEnvironmentApprovals =
    Json.Decode.succeed
     (\environments state user comment ->
         { environments = environments
         , state = state
         , user = user
         , comment = comment
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "environments"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\id nodeId name url htmlUrl createdAt updatedAt ->
                          { id = id
                          , nodeId = nodeId
                          , name = name
                          , url = url
                          , htmlUrl = htmlUrl
                          , createdAt = createdAt
                          , updatedAt = updatedAt
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "id" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "node_id" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "name" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "html_url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "created_at" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "updated_at" Json.Decode.string)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "user" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comment" Json.Decode.string)


encodeEnvironmentApprovals : EnvironmentApprovals -> Json.Encode.Value
encodeEnvironmentApprovals rec =
    Json.Encode.object
        [ ( "environments"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "id", Json.Encode.int rec0.id )
                        , ( "node_id", Json.Encode.string rec0.nodeId )
                        , ( "name", Json.Encode.string rec0.name )
                        , ( "url", Json.Encode.string rec0.url )
                        , ( "html_url", Json.Encode.string rec0.htmlUrl )
                        , ( "created_at", Json.Encode.string rec0.createdAt )
                        , ( "updated_at", Json.Encode.string rec0.updatedAt )
                        ]
                )
                rec.environments
          )
        , ( "state", Json.Encode.string rec.state )
        , ( "user", encodeSimpleUser rec.user )
        , ( "comment", Json.Encode.string rec.comment )
        ]


type alias Environment =
    { id : Int
    , nodeId : String
    , name : String
    , url : String
    , htmlUrl : String
    , createdAt : String
    , updatedAt : String
    , protectionRules : List Debug.Todo
    , deploymentBranchPolicy : DeploymentBranchPolicySettings
    }


decodeEnvironment : Json.Decode.Decoder Environment
decodeEnvironment =
    Json.Decode.succeed
     (\id nodeId name url htmlUrl createdAt updatedAt protectionRules deploymentBranchPolicy ->
         { id = id
         , nodeId = nodeId
         , name = name
         , url = url
         , htmlUrl = htmlUrl
         , createdAt = createdAt
         , updatedAt = updatedAt
         , protectionRules = protectionRules
         , deploymentBranchPolicy = deploymentBranchPolicy
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "protection_rules"
                (Json.Decode.list
                    (Debug.todo "decode anyOf: not exactly 2 items")
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "deployment_branch_policy"
                decodeDeploymentBranchPolicySettings
            )


encodeEnvironment : Environment -> Json.Encode.Value
encodeEnvironment rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "protection_rules"
          , Json.Encode.list (Debug.todo "decode anyOf") rec.protectionRules
          )
        , ( "deployment_branch_policy"
          , encodeDeploymentBranchPolicySettings rec.deploymentBranchPolicy
          )
        ]


type alias Enterprise =
    { description : Nullable String
    , htmlUrl : String
    , websiteUrl : Nullable String
    , id : Int
    , nodeId : String
    , name : String
    , slug : String
    , createdAt : Nullable String
    , updatedAt : Nullable String
    , avatarUrl : String
    }


decodeEnterprise : Json.Decode.Decoder Enterprise
decodeEnterprise =
    Json.Decode.succeed
     (\description htmlUrl websiteUrl id nodeId name slug createdAt updatedAt avatarUrl ->
         { description = description
         , htmlUrl = htmlUrl
         , websiteUrl = websiteUrl
         , id = id
         , nodeId = nodeId
         , name = name
         , slug = slug
         , createdAt = createdAt
         , updatedAt = updatedAt
         , avatarUrl = avatarUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "website_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "slug" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "created_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "updated_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "avatar_url" Json.Decode.string)


encodeEnterprise : Enterprise -> Json.Encode.Value
encodeEnterprise rec =
    Json.Encode.object
        [ ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "website_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.websiteUrl
          )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "slug", Json.Encode.string rec.slug )
        , ( "created_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.createdAt
          )
        , ( "updated_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.updatedAt
          )
        , ( "avatar_url", Json.Encode.string rec.avatarUrl )
        ]


type alias EnabledRepositories =
    String


decodeEnabledRepositories : Json.Decode.Decoder EnabledRepositories
decodeEnabledRepositories =
    Json.Decode.string


encodeEnabledRepositories : EnabledRepositories -> Json.Encode.Value
encodeEnabledRepositories =
    Json.Encode.string


type alias EnabledOrganizations =
    String


decodeEnabledOrganizations : Json.Decode.Decoder EnabledOrganizations
decodeEnabledOrganizations =
    Json.Decode.string


encodeEnabledOrganizations : EnabledOrganizations -> Json.Encode.Value
encodeEnabledOrganizations =
    Json.Encode.string


type alias EmptyObject =
    {}


decodeEmptyObject : Json.Decode.Decoder EmptyObject
decodeEmptyObject =
    Json.Decode.succeed {}


encodeEmptyObject : EmptyObject -> Json.Encode.Value
encodeEmptyObject rec =
    Json.Encode.object []


type alias Email =
    { email : String
    , primary : Bool
    , verified : Bool
    , visibility : Nullable String
    }


decodeEmail : Json.Decode.Decoder Email
decodeEmail =
    Json.Decode.succeed
     (\email primary verified visibility ->
         { email = email
         , primary = primary
         , verified = verified
         , visibility = visibility
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "email" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "primary" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "verified" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "visibility"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeEmail : Email -> Json.Encode.Value
encodeEmail rec =
    Json.Encode.object
        [ ( "email", Json.Encode.string rec.email )
        , ( "primary", Json.Encode.bool rec.primary )
        , ( "verified", Json.Encode.bool rec.verified )
        , ( "visibility"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.visibility
          )
        ]


type alias DiffEntry =
    { sha : String
    , filename : String
    , status : String
    , additions : Int
    , deletions : Int
    , changes : Int
    , blobUrl : String
    , rawUrl : String
    , contentsUrl : String
    , patch : String
    , previousFilename : String
    }


decodeDiffEntry : Json.Decode.Decoder DiffEntry
decodeDiffEntry =
    Json.Decode.succeed
     (\sha filename status additions deletions changes blobUrl rawUrl contentsUrl patch previousFilename ->
         { sha = sha
         , filename = filename
         , status = status
         , additions = additions
         , deletions = deletions
         , changes = changes
         , blobUrl = blobUrl
         , rawUrl = rawUrl
         , contentsUrl = contentsUrl
         , patch = patch
         , previousFilename = previousFilename
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "filename" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "additions" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deletions" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "changes" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "blob_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "raw_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contents_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "patch" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "previous_filename" Json.Decode.string)


encodeDiffEntry : DiffEntry -> Json.Encode.Value
encodeDiffEntry rec =
    Json.Encode.object
        [ ( "sha", Json.Encode.string rec.sha )
        , ( "filename", Json.Encode.string rec.filename )
        , ( "status", Json.Encode.string rec.status )
        , ( "additions", Json.Encode.int rec.additions )
        , ( "deletions", Json.Encode.int rec.deletions )
        , ( "changes", Json.Encode.int rec.changes )
        , ( "blob_url", Json.Encode.string rec.blobUrl )
        , ( "raw_url", Json.Encode.string rec.rawUrl )
        , ( "contents_url", Json.Encode.string rec.contentsUrl )
        , ( "patch", Json.Encode.string rec.patch )
        , ( "previous_filename", Json.Encode.string rec.previousFilename )
        ]


type alias DeploymentStatus =
    { url : String
    , id : Int
    , nodeId : String
    , state : String
    , creator : Debug.Todo
    , description : String
    , environment : String
    , targetUrl : String
    , createdAt : String
    , updatedAt : String
    , deploymentUrl : String
    , repositoryUrl : String
    , environmentUrl : String
    , logUrl : String
    , performedViaGithubApp : Debug.Todo
    }


decodeDeploymentStatus : Json.Decode.Decoder DeploymentStatus
decodeDeploymentStatus =
    Json.Decode.succeed
     (\url id nodeId state creator description environment targetUrl createdAt updatedAt deploymentUrl repositoryUrl environmentUrl logUrl performedViaGithubApp ->
         { url = url
         , id = id
         , nodeId = nodeId
         , state = state
         , creator = creator
         , description = description
         , environment = environment
         , targetUrl = targetUrl
         , createdAt = createdAt
         , updatedAt = updatedAt
         , deploymentUrl = deploymentUrl
         , repositoryUrl = repositoryUrl
         , environmentUrl = environmentUrl
         , logUrl = logUrl
         , performedViaGithubApp = performedViaGithubApp
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "creator"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "description" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "environment" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "target_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deployment_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "environment_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "log_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )


encodeDeploymentStatus : DeploymentStatus -> Json.Encode.Value
encodeDeploymentStatus rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "state", Json.Encode.string rec.state )
        , ( "creator", Debug.todo "decode anyOf" rec.creator )
        , ( "description", Json.Encode.string rec.description )
        , ( "environment", Json.Encode.string rec.environment )
        , ( "target_url", Json.Encode.string rec.targetUrl )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "deployment_url", Json.Encode.string rec.deploymentUrl )
        , ( "repository_url", Json.Encode.string rec.repositoryUrl )
        , ( "environment_url", Json.Encode.string rec.environmentUrl )
        , ( "log_url", Json.Encode.string rec.logUrl )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        ]


type alias DeploymentSimple =
    { url : String
    , id : Int
    , nodeId : String
    , task : String
    , originalEnvironment : String
    , environment : String
    , description : Nullable String
    , createdAt : String
    , updatedAt : String
    , statusesUrl : String
    , repositoryUrl : String
    , transientEnvironment : Bool
    , productionEnvironment : Bool
    , performedViaGithubApp : Debug.Todo
    }


decodeDeploymentSimple : Json.Decode.Decoder DeploymentSimple
decodeDeploymentSimple =
    Json.Decode.succeed
     (\url id nodeId task originalEnvironment environment description createdAt updatedAt statusesUrl repositoryUrl transientEnvironment productionEnvironment performedViaGithubApp ->
         { url = url
         , id = id
         , nodeId = nodeId
         , task = task
         , originalEnvironment = originalEnvironment
         , environment = environment
         , description = description
         , createdAt = createdAt
         , updatedAt = updatedAt
         , statusesUrl = statusesUrl
         , repositoryUrl = repositoryUrl
         , transientEnvironment = transientEnvironment
         , productionEnvironment = productionEnvironment
         , performedViaGithubApp = performedViaGithubApp
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "task" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "original_environment" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "environment" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "statuses_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "transient_environment" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "production_environment" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )


encodeDeploymentSimple : DeploymentSimple -> Json.Encode.Value
encodeDeploymentSimple rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "task", Json.Encode.string rec.task )
        , ( "original_environment", Json.Encode.string rec.originalEnvironment )
        , ( "environment", Json.Encode.string rec.environment )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "statuses_url", Json.Encode.string rec.statusesUrl )
        , ( "repository_url", Json.Encode.string rec.repositoryUrl )
        , ( "transient_environment", Json.Encode.bool rec.transientEnvironment )
        , ( "production_environment"
          , Json.Encode.bool rec.productionEnvironment
          )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        ]


type alias DeploymentReviewerType =
    String


decodeDeploymentReviewerType : Json.Decode.Decoder DeploymentReviewerType
decodeDeploymentReviewerType =
    Json.Decode.string


encodeDeploymentReviewerType : DeploymentReviewerType -> Json.Encode.Value
encodeDeploymentReviewerType =
    Json.Encode.string


type alias DeploymentBranchPolicySettings =
    Nullable { protectedBranches : Bool, customBranchPolicies : Bool }


decodeDeploymentBranchPolicySettings :
    Json.Decode.Decoder DeploymentBranchPolicySettings
decodeDeploymentBranchPolicySettings =
    Json.Decode.oneOf
        [ Json.Decode.map
            Present
            (Json.Decode.succeed
              (\protectedBranches customBranchPolicies ->
                  { protectedBranches = protectedBranches
                  , customBranchPolicies = customBranchPolicies
                  }
              )
                |> Json.Decode.Extra.andMap
                    (Json.Decode.field "protected_branches" Json.Decode.bool)
                |> Json.Decode.Extra.andMap
                    (Json.Decode.field "custom_branch_policies" Json.Decode.bool
                    )
            )
        , Json.Decode.null Null
        ]


encodeDeploymentBranchPolicySettings :
    DeploymentBranchPolicySettings -> Json.Encode.Value
encodeDeploymentBranchPolicySettings nullableValue =
    case nullableValue of
        Null ->
            Json.Encode.null

        Present value ->
            (\rec ->
                Json.Encode.object
                    [ ( "protected_branches"
                      , Json.Encode.bool rec.protectedBranches
                      )
                    , ( "custom_branch_policies"
                      , Json.Encode.bool rec.customBranchPolicies
                      )
                    ]
            )
                value


type alias DeploymentBranchPolicyNamePattern =
    { name : String }


decodeDeploymentBranchPolicyNamePattern :
    Json.Decode.Decoder DeploymentBranchPolicyNamePattern
decodeDeploymentBranchPolicyNamePattern =
    Json.Decode.succeed (\name -> { name = name })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)


encodeDeploymentBranchPolicyNamePattern :
    DeploymentBranchPolicyNamePattern -> Json.Encode.Value
encodeDeploymentBranchPolicyNamePattern rec =
    Json.Encode.object [ ( "name", Json.Encode.string rec.name ) ]


type alias DeploymentBranchPolicy =
    { id : Int, nodeId : String, name : String }


decodeDeploymentBranchPolicy : Json.Decode.Decoder DeploymentBranchPolicy
decodeDeploymentBranchPolicy =
    Json.Decode.succeed
     (\id nodeId name -> { id = id, nodeId = nodeId, name = name })
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)


encodeDeploymentBranchPolicy : DeploymentBranchPolicy -> Json.Encode.Value
encodeDeploymentBranchPolicy rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        ]


type alias Deployment =
    { url : String
    , id : Int
    , nodeId : String
    , sha : String
    , ref : String
    , task : String
    , payload : Json.Encode.Value
    , originalEnvironment : String
    , environment : String
    , description : Nullable String
    , creator : Debug.Todo
    , createdAt : String
    , updatedAt : String
    , statusesUrl : String
    , repositoryUrl : String
    , transientEnvironment : Bool
    , productionEnvironment : Bool
    , performedViaGithubApp : Debug.Todo
    }


decodeDeployment : Json.Decode.Decoder Deployment
decodeDeployment =
    Json.Decode.succeed
     (\url id nodeId sha ref task payload originalEnvironment environment description creator createdAt updatedAt statusesUrl repositoryUrl transientEnvironment productionEnvironment performedViaGithubApp ->
         { url = url
         , id = id
         , nodeId = nodeId
         , sha = sha
         , ref = ref
         , task = task
         , payload = payload
         , originalEnvironment = originalEnvironment
         , environment = environment
         , description = description
         , creator = creator
         , createdAt = createdAt
         , updatedAt = updatedAt
         , statusesUrl = statusesUrl
         , repositoryUrl = repositoryUrl
         , transientEnvironment = transientEnvironment
         , productionEnvironment = productionEnvironment
         , performedViaGithubApp = performedViaGithubApp
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "ref" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "task" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "payload" Json.Decode.value)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "original_environment" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "environment" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "creator"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "statuses_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "transient_environment" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "production_environment" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )


encodeDeployment : Deployment -> Json.Encode.Value
encodeDeployment rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "ref", Json.Encode.string rec.ref )
        , ( "task", Json.Encode.string rec.task )
        , ( "payload", Json.Decode.value rec.payload )
        , ( "original_environment", Json.Encode.string rec.originalEnvironment )
        , ( "environment", Json.Encode.string rec.environment )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "creator", Debug.todo "decode anyOf" rec.creator )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "statuses_url", Json.Encode.string rec.statusesUrl )
        , ( "repository_url", Json.Encode.string rec.repositoryUrl )
        , ( "transient_environment", Json.Encode.bool rec.transientEnvironment )
        , ( "production_environment"
          , Json.Encode.bool rec.productionEnvironment
          )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        ]


type alias DeployKey =
    { id : Int
    , key : String
    , url : String
    , title : String
    , verified : Bool
    , createdAt : String
    , readOnly : Bool
    , addedBy : Nullable String
    , lastUsed : Nullable String
    }


decodeDeployKey : Json.Decode.Decoder DeployKey
decodeDeployKey =
    Json.Decode.succeed
     (\id key url title verified createdAt readOnly addedBy lastUsed ->
         { id = id
         , key = key
         , url = url
         , title = title
         , verified = verified
         , createdAt = createdAt
         , readOnly = readOnly
         , addedBy = addedBy
         , lastUsed = lastUsed
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "key" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "verified" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "read_only" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "added_by"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "last_used"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeDeployKey : DeployKey -> Json.Encode.Value
encodeDeployKey rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "key", Json.Encode.string rec.key )
        , ( "url", Json.Encode.string rec.url )
        , ( "title", Json.Encode.string rec.title )
        , ( "verified", Json.Encode.bool rec.verified )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "read_only", Json.Encode.bool rec.readOnly )
        , ( "added_by"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.addedBy
          )
        , ( "last_used"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.lastUsed
          )
        ]


type alias DependencyGraphDiff =
    List { changeType : String
    , manifest : String
    , ecosystem : String
    , name : String
    , version : String
    , packageUrl : Nullable String
    , license : Nullable String
    , sourceRepositoryUrl : Nullable String
    , vulnerabilities :
        List { severity : String
        , advisoryGhsaId : String
        , advisorySummary : String
        , advisoryUrl : String
        }
    , scope : String
    }


decodeDependencyGraphDiff : Json.Decode.Decoder DependencyGraphDiff
decodeDependencyGraphDiff =
    Json.Decode.list
        (Json.Decode.succeed
          (\changeType manifest ecosystem name version packageUrl license sourceRepositoryUrl vulnerabilities scope ->
              { changeType = changeType
              , manifest = manifest
              , ecosystem = ecosystem
              , name = name
              , version = version
              , packageUrl = packageUrl
              , license = license
              , sourceRepositoryUrl = sourceRepositoryUrl
              , vulnerabilities = vulnerabilities
              , scope = scope
              }
          )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "change_type" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "manifest" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "ecosystem" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "name" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "version" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field
                    "package_url"
                    (Json.Decode.oneOf
                        [ Json.Decode.map Present Json.Decode.string
                        , Json.Decode.null Null
                        ]
                    )
                )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field
                    "license"
                    (Json.Decode.oneOf
                        [ Json.Decode.map Present Json.Decode.string
                        , Json.Decode.null Null
                        ]
                    )
                )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field
                    "source_repository_url"
                    (Json.Decode.oneOf
                        [ Json.Decode.map Present Json.Decode.string
                        , Json.Decode.null Null
                        ]
                    )
                )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field
                    "vulnerabilities"
                    (Json.Decode.list
                        (Json.Decode.succeed
                          (\severity advisoryGhsaId advisorySummary advisoryUrl ->
                              { severity = severity
                              , advisoryGhsaId = advisoryGhsaId
                              , advisorySummary = advisorySummary
                              , advisoryUrl = advisoryUrl
                              }
                          )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "severity" Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "advisory_ghsa_id"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "advisory_summary"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "advisory_url"
                                    Json.Decode.string
                                )
                        )
                    )
                )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "scope" Json.Decode.string)
        )


encodeDependencyGraphDiff : DependencyGraphDiff -> Json.Encode.Value
encodeDependencyGraphDiff =
    Json.Encode.list
        (\rec ->
            Json.Encode.object
                [ ( "change_type", Json.Encode.string rec.changeType )
                , ( "manifest", Json.Encode.string rec.manifest )
                , ( "ecosystem", Json.Encode.string rec.ecosystem )
                , ( "name", Json.Encode.string rec.name )
                , ( "version", Json.Encode.string rec.version )
                , ( "package_url"
                  , (\nullableValue ->
                        case nullableValue of
                            Null ->
                                Json.Encode.null

                            Present value ->
                                Json.Encode.string value
                    )
                        rec.packageUrl
                  )
                , ( "license"
                  , (\nullableValue ->
                        case nullableValue of
                            Null ->
                                Json.Encode.null

                            Present value ->
                                Json.Encode.string value
                    )
                        rec.license
                  )
                , ( "source_repository_url"
                  , (\nullableValue ->
                        case nullableValue of
                            Null ->
                                Json.Encode.null

                            Present value ->
                                Json.Encode.string value
                    )
                        rec.sourceRepositoryUrl
                  )
                , ( "vulnerabilities"
                  , Json.Encode.list
                        (\rec0 ->
                            Json.Encode.object
                                [ ( "severity"
                                  , Json.Encode.string rec0.severity
                                  )
                                , ( "advisory_ghsa_id"
                                  , Json.Encode.string rec0.advisoryGhsaId
                                  )
                                , ( "advisory_summary"
                                  , Json.Encode.string rec0.advisorySummary
                                  )
                                , ( "advisory_url"
                                  , Json.Encode.string rec0.advisoryUrl
                                  )
                                ]
                        )
                        rec.vulnerabilities
                  )
                , ( "scope", Json.Encode.string rec.scope )
                ]
        )


type alias Dependency =
    { packageUrl : String
    , metadata : Metadata
    , relationship : String
    , scope : String
    , dependencies : List String
    }


decodeDependency : Json.Decode.Decoder Dependency
decodeDependency =
    Json.Decode.succeed
     (\packageUrl metadata relationship scope dependencies ->
         { packageUrl = packageUrl
         , metadata = metadata
         , relationship = relationship
         , scope = scope
         , dependencies = dependencies
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "package_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "metadata" decodeMetadata)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "relationship" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "scope" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dependencies"
                (Json.Decode.list Json.Decode.string)
            )


encodeDependency : Dependency -> Json.Encode.Value
encodeDependency rec =
    Json.Encode.object
        [ ( "package_url", Json.Encode.string rec.packageUrl )
        , ( "metadata", encodeMetadata rec.metadata )
        , ( "relationship", Json.Encode.string rec.relationship )
        , ( "scope", Json.Encode.string rec.scope )
        , ( "dependencies"
          , Json.Encode.list Json.Encode.string rec.dependencies
          )
        ]


type alias DependabotSecret =
    { name : String, createdAt : String, updatedAt : String }


decodeDependabotSecret : Json.Decode.Decoder DependabotSecret
decodeDependabotSecret =
    Json.Decode.succeed
     (\name createdAt updatedAt ->
         { name = name, createdAt = createdAt, updatedAt = updatedAt }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)


encodeDependabotSecret : DependabotSecret -> Json.Encode.Value
encodeDependabotSecret rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        ]


type alias DependabotPublicKey =
    { keyId : String, key : String }


decodeDependabotPublicKey : Json.Decode.Decoder DependabotPublicKey
decodeDependabotPublicKey =
    Json.Decode.succeed (\keyId key -> { keyId = keyId, key = key })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "key_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "key" Json.Decode.string)


encodeDependabotPublicKey : DependabotPublicKey -> Json.Encode.Value
encodeDependabotPublicKey rec =
    Json.Encode.object
        [ ( "key_id", Json.Encode.string rec.keyId )
        , ( "key", Json.Encode.string rec.key )
        ]


type alias DependabotAlertSecurityVulnerability =
    { package : DependabotAlertPackage
    , severity : String
    , vulnerableVersionRange : String
    , firstPatchedVersion : Nullable { identifier : String }
    }


decodeDependabotAlertSecurityVulnerability :
    Json.Decode.Decoder DependabotAlertSecurityVulnerability
decodeDependabotAlertSecurityVulnerability =
    Json.Decode.succeed
     (\package severity vulnerableVersionRange firstPatchedVersion ->
         { package = package
         , severity = severity
         , vulnerableVersionRange = vulnerableVersionRange
         , firstPatchedVersion = firstPatchedVersion
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "package" decodeDependabotAlertPackage)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "severity" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "vulnerable_version_range" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "first_patched_version"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.succeed
                            (\identifier -> { identifier = identifier })
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "identifier"
                                    Json.Decode.string
                                )
                        )
                    , Json.Decode.null Null
                    ]
                )
            )


encodeDependabotAlertSecurityVulnerability :
    DependabotAlertSecurityVulnerability -> Json.Encode.Value
encodeDependabotAlertSecurityVulnerability rec =
    Json.Encode.object
        [ ( "package", encodeDependabotAlertPackage rec.package )
        , ( "severity", Json.Encode.string rec.severity )
        , ( "vulnerable_version_range"
          , Json.Encode.string rec.vulnerableVersionRange
          )
        , ( "first_patched_version"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        (\rec0 ->
                            Json.Encode.object
                                [ ( "identifier"
                                  , Json.Encode.string rec0.identifier
                                  )
                                ]
                        )
                            value
            )
                rec.firstPatchedVersion
          )
        ]


type alias DependabotAlertSecurityAdvisory =
    { ghsaId : String
    , cveId : Nullable String
    , summary : String
    , description : String
    , vulnerabilities : List DependabotAlertSecurityVulnerability
    , severity : String
    , cvss : { score : Float, vectorString : Nullable String }
    , cwes : List { cweId : String, name : String }
    , identifiers : List { type_ : String, value : String }
    , references : List { url : String }
    , publishedAt : String
    , updatedAt : String
    , withdrawnAt : Nullable String
    }


decodeDependabotAlertSecurityAdvisory :
    Json.Decode.Decoder DependabotAlertSecurityAdvisory
decodeDependabotAlertSecurityAdvisory =
    Json.Decode.succeed
     (\ghsaId cveId summary description vulnerabilities severity cvss cwes identifiers references publishedAt updatedAt withdrawnAt ->
         { ghsaId = ghsaId
         , cveId = cveId
         , summary = summary
         , description = description
         , vulnerabilities = vulnerabilities
         , severity = severity
         , cvss = cvss
         , cwes = cwes
         , identifiers = identifiers
         , references = references
         , publishedAt = publishedAt
         , updatedAt = updatedAt
         , withdrawnAt = withdrawnAt
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ghsa_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "cve_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "summary" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "description" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "vulnerabilities"
                (Json.Decode.list decodeDependabotAlertSecurityVulnerability)
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "severity" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "cvss"
                (Json.Decode.succeed
                  (\score vectorString ->
                      { score = score, vectorString = vectorString }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "score" Json.Decode.float)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "vector_string"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "cwes"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\cweId name -> { cweId = cweId, name = name })
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "cwe_id" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "name" Json.Decode.string)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "identifiers"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\type_ value -> { type_ = type_, value = value })
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "type" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "value" Json.Decode.string)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "references"
                (Json.Decode.list
                    (Json.Decode.succeed (\url -> { url = url })
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "url" Json.Decode.string)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "published_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "withdrawn_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeDependabotAlertSecurityAdvisory :
    DependabotAlertSecurityAdvisory -> Json.Encode.Value
encodeDependabotAlertSecurityAdvisory rec =
    Json.Encode.object
        [ ( "ghsa_id", Json.Encode.string rec.ghsaId )
        , ( "cve_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.cveId
          )
        , ( "summary", Json.Encode.string rec.summary )
        , ( "description", Json.Encode.string rec.description )
        , ( "vulnerabilities"
          , Json.Encode.list encodeDependabotAlertSecurityVulnerability
                rec.vulnerabilities
          )
        , ( "severity", Json.Encode.string rec.severity )
        , ( "cvss"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "score", Json.Encode.float rec0.score )
                    , ( "vector_string"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.vectorString
                      )
                    ]
            )
                rec.cvss
          )
        , ( "cwes"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "cwe_id", Json.Encode.string rec0.cweId )
                        , ( "name", Json.Encode.string rec0.name )
                        ]
                )
                rec.cwes
          )
        , ( "identifiers"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "type", Json.Encode.string rec0.type_ )
                        , ( "value", Json.Encode.string rec0.value )
                        ]
                )
                rec.identifiers
          )
        , ( "references"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "url", Json.Encode.string rec0.url ) ]
                )
                rec.references
          )
        , ( "published_at", Json.Encode.string rec.publishedAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "withdrawn_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.withdrawnAt
          )
        ]


type alias DependabotAlertPackage =
    { ecosystem : String, name : String }


decodeDependabotAlertPackage : Json.Decode.Decoder DependabotAlertPackage
decodeDependabotAlertPackage =
    Json.Decode.succeed
     (\ecosystem name -> { ecosystem = ecosystem, name = name })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ecosystem" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)


encodeDependabotAlertPackage : DependabotAlertPackage -> Json.Encode.Value
encodeDependabotAlertPackage rec =
    Json.Encode.object
        [ ( "ecosystem", Json.Encode.string rec.ecosystem )
        , ( "name", Json.Encode.string rec.name )
        ]


type alias DependabotAlert =
    { number : AlertNumber
    , state : String
    , dependency :
        { package : DependabotAlertPackage
        , manifestPath : String
        , scope : Nullable String
        }
    , securityAdvisory : DependabotAlertSecurityAdvisory
    , securityVulnerability : DependabotAlertSecurityVulnerability
    , url : AlertUrl
    , htmlUrl : AlertHtmlUrl
    , createdAt : AlertCreatedAt
    , updatedAt : AlertUpdatedAt
    , dismissedAt : AlertDismissedAt
    , dismissedBy : Debug.Todo
    , dismissedReason : Nullable String
    , dismissedComment : Nullable String
    , fixedAt : AlertFixedAt
    }


decodeDependabotAlert : Json.Decode.Decoder DependabotAlert
decodeDependabotAlert =
    Json.Decode.succeed
     (\number state dependency securityAdvisory securityVulnerability url htmlUrl createdAt updatedAt dismissedAt dismissedBy dismissedReason dismissedComment fixedAt ->
         { number = number
         , state = state
         , dependency = dependency
         , securityAdvisory = securityAdvisory
         , securityVulnerability = securityVulnerability
         , url = url
         , htmlUrl = htmlUrl
         , createdAt = createdAt
         , updatedAt = updatedAt
         , dismissedAt = dismissedAt
         , dismissedBy = dismissedBy
         , dismissedReason = dismissedReason
         , dismissedComment = dismissedComment
         , fixedAt = fixedAt
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "number" decodeAlertNumber)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dependency"
                (Json.Decode.succeed
                  (\package manifestPath scope ->
                      { package = package
                      , manifestPath = manifestPath
                      , scope = scope
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "package"
                            decodeDependabotAlertPackage
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "manifest_path" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "scope"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "security_advisory"
                decodeDependabotAlertSecurityAdvisory
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "security_vulnerability"
                decodeDependabotAlertSecurityVulnerability
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" decodeAlertUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" decodeAlertHtmlUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" decodeAlertCreatedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" decodeAlertUpdatedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "dismissed_at" decodeAlertDismissedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_by"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_comment"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "fixed_at" decodeAlertFixedAt)


encodeDependabotAlert : DependabotAlert -> Json.Encode.Value
encodeDependabotAlert rec =
    Json.Encode.object
        [ ( "number", encodeAlertNumber rec.number )
        , ( "state", Json.Encode.string rec.state )
        , ( "dependency"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "package", encodeDependabotAlertPackage rec0.package )
                    , ( "manifest_path", Json.Encode.string rec0.manifestPath )
                    , ( "scope"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.scope
                      )
                    ]
            )
                rec.dependency
          )
        , ( "security_advisory"
          , encodeDependabotAlertSecurityAdvisory rec.securityAdvisory
          )
        , ( "security_vulnerability"
          , encodeDependabotAlertSecurityVulnerability rec.securityVulnerability
          )
        , ( "url", encodeAlertUrl rec.url )
        , ( "html_url", encodeAlertHtmlUrl rec.htmlUrl )
        , ( "created_at", encodeAlertCreatedAt rec.createdAt )
        , ( "updated_at", encodeAlertUpdatedAt rec.updatedAt )
        , ( "dismissed_at", encodeAlertDismissedAt rec.dismissedAt )
        , ( "dismissed_by", Debug.todo "decode anyOf" rec.dismissedBy )
        , ( "dismissed_reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.dismissedReason
          )
        , ( "dismissed_comment"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.dismissedComment
          )
        , ( "fixed_at", encodeAlertFixedAt rec.fixedAt )
        ]


type alias DemilestonedIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , milestone : { title : String }
    }


decodeDemilestonedIssueEvent : Json.Decode.Decoder DemilestonedIssueEvent
decodeDemilestonedIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp milestone ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , milestone = milestone
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "milestone"
                (Json.Decode.succeed (\title -> { title = title })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "title" Json.Decode.string)
                )
            )


encodeDemilestonedIssueEvent : DemilestonedIssueEvent -> Json.Encode.Value
encodeDemilestonedIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "milestone"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "title", Json.Encode.string rec0.title ) ]
            )
                rec.milestone
          )
        ]


type alias ConvertedNoteToIssueIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Integration
    , projectCard :
        { id : Int
        , url : String
        , projectId : Int
        , projectUrl : String
        , columnName : String
        , previousColumnName : String
        }
    }


decodeConvertedNoteToIssueIssueEvent :
    Json.Decode.Decoder ConvertedNoteToIssueIssueEvent
decodeConvertedNoteToIssueIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp projectCard ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , projectCard = projectCard
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "performed_via_github_app" decodeIntegration)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "project_card"
                (Json.Decode.succeed
                  (\id url projectId projectUrl columnName previousColumnName ->
                      { id = id
                      , url = url
                      , projectId = projectId
                      , projectUrl = projectUrl
                      , columnName = columnName
                      , previousColumnName = previousColumnName
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "id" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "project_id" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "project_url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "column_name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "previous_column_name"
                            Json.Decode.string
                        )
                )
            )


encodeConvertedNoteToIssueIssueEvent :
    ConvertedNoteToIssueIssueEvent -> Json.Encode.Value
encodeConvertedNoteToIssueIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , encodeIntegration rec.performedViaGithubApp
          )
        , ( "project_card"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "id", Json.Encode.int rec0.id )
                    , ( "url", Json.Encode.string rec0.url )
                    , ( "project_id", Json.Encode.int rec0.projectId )
                    , ( "project_url", Json.Encode.string rec0.projectUrl )
                    , ( "column_name", Json.Encode.string rec0.columnName )
                    , ( "previous_column_name"
                      , Json.Encode.string rec0.previousColumnName
                      )
                    ]
            )
                rec.projectCard
          )
        ]


type alias ContributorActivity =
    { author : Debug.Todo
    , total : Int
    , weeks : List { w : Int, a : Int, d : Int, c : Int }
    }


decodeContributorActivity : Json.Decode.Decoder ContributorActivity
decodeContributorActivity =
    Json.Decode.succeed
     (\author total weeks -> { author = author, total = total, weeks = weeks })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "author"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "total" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "weeks"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\w a d c -> { w = w, a = a, d = d, c = c })
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "w" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "a" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "d" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "c" Json.Decode.int)
                    )
                )
            )


encodeContributorActivity : ContributorActivity -> Json.Encode.Value
encodeContributorActivity rec =
    Json.Encode.object
        [ ( "author", Debug.todo "decode anyOf" rec.author )
        , ( "total", Json.Encode.int rec.total )
        , ( "weeks"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "w", Json.Encode.int rec0.w )
                        , ( "a", Json.Encode.int rec0.a )
                        , ( "d", Json.Encode.int rec0.d )
                        , ( "c", Json.Encode.int rec0.c )
                        ]
                )
                rec.weeks
          )
        ]


type alias Contributor =
    { login : String
    , id : Int
    , nodeId : String
    , avatarUrl : String
    , gravatarId : Nullable String
    , url : String
    , htmlUrl : String
    , followersUrl : String
    , followingUrl : String
    , gistsUrl : String
    , starredUrl : String
    , subscriptionsUrl : String
    , organizationsUrl : String
    , reposUrl : String
    , eventsUrl : String
    , receivedEventsUrl : String
    , type_ : String
    , siteAdmin : Bool
    , contributions : Int
    , email : String
    , name : String
    }


decodeContributor : Json.Decode.Decoder Contributor
decodeContributor =
    Json.Decode.succeed
     (\login id nodeId avatarUrl gravatarId url htmlUrl followersUrl followingUrl gistsUrl starredUrl subscriptionsUrl organizationsUrl reposUrl eventsUrl receivedEventsUrl type_ siteAdmin contributions email name ->
         { login = login
         , id = id
         , nodeId = nodeId
         , avatarUrl = avatarUrl
         , gravatarId = gravatarId
         , url = url
         , htmlUrl = htmlUrl
         , followersUrl = followersUrl
         , followingUrl = followingUrl
         , gistsUrl = gistsUrl
         , starredUrl = starredUrl
         , subscriptionsUrl = subscriptionsUrl
         , organizationsUrl = organizationsUrl
         , reposUrl = reposUrl
         , eventsUrl = eventsUrl
         , receivedEventsUrl = receivedEventsUrl
         , type_ = type_
         , siteAdmin = siteAdmin
         , contributions = contributions
         , email = email
         , name = name
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "login" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "avatar_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "gravatar_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "followers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "following_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "gists_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "starred_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscriptions_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organizations_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repos_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "received_events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "site_admin" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contributions" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "email" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)


encodeContributor : Contributor -> Json.Encode.Value
encodeContributor rec =
    Json.Encode.object
        [ ( "login", Json.Encode.string rec.login )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "avatar_url", Json.Encode.string rec.avatarUrl )
        , ( "gravatar_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.gravatarId
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "followers_url", Json.Encode.string rec.followersUrl )
        , ( "following_url", Json.Encode.string rec.followingUrl )
        , ( "gists_url", Json.Encode.string rec.gistsUrl )
        , ( "starred_url", Json.Encode.string rec.starredUrl )
        , ( "subscriptions_url", Json.Encode.string rec.subscriptionsUrl )
        , ( "organizations_url", Json.Encode.string rec.organizationsUrl )
        , ( "repos_url", Json.Encode.string rec.reposUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "received_events_url", Json.Encode.string rec.receivedEventsUrl )
        , ( "type", Json.Encode.string rec.type_ )
        , ( "site_admin", Json.Encode.bool rec.siteAdmin )
        , ( "contributions", Json.Encode.int rec.contributions )
        , ( "email", Json.Encode.string rec.email )
        , ( "name", Json.Encode.string rec.name )
        ]


type alias ContentTree =
    { type_ : String
    , size : Int
    , name : String
    , path : String
    , sha : String
    , url : String
    , gitUrl : Nullable String
    , htmlUrl : Nullable String
    , downloadUrl : Nullable String
    , entries :
        List { type_ : String
        , size : Int
        , name : String
        , path : String
        , content : String
        , sha : String
        , url : String
        , gitUrl : Nullable String
        , htmlUrl : Nullable String
        , downloadUrl : Nullable String
        , links :
            { git : Nullable String, html : Nullable String, self : String }
        }
    , links : { git : Nullable String, html : Nullable String, self : String }
    }


decodeContentTree : Json.Decode.Decoder ContentTree
decodeContentTree =
    Json.Decode.succeed
     (\type_ size name path sha url gitUrl htmlUrl downloadUrl entries links ->
         { type_ = type_
         , size = size
         , name = name
         , path = path
         , sha = sha
         , url = url
         , gitUrl = gitUrl
         , htmlUrl = htmlUrl
         , downloadUrl = downloadUrl
         , entries = entries
         , links = links
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "size" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "git_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "html_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "download_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "entries"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\type_ size name path content sha url gitUrl htmlUrl downloadUrl links ->
                          { type_ = type_
                          , size = size
                          , name = name
                          , path = path
                          , content = content
                          , sha = sha
                          , url = url
                          , gitUrl = gitUrl
                          , htmlUrl = htmlUrl
                          , downloadUrl = downloadUrl
                          , links = links
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "type" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "size" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "name" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "path" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "content" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "sha" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "git_url"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "html_url"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "download_url"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "_links"
                                (Json.Decode.succeed
                                  (\git html self ->
                                      { git = git, html = html, self = self }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "git"
                                            (Json.Decode.oneOf
                                                [ Json.Decode.map
                                                    Present
                                                    Json.Decode.string
                                                , Json.Decode.null Null
                                                ]
                                            )
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "html"
                                            (Json.Decode.oneOf
                                                [ Json.Decode.map
                                                    Present
                                                    Json.Decode.string
                                                , Json.Decode.null Null
                                                ]
                                            )
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "self"
                                            Json.Decode.string
                                        )
                                )
                            )
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "_links"
                (Json.Decode.succeed
                  (\git html self -> { git = git, html = html, self = self })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "git"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "html"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "self" Json.Decode.string)
                )
            )


encodeContentTree : ContentTree -> Json.Encode.Value
encodeContentTree rec =
    Json.Encode.object
        [ ( "type", Json.Encode.string rec.type_ )
        , ( "size", Json.Encode.int rec.size )
        , ( "name", Json.Encode.string rec.name )
        , ( "path", Json.Encode.string rec.path )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "url", Json.Encode.string rec.url )
        , ( "git_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.gitUrl
          )
        , ( "html_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.htmlUrl
          )
        , ( "download_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.downloadUrl
          )
        , ( "entries"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "type", Json.Encode.string rec0.type_ )
                        , ( "size", Json.Encode.int rec0.size )
                        , ( "name", Json.Encode.string rec0.name )
                        , ( "path", Json.Encode.string rec0.path )
                        , ( "content", Json.Encode.string rec0.content )
                        , ( "sha", Json.Encode.string rec0.sha )
                        , ( "url", Json.Encode.string rec0.url )
                        , ( "git_url"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.string value
                            )
                                rec0.gitUrl
                          )
                        , ( "html_url"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.string value
                            )
                                rec0.htmlUrl
                          )
                        , ( "download_url"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.string value
                            )
                                rec0.downloadUrl
                          )
                        , ( "_links"
                          , (\rec_0_11_1_1_1_0_10_1_0_0 ->
                                Json.Encode.object
                                    [ ( "git"
                                      , (\nullableValue ->
                                            case nullableValue of
                                                Null ->
                                                    Json.Encode.null

                                                Present value ->
                                                    Json.Encode.string value
                                        )
                                            rec_0_11_1_1_1_0_10_1_0_0.git
                                      )
                                    , ( "html"
                                      , (\nullableValue ->
                                            case nullableValue of
                                                Null ->
                                                    Json.Encode.null

                                                Present value ->
                                                    Json.Encode.string value
                                        )
                                            rec_0_11_1_1_1_0_10_1_0_0.html
                                      )
                                    , ( "self"
                                      , Json.Encode.string
                                            rec_0_11_1_1_1_0_10_1_0_0.self
                                      )
                                    ]
                            )
                                rec0.links
                          )
                        ]
                )
                rec.entries
          )
        , ( "_links"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "git"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.git
                      )
                    , ( "html"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.html
                      )
                    , ( "self", Json.Encode.string rec0.self )
                    ]
            )
                rec.links
          )
        ]


type alias ContentTraffic =
    { path : String, title : String, count : Int, uniques : Int }


decodeContentTraffic : Json.Decode.Decoder ContentTraffic
decodeContentTraffic =
    Json.Decode.succeed
     (\path title count uniques ->
         { path = path, title = title, count = count, uniques = uniques }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "title" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "uniques" Json.Decode.int)


encodeContentTraffic : ContentTraffic -> Json.Encode.Value
encodeContentTraffic rec =
    Json.Encode.object
        [ ( "path", Json.Encode.string rec.path )
        , ( "title", Json.Encode.string rec.title )
        , ( "count", Json.Encode.int rec.count )
        , ( "uniques", Json.Encode.int rec.uniques )
        ]


type alias ContentSymlink =
    { type_ : String
    , target : String
    , size : Int
    , name : String
    , path : String
    , sha : String
    , url : String
    , gitUrl : Nullable String
    , htmlUrl : Nullable String
    , downloadUrl : Nullable String
    , links : { git : Nullable String, html : Nullable String, self : String }
    }


decodeContentSymlink : Json.Decode.Decoder ContentSymlink
decodeContentSymlink =
    Json.Decode.succeed
     (\type_ target size name path sha url gitUrl htmlUrl downloadUrl links ->
         { type_ = type_
         , target = target
         , size = size
         , name = name
         , path = path
         , sha = sha
         , url = url
         , gitUrl = gitUrl
         , htmlUrl = htmlUrl
         , downloadUrl = downloadUrl
         , links = links
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "target" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "size" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "git_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "html_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "download_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "_links"
                (Json.Decode.succeed
                  (\git html self -> { git = git, html = html, self = self })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "git"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "html"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "self" Json.Decode.string)
                )
            )


encodeContentSymlink : ContentSymlink -> Json.Encode.Value
encodeContentSymlink rec =
    Json.Encode.object
        [ ( "type", Json.Encode.string rec.type_ )
        , ( "target", Json.Encode.string rec.target )
        , ( "size", Json.Encode.int rec.size )
        , ( "name", Json.Encode.string rec.name )
        , ( "path", Json.Encode.string rec.path )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "url", Json.Encode.string rec.url )
        , ( "git_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.gitUrl
          )
        , ( "html_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.htmlUrl
          )
        , ( "download_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.downloadUrl
          )
        , ( "_links"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "git"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.git
                      )
                    , ( "html"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.html
                      )
                    , ( "self", Json.Encode.string rec0.self )
                    ]
            )
                rec.links
          )
        ]


type alias ContentSubmodule =
    { type_ : String
    , submoduleGitUrl : String
    , size : Int
    , name : String
    , path : String
    , sha : String
    , url : String
    , gitUrl : Nullable String
    , htmlUrl : Nullable String
    , downloadUrl : Nullable String
    , links : { git : Nullable String, html : Nullable String, self : String }
    }


decodeContentSubmodule : Json.Decode.Decoder ContentSubmodule
decodeContentSubmodule =
    Json.Decode.succeed
     (\type_ submoduleGitUrl size name path sha url gitUrl htmlUrl downloadUrl links ->
         { type_ = type_
         , submoduleGitUrl = submoduleGitUrl
         , size = size
         , name = name
         , path = path
         , sha = sha
         , url = url
         , gitUrl = gitUrl
         , htmlUrl = htmlUrl
         , downloadUrl = downloadUrl
         , links = links
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "submodule_git_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "size" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "git_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "html_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "download_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "_links"
                (Json.Decode.succeed
                  (\git html self -> { git = git, html = html, self = self })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "git"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "html"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "self" Json.Decode.string)
                )
            )


encodeContentSubmodule : ContentSubmodule -> Json.Encode.Value
encodeContentSubmodule rec =
    Json.Encode.object
        [ ( "type", Json.Encode.string rec.type_ )
        , ( "submodule_git_url", Json.Encode.string rec.submoduleGitUrl )
        , ( "size", Json.Encode.int rec.size )
        , ( "name", Json.Encode.string rec.name )
        , ( "path", Json.Encode.string rec.path )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "url", Json.Encode.string rec.url )
        , ( "git_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.gitUrl
          )
        , ( "html_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.htmlUrl
          )
        , ( "download_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.downloadUrl
          )
        , ( "_links"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "git"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.git
                      )
                    , ( "html"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.html
                      )
                    , ( "self", Json.Encode.string rec0.self )
                    ]
            )
                rec.links
          )
        ]


type alias ContentFile =
    { type_ : String
    , encoding : String
    , size : Int
    , name : String
    , path : String
    , content : String
    , sha : String
    , url : String
    , gitUrl : Nullable String
    , htmlUrl : Nullable String
    , downloadUrl : Nullable String
    , links : { git : Nullable String, html : Nullable String, self : String }
    , target : String
    , submoduleGitUrl : String
    }


decodeContentFile : Json.Decode.Decoder ContentFile
decodeContentFile =
    Json.Decode.succeed
     (\type_ encoding size name path content sha url gitUrl htmlUrl downloadUrl links target submoduleGitUrl ->
         { type_ = type_
         , encoding = encoding
         , size = size
         , name = name
         , path = path
         , content = content
         , sha = sha
         , url = url
         , gitUrl = gitUrl
         , htmlUrl = htmlUrl
         , downloadUrl = downloadUrl
         , links = links
         , target = target
         , submoduleGitUrl = submoduleGitUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "encoding" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "size" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "content" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "git_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "html_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "download_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "_links"
                (Json.Decode.succeed
                  (\git html self -> { git = git, html = html, self = self })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "git"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "html"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "self" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "target" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "submodule_git_url" Json.Decode.string)


encodeContentFile : ContentFile -> Json.Encode.Value
encodeContentFile rec =
    Json.Encode.object
        [ ( "type", Json.Encode.string rec.type_ )
        , ( "encoding", Json.Encode.string rec.encoding )
        , ( "size", Json.Encode.int rec.size )
        , ( "name", Json.Encode.string rec.name )
        , ( "path", Json.Encode.string rec.path )
        , ( "content", Json.Encode.string rec.content )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "url", Json.Encode.string rec.url )
        , ( "git_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.gitUrl
          )
        , ( "html_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.htmlUrl
          )
        , ( "download_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.downloadUrl
          )
        , ( "_links"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "git"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.git
                      )
                    , ( "html"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.html
                      )
                    , ( "self", Json.Encode.string rec0.self )
                    ]
            )
                rec.links
          )
        , ( "target", Json.Encode.string rec.target )
        , ( "submodule_git_url", Json.Encode.string rec.submoduleGitUrl )
        ]


type alias ContentDirectory =
    List { type_ : String
    , size : Int
    , name : String
    , path : String
    , content : String
    , sha : String
    , url : String
    , gitUrl : Nullable String
    , htmlUrl : Nullable String
    , downloadUrl : Nullable String
    , links : { git : Nullable String, html : Nullable String, self : String }
    }


decodeContentDirectory : Json.Decode.Decoder ContentDirectory
decodeContentDirectory =
    Json.Decode.list
        (Json.Decode.succeed
          (\type_ size name path content sha url gitUrl htmlUrl downloadUrl links ->
              { type_ = type_
              , size = size
              , name = name
              , path = path
              , content = content
              , sha = sha
              , url = url
              , gitUrl = gitUrl
              , htmlUrl = htmlUrl
              , downloadUrl = downloadUrl
              , links = links
              }
          )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "type" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "size" Json.Decode.int)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "name" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "path" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "content" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "sha" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field "url" Json.Decode.string)
            |> Json.Decode.Extra.andMap
                (Json.Decode.field
                    "git_url"
                    (Json.Decode.oneOf
                        [ Json.Decode.map Present Json.Decode.string
                        , Json.Decode.null Null
                        ]
                    )
                )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field
                    "html_url"
                    (Json.Decode.oneOf
                        [ Json.Decode.map Present Json.Decode.string
                        , Json.Decode.null Null
                        ]
                    )
                )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field
                    "download_url"
                    (Json.Decode.oneOf
                        [ Json.Decode.map Present Json.Decode.string
                        , Json.Decode.null Null
                        ]
                    )
                )
            |> Json.Decode.Extra.andMap
                (Json.Decode.field
                    "_links"
                    (Json.Decode.succeed
                      (\git html self -> { git = git, html = html, self = self }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "git"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "html"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "self" Json.Decode.string)
                    )
                )
        )


encodeContentDirectory : ContentDirectory -> Json.Encode.Value
encodeContentDirectory =
    Json.Encode.list
        (\rec ->
            Json.Encode.object
                [ ( "type", Json.Encode.string rec.type_ )
                , ( "size", Json.Encode.int rec.size )
                , ( "name", Json.Encode.string rec.name )
                , ( "path", Json.Encode.string rec.path )
                , ( "content", Json.Encode.string rec.content )
                , ( "sha", Json.Encode.string rec.sha )
                , ( "url", Json.Encode.string rec.url )
                , ( "git_url"
                  , (\nullableValue ->
                        case nullableValue of
                            Null ->
                                Json.Encode.null

                            Present value ->
                                Json.Encode.string value
                    )
                        rec.gitUrl
                  )
                , ( "html_url"
                  , (\nullableValue ->
                        case nullableValue of
                            Null ->
                                Json.Encode.null

                            Present value ->
                                Json.Encode.string value
                    )
                        rec.htmlUrl
                  )
                , ( "download_url"
                  , (\nullableValue ->
                        case nullableValue of
                            Null ->
                                Json.Encode.null

                            Present value ->
                                Json.Encode.string value
                    )
                        rec.downloadUrl
                  )
                , ( "_links"
                  , (\rec0 ->
                        Json.Encode.object
                            [ ( "git"
                              , (\nullableValue ->
                                    case nullableValue of
                                        Null ->
                                            Json.Encode.null

                                        Present value ->
                                            Json.Encode.string value
                                )
                                    rec0.git
                              )
                            , ( "html"
                              , (\nullableValue ->
                                    case nullableValue of
                                        Null ->
                                            Json.Encode.null

                                        Present value ->
                                            Json.Encode.string value
                                )
                                    rec0.html
                              )
                            , ( "self", Json.Encode.string rec0.self )
                            ]
                    )
                        rec.links
                  )
                ]
        )


type alias CommunityProfile =
    { healthPercentage : Int
    , description : Nullable String
    , documentation : Nullable String
    , files :
        { codeOfConduct : Debug.Todo
        , codeOfConductFile : Debug.Todo
        , license : Debug.Todo
        , contributing : Debug.Todo
        , readme : Debug.Todo
        , issueTemplate : Debug.Todo
        , pullRequestTemplate : Debug.Todo
        }
    , updatedAt : Nullable String
    , contentReportsEnabled : Bool
    }


decodeCommunityProfile : Json.Decode.Decoder CommunityProfile
decodeCommunityProfile =
    Json.Decode.succeed
     (\healthPercentage description documentation files updatedAt contentReportsEnabled ->
         { healthPercentage = healthPercentage
         , description = description
         , documentation = documentation
         , files = files
         , updatedAt = updatedAt
         , contentReportsEnabled = contentReportsEnabled
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "health_percentage" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "documentation"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "files"
                (Json.Decode.succeed
                  (\codeOfConduct codeOfConductFile license contributing readme issueTemplate pullRequestTemplate ->
                      { codeOfConduct = codeOfConduct
                      , codeOfConductFile = codeOfConductFile
                      , license = license
                      , contributing = contributing
                      , readme = readme
                      , issueTemplate = issueTemplate
                      , pullRequestTemplate = pullRequestTemplate
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "code_of_conduct"
                            (Json.Decode.oneOf
                                [ Json.Decode.map
                                    Present
                                    decodeCodeOfConductSimple
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "code_of_conduct_file"
                            (Json.Decode.oneOf
                                [ Json.Decode.map
                                    Present
                                    decodeCommunityHealthFile
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "license"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present decodeLicenseSimple
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "contributing"
                            (Json.Decode.oneOf
                                [ Json.Decode.map
                                    Present
                                    decodeCommunityHealthFile
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "readme"
                            (Json.Decode.oneOf
                                [ Json.Decode.map
                                    Present
                                    decodeCommunityHealthFile
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "issue_template"
                            (Json.Decode.oneOf
                                [ Json.Decode.map
                                    Present
                                    decodeCommunityHealthFile
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "pull_request_template"
                            (Json.Decode.oneOf
                                [ Json.Decode.map
                                    Present
                                    decodeCommunityHealthFile
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "updated_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "content_reports_enabled" Json.Decode.bool)


encodeCommunityProfile : CommunityProfile -> Json.Encode.Value
encodeCommunityProfile rec =
    Json.Encode.object
        [ ( "health_percentage", Json.Encode.int rec.healthPercentage )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "documentation"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.documentation
          )
        , ( "files"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "code_of_conduct"
                      , Debug.todo "decode anyOf" rec0.codeOfConduct
                      )
                    , ( "code_of_conduct_file"
                      , Debug.todo "decode anyOf" rec0.codeOfConductFile
                      )
                    , ( "license", Debug.todo "decode anyOf" rec0.license )
                    , ( "contributing"
                      , Debug.todo "decode anyOf" rec0.contributing
                      )
                    , ( "readme", Debug.todo "decode anyOf" rec0.readme )
                    , ( "issue_template"
                      , Debug.todo "decode anyOf" rec0.issueTemplate
                      )
                    , ( "pull_request_template"
                      , Debug.todo "decode anyOf" rec0.pullRequestTemplate
                      )
                    ]
            )
                rec.files
          )
        , ( "updated_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.updatedAt
          )
        , ( "content_reports_enabled"
          , Json.Encode.bool rec.contentReportsEnabled
          )
        ]


type alias CommunityHealthFile =
    { url : String, htmlUrl : String }


decodeCommunityHealthFile : Json.Decode.Decoder CommunityHealthFile
decodeCommunityHealthFile =
    Json.Decode.succeed (\url htmlUrl -> { url = url, htmlUrl = htmlUrl })
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)


encodeCommunityHealthFile : CommunityHealthFile -> Json.Encode.Value
encodeCommunityHealthFile rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        ]


type alias CommitSearchResultItem =
    { url : String
    , sha : String
    , htmlUrl : String
    , commentsUrl : String
    , commit :
        { author : { name : String, email : String, date : String }
        , committer : Debug.Todo
        , commentCount : Int
        , message : String
        , tree : { sha : String, url : String }
        , url : String
        , verification : Verification
        }
    , author : Debug.Todo
    , committer : Debug.Todo
    , parents : List { url : String, htmlUrl : String, sha : String }
    , repository : MinimalRepository
    , score : Float
    , nodeId : String
    , textMatches : SearchResultTextMatches
    }


decodeCommitSearchResultItem : Json.Decode.Decoder CommitSearchResultItem
decodeCommitSearchResultItem =
    Json.Decode.succeed
     (\url sha htmlUrl commentsUrl commit author committer parents repository score nodeId textMatches ->
         { url = url
         , sha = sha
         , htmlUrl = htmlUrl
         , commentsUrl = commentsUrl
         , commit = commit
         , author = author
         , committer = committer
         , parents = parents
         , repository = repository
         , score = score
         , nodeId = nodeId
         , textMatches = textMatches
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit"
                (Json.Decode.succeed
                  (\author committer commentCount message tree url verification ->
                      { author = author
                      , committer = committer
                      , commentCount = commentCount
                      , message = message
                      , tree = tree
                      , url = url
                      , verification = verification
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "author"
                            (Json.Decode.succeed
                              (\name email date ->
                                  { name = name, email = email, date = date }
                              )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "name" Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field
                                        "email"
                                        Json.Decode.string
                                    )
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "date" Json.Decode.string
                                    )
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "committer"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present decodeGitUser
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "comment_count" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "message" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "tree"
                            (Json.Decode.succeed
                              (\sha url -> { sha = sha, url = url })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "sha" Json.Decode.string)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "url" Json.Decode.string)
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "verification" decodeVerification)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "author"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "committer"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeGitUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "parents"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\url htmlUrl sha ->
                          { url = url, htmlUrl = htmlUrl, sha = sha }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "html_url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "sha" Json.Decode.string)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeMinimalRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "score" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "text_matches" decodeSearchResultTextMatches)


encodeCommitSearchResultItem : CommitSearchResultItem -> Json.Encode.Value
encodeCommitSearchResultItem rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "commit"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "author"
                      , (\rec_0_1_1_1_0_5_1_0_0 ->
                            Json.Encode.object
                                [ ( "name"
                                  , Json.Encode.string
                                        rec_0_1_1_1_0_5_1_0_0.name
                                  )
                                , ( "email"
                                  , Json.Encode.string
                                        rec_0_1_1_1_0_5_1_0_0.email
                                  )
                                , ( "date"
                                  , Json.Encode.string
                                        rec_0_1_1_1_0_5_1_0_0.date
                                  )
                                ]
                        )
                            rec0.author
                      )
                    , ( "committer", Debug.todo "decode anyOf" rec0.committer )
                    , ( "comment_count", Json.Encode.int rec0.commentCount )
                    , ( "message", Json.Encode.string rec0.message )
                    , ( "tree"
                      , (\rec_0_5_1_1_0_5_1_0_0 ->
                            Json.Encode.object
                                [ ( "sha"
                                  , Json.Encode.string rec_0_5_1_1_0_5_1_0_0.sha
                                  )
                                , ( "url"
                                  , Json.Encode.string rec_0_5_1_1_0_5_1_0_0.url
                                  )
                                ]
                        )
                            rec0.tree
                      )
                    , ( "url", Json.Encode.string rec0.url )
                    , ( "verification", encodeVerification rec0.verification )
                    ]
            )
                rec.commit
          )
        , ( "author", Debug.todo "decode anyOf" rec.author )
        , ( "committer", Debug.todo "decode anyOf" rec.committer )
        , ( "parents"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "url", Json.Encode.string rec0.url )
                        , ( "html_url", Json.Encode.string rec0.htmlUrl )
                        , ( "sha", Json.Encode.string rec0.sha )
                        ]
                )
                rec.parents
          )
        , ( "repository", encodeMinimalRepository rec.repository )
        , ( "score", Json.Encode.float rec.score )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "text_matches", encodeSearchResultTextMatches rec.textMatches )
        ]


type alias CommitComparison =
    { url : String
    , htmlUrl : String
    , permalinkUrl : String
    , diffUrl : String
    , patchUrl : String
    , baseCommit : Commit
    , mergeBaseCommit : Commit
    , status : String
    , aheadBy : Int
    , behindBy : Int
    , totalCommits : Int
    , commits : List Commit
    , files : List DiffEntry
    }


decodeCommitComparison : Json.Decode.Decoder CommitComparison
decodeCommitComparison =
    Json.Decode.succeed
     (\url htmlUrl permalinkUrl diffUrl patchUrl baseCommit mergeBaseCommit status aheadBy behindBy totalCommits commits files ->
         { url = url
         , htmlUrl = htmlUrl
         , permalinkUrl = permalinkUrl
         , diffUrl = diffUrl
         , patchUrl = patchUrl
         , baseCommit = baseCommit
         , mergeBaseCommit = mergeBaseCommit
         , status = status
         , aheadBy = aheadBy
         , behindBy = behindBy
         , totalCommits = totalCommits
         , commits = commits
         , files = files
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "permalink_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "diff_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "patch_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "base_commit" decodeCommit)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "merge_base_commit" decodeCommit)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ahead_by" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "behind_by" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "total_commits" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commits" (Json.Decode.list decodeCommit))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "files" (Json.Decode.list decodeDiffEntry))


encodeCommitComparison : CommitComparison -> Json.Encode.Value
encodeCommitComparison rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "permalink_url", Json.Encode.string rec.permalinkUrl )
        , ( "diff_url", Json.Encode.string rec.diffUrl )
        , ( "patch_url", Json.Encode.string rec.patchUrl )
        , ( "base_commit", encodeCommit rec.baseCommit )
        , ( "merge_base_commit", encodeCommit rec.mergeBaseCommit )
        , ( "status", Json.Encode.string rec.status )
        , ( "ahead_by", Json.Encode.int rec.aheadBy )
        , ( "behind_by", Json.Encode.int rec.behindBy )
        , ( "total_commits", Json.Encode.int rec.totalCommits )
        , ( "commits", Json.Encode.list encodeCommit rec.commits )
        , ( "files", Json.Encode.list encodeDiffEntry rec.files )
        ]


type alias CommitComment =
    { htmlUrl : String
    , url : String
    , id : Int
    , nodeId : String
    , body : String
    , path : Nullable String
    , position : Nullable Int
    , line : Nullable Int
    , commitId : String
    , user : Debug.Todo
    , createdAt : String
    , updatedAt : String
    , authorAssociation : AuthorAssociation
    , reactions : ReactionRollup
    }


decodeCommitComment : Json.Decode.Decoder CommitComment
decodeCommitComment =
    Json.Decode.succeed
     (\htmlUrl url id nodeId body path position line commitId user createdAt updatedAt authorAssociation reactions ->
         { htmlUrl = htmlUrl
         , url = url
         , id = id
         , nodeId = nodeId
         , body = body
         , path = path
         , position = position
         , line = line
         , commitId = commitId
         , user = user
         , createdAt = createdAt
         , updatedAt = updatedAt
         , authorAssociation = authorAssociation
         , reactions = reactions
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "path"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "position"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "line"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commit_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "author_association" decodeAuthorAssociation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "reactions" decodeReactionRollup)


encodeCommitComment : CommitComment -> Json.Encode.Value
encodeCommitComment rec =
    Json.Encode.object
        [ ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "url", Json.Encode.string rec.url )
        , ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "body", Json.Encode.string rec.body )
        , ( "path"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.path
          )
        , ( "position"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.position
          )
        , ( "line"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.line
          )
        , ( "commit_id", Json.Encode.string rec.commitId )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "author_association"
          , encodeAuthorAssociation rec.authorAssociation
          )
        , ( "reactions", encodeReactionRollup rec.reactions )
        ]


type alias CommitActivity =
    { days : List Int, total : Int, week : Int }


decodeCommitActivity : Json.Decode.Decoder CommitActivity
decodeCommitActivity =
    Json.Decode.succeed
     (\days total week -> { days = days, total = total, week = week })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "days" (Json.Decode.list Json.Decode.int))
        |> Json.Decode.Extra.andMap (Json.Decode.field "total" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "week" Json.Decode.int)


encodeCommitActivity : CommitActivity -> Json.Encode.Value
encodeCommitActivity rec =
    Json.Encode.object
        [ ( "days", Json.Encode.list Json.Encode.int rec.days )
        , ( "total", Json.Encode.int rec.total )
        , ( "week", Json.Encode.int rec.week )
        ]


type alias Commit =
    { url : String
    , sha : String
    , nodeId : String
    , htmlUrl : String
    , commentsUrl : String
    , commit :
        { url : String
        , author : Debug.Todo
        , committer : Debug.Todo
        , message : String
        , commentCount : Int
        , tree : { sha : String, url : String }
        , verification : Verification
        }
    , author : Debug.Todo
    , committer : Debug.Todo
    , parents : List { sha : String, url : String, htmlUrl : String }
    , stats : { additions : Int, deletions : Int, total : Int }
    , files : List DiffEntry
    }


decodeCommit : Json.Decode.Decoder Commit
decodeCommit =
    Json.Decode.succeed
     (\url sha nodeId htmlUrl commentsUrl commit author committer parents stats files ->
         { url = url
         , sha = sha
         , nodeId = nodeId
         , htmlUrl = htmlUrl
         , commentsUrl = commentsUrl
         , commit = commit
         , author = author
         , committer = committer
         , parents = parents
         , stats = stats
         , files = files
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit"
                (Json.Decode.succeed
                  (\url author committer message commentCount tree verification ->
                      { url = url
                      , author = author
                      , committer = committer
                      , message = message
                      , commentCount = commentCount
                      , tree = tree
                      , verification = verification
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "author"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present decodeGitUser
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "committer"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present decodeGitUser
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "message" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "comment_count" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "tree"
                            (Json.Decode.succeed
                              (\sha url -> { sha = sha, url = url })
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "sha" Json.Decode.string)
                                |> Json.Decode.Extra.andMap
                                    (Json.Decode.field "url" Json.Decode.string)
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "verification" decodeVerification)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "author"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "committer"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "parents"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\sha url htmlUrl ->
                          { sha = sha, url = url, htmlUrl = htmlUrl }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "sha" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "html_url" Json.Decode.string)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "stats"
                (Json.Decode.succeed
                  (\additions deletions total ->
                      { additions = additions
                      , deletions = deletions
                      , total = total
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "additions" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "deletions" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "total" Json.Decode.int)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "files" (Json.Decode.list decodeDiffEntry))


encodeCommit : Commit -> Json.Encode.Value
encodeCommit rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "commit"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "url", Json.Encode.string rec0.url )
                    , ( "author", Debug.todo "decode anyOf" rec0.author )
                    , ( "committer", Debug.todo "decode anyOf" rec0.committer )
                    , ( "message", Json.Encode.string rec0.message )
                    , ( "comment_count", Json.Encode.int rec0.commentCount )
                    , ( "tree"
                      , (\rec_0_6_1_1_0_6_1_0_0 ->
                            Json.Encode.object
                                [ ( "sha"
                                  , Json.Encode.string rec_0_6_1_1_0_6_1_0_0.sha
                                  )
                                , ( "url"
                                  , Json.Encode.string rec_0_6_1_1_0_6_1_0_0.url
                                  )
                                ]
                        )
                            rec0.tree
                      )
                    , ( "verification", encodeVerification rec0.verification )
                    ]
            )
                rec.commit
          )
        , ( "author", Debug.todo "decode anyOf" rec.author )
        , ( "committer", Debug.todo "decode anyOf" rec.committer )
        , ( "parents"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "sha", Json.Encode.string rec0.sha )
                        , ( "url", Json.Encode.string rec0.url )
                        , ( "html_url", Json.Encode.string rec0.htmlUrl )
                        ]
                )
                rec.parents
          )
        , ( "stats"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "additions", Json.Encode.int rec0.additions )
                    , ( "deletions", Json.Encode.int rec0.deletions )
                    , ( "total", Json.Encode.int rec0.total )
                    ]
            )
                rec.stats
          )
        , ( "files", Json.Encode.list encodeDiffEntry rec.files )
        ]


type alias CombinedCommitStatus =
    { state : String
    , statuses : List SimpleCommitStatus
    , sha : String
    , totalCount : Int
    , repository : MinimalRepository
    , commitUrl : String
    , url : String
    }


decodeCombinedCommitStatus : Json.Decode.Decoder CombinedCommitStatus
decodeCombinedCommitStatus =
    Json.Decode.succeed
     (\state statuses sha totalCount repository commitUrl url ->
         { state = state
         , statuses = statuses
         , sha = sha
         , totalCount = totalCount
         , repository = repository
         , commitUrl = commitUrl
         , url = url
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "statuses"
                (Json.Decode.list decodeSimpleCommitStatus)
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "total_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeMinimalRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commit_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)


encodeCombinedCommitStatus : CombinedCommitStatus -> Json.Encode.Value
encodeCombinedCommitStatus rec =
    Json.Encode.object
        [ ( "state", Json.Encode.string rec.state )
        , ( "statuses", Json.Encode.list encodeSimpleCommitStatus rec.statuses )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "total_count", Json.Encode.int rec.totalCount )
        , ( "repository", encodeMinimalRepository rec.repository )
        , ( "commit_url", Json.Encode.string rec.commitUrl )
        , ( "url", Json.Encode.string rec.url )
        ]


type alias CombinedBillingUsage =
    { daysLeftInBillingCycle : Int
    , estimatedPaidStorageForMonth : Int
    , estimatedStorageForMonth : Int
    }


decodeCombinedBillingUsage : Json.Decode.Decoder CombinedBillingUsage
decodeCombinedBillingUsage =
    Json.Decode.succeed
     (\daysLeftInBillingCycle estimatedPaidStorageForMonth estimatedStorageForMonth ->
         { daysLeftInBillingCycle = daysLeftInBillingCycle
         , estimatedPaidStorageForMonth = estimatedPaidStorageForMonth
         , estimatedStorageForMonth = estimatedStorageForMonth
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "days_left_in_billing_cycle" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "estimated_paid_storage_for_month"
                Json.Decode.int
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "estimated_storage_for_month" Json.Decode.int)


encodeCombinedBillingUsage : CombinedBillingUsage -> Json.Encode.Value
encodeCombinedBillingUsage rec =
    Json.Encode.object
        [ ( "days_left_in_billing_cycle"
          , Json.Encode.int rec.daysLeftInBillingCycle
          )
        , ( "estimated_paid_storage_for_month"
          , Json.Encode.int rec.estimatedPaidStorageForMonth
          )
        , ( "estimated_storage_for_month"
          , Json.Encode.int rec.estimatedStorageForMonth
          )
        ]


type alias Collaborator =
    { login : String
    , id : Int
    , email : Nullable String
    , name : Nullable String
    , nodeId : String
    , avatarUrl : String
    , gravatarId : Nullable String
    , url : String
    , htmlUrl : String
    , followersUrl : String
    , followingUrl : String
    , gistsUrl : String
    , starredUrl : String
    , subscriptionsUrl : String
    , organizationsUrl : String
    , reposUrl : String
    , eventsUrl : String
    , receivedEventsUrl : String
    , type_ : String
    , siteAdmin : Bool
    , permissions :
        { pull : Bool
        , triage : Bool
        , push : Bool
        , maintain : Bool
        , admin : Bool
        }
    , roleName : String
    }


decodeCollaborator : Json.Decode.Decoder Collaborator
decodeCollaborator =
    Json.Decode.succeed
     (\login id email name nodeId avatarUrl gravatarId url htmlUrl followersUrl followingUrl gistsUrl starredUrl subscriptionsUrl organizationsUrl reposUrl eventsUrl receivedEventsUrl type_ siteAdmin permissions roleName ->
         { login = login
         , id = id
         , email = email
         , name = name
         , nodeId = nodeId
         , avatarUrl = avatarUrl
         , gravatarId = gravatarId
         , url = url
         , htmlUrl = htmlUrl
         , followersUrl = followersUrl
         , followingUrl = followingUrl
         , gistsUrl = gistsUrl
         , starredUrl = starredUrl
         , subscriptionsUrl = subscriptionsUrl
         , organizationsUrl = organizationsUrl
         , reposUrl = reposUrl
         , eventsUrl = eventsUrl
         , receivedEventsUrl = receivedEventsUrl
         , type_ = type_
         , siteAdmin = siteAdmin
         , permissions = permissions
         , roleName = roleName
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "login" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "email"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "avatar_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "gravatar_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "followers_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "following_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "gists_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "starred_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "subscriptions_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organizations_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repos_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "received_events_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "type" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "site_admin" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "permissions"
                (Json.Decode.succeed
                  (\pull triage push maintain admin ->
                      { pull = pull
                      , triage = triage
                      , push = push
                      , maintain = maintain
                      , admin = admin
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "pull" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "triage" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "push" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "maintain" Json.Decode.bool)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "admin" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "role_name" Json.Decode.string)


encodeCollaborator : Collaborator -> Json.Encode.Value
encodeCollaborator rec =
    Json.Encode.object
        [ ( "login", Json.Encode.string rec.login )
        , ( "id", Json.Encode.int rec.id )
        , ( "email"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.email
          )
        , ( "name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.name
          )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "avatar_url", Json.Encode.string rec.avatarUrl )
        , ( "gravatar_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.gravatarId
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "followers_url", Json.Encode.string rec.followersUrl )
        , ( "following_url", Json.Encode.string rec.followingUrl )
        , ( "gists_url", Json.Encode.string rec.gistsUrl )
        , ( "starred_url", Json.Encode.string rec.starredUrl )
        , ( "subscriptions_url", Json.Encode.string rec.subscriptionsUrl )
        , ( "organizations_url", Json.Encode.string rec.organizationsUrl )
        , ( "repos_url", Json.Encode.string rec.reposUrl )
        , ( "events_url", Json.Encode.string rec.eventsUrl )
        , ( "received_events_url", Json.Encode.string rec.receivedEventsUrl )
        , ( "type", Json.Encode.string rec.type_ )
        , ( "site_admin", Json.Encode.bool rec.siteAdmin )
        , ( "permissions"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "pull", Json.Encode.bool rec0.pull )
                    , ( "triage", Json.Encode.bool rec0.triage )
                    , ( "push", Json.Encode.bool rec0.push )
                    , ( "maintain", Json.Encode.bool rec0.maintain )
                    , ( "admin", Json.Encode.bool rec0.admin )
                    ]
            )
                rec.permissions
          )
        , ( "role_name", Json.Encode.string rec.roleName )
        ]


type alias CodespacesUserPublicKey =
    { keyId : String, key : String }


decodeCodespacesUserPublicKey : Json.Decode.Decoder CodespacesUserPublicKey
decodeCodespacesUserPublicKey =
    Json.Decode.succeed (\keyId key -> { keyId = keyId, key = key })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "key_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "key" Json.Decode.string)


encodeCodespacesUserPublicKey : CodespacesUserPublicKey -> Json.Encode.Value
encodeCodespacesUserPublicKey rec =
    Json.Encode.object
        [ ( "key_id", Json.Encode.string rec.keyId )
        , ( "key", Json.Encode.string rec.key )
        ]


type alias CodespacesSecret =
    { name : String
    , createdAt : String
    , updatedAt : String
    , visibility : String
    , selectedRepositoriesUrl : String
    }


decodeCodespacesSecret : Json.Decode.Decoder CodespacesSecret
decodeCodespacesSecret =
    Json.Decode.succeed
     (\name createdAt updatedAt visibility selectedRepositoriesUrl ->
         { name = name
         , createdAt = createdAt
         , updatedAt = updatedAt
         , visibility = visibility
         , selectedRepositoriesUrl = selectedRepositoriesUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "visibility" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "selected_repositories_url" Json.Decode.string)


encodeCodespacesSecret : CodespacesSecret -> Json.Encode.Value
encodeCodespacesSecret rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "visibility", Json.Encode.string rec.visibility )
        , ( "selected_repositories_url"
          , Json.Encode.string rec.selectedRepositoriesUrl
          )
        ]


type alias CodespacesPublicKey =
    { keyId : String
    , key : String
    , id : Int
    , url : String
    , title : String
    , createdAt : String
    }


decodeCodespacesPublicKey : Json.Decode.Decoder CodespacesPublicKey
decodeCodespacesPublicKey =
    Json.Decode.succeed
     (\keyId key id url title createdAt ->
         { keyId = keyId
         , key = key
         , id = id
         , url = url
         , title = title
         , createdAt = createdAt
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "key_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "key" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)


encodeCodespacesPublicKey : CodespacesPublicKey -> Json.Encode.Value
encodeCodespacesPublicKey rec =
    Json.Encode.object
        [ ( "key_id", Json.Encode.string rec.keyId )
        , ( "key", Json.Encode.string rec.key )
        , ( "id", Json.Encode.int rec.id )
        , ( "url", Json.Encode.string rec.url )
        , ( "title", Json.Encode.string rec.title )
        , ( "created_at", Json.Encode.string rec.createdAt )
        ]


type alias CodespacesOrgSecret =
    { name : String
    , createdAt : String
    , updatedAt : String
    , visibility : String
    , selectedRepositoriesUrl : String
    }


decodeCodespacesOrgSecret : Json.Decode.Decoder CodespacesOrgSecret
decodeCodespacesOrgSecret =
    Json.Decode.succeed
     (\name createdAt updatedAt visibility selectedRepositoriesUrl ->
         { name = name
         , createdAt = createdAt
         , updatedAt = updatedAt
         , visibility = visibility
         , selectedRepositoriesUrl = selectedRepositoriesUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "visibility" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "selected_repositories_url" Json.Decode.string)


encodeCodespacesOrgSecret : CodespacesOrgSecret -> Json.Encode.Value
encodeCodespacesOrgSecret rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "visibility", Json.Encode.string rec.visibility )
        , ( "selected_repositories_url"
          , Json.Encode.string rec.selectedRepositoriesUrl
          )
        ]


type alias CodespaceMachine =
    { name : String
    , displayName : String
    , operatingSystem : String
    , storageInBytes : Int
    , memoryInBytes : Int
    , cpus : Int
    , prebuildAvailability : Nullable String
    }


decodeCodespaceMachine : Json.Decode.Decoder CodespaceMachine
decodeCodespaceMachine =
    Json.Decode.succeed
     (\name displayName operatingSystem storageInBytes memoryInBytes cpus prebuildAvailability ->
         { name = name
         , displayName = displayName
         , operatingSystem = operatingSystem
         , storageInBytes = storageInBytes
         , memoryInBytes = memoryInBytes
         , cpus = cpus
         , prebuildAvailability = prebuildAvailability
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "display_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "operating_system" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "storage_in_bytes" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "memory_in_bytes" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "cpus" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "prebuild_availability"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeCodespaceMachine : CodespaceMachine -> Json.Encode.Value
encodeCodespaceMachine rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "display_name", Json.Encode.string rec.displayName )
        , ( "operating_system", Json.Encode.string rec.operatingSystem )
        , ( "storage_in_bytes", Json.Encode.int rec.storageInBytes )
        , ( "memory_in_bytes", Json.Encode.int rec.memoryInBytes )
        , ( "cpus", Json.Encode.int rec.cpus )
        , ( "prebuild_availability"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.prebuildAvailability
          )
        ]


type alias CodespaceExportDetails =
    { state : Nullable String
    , completedAt : Nullable String
    , branch : Nullable String
    , sha : Nullable String
    , id : String
    , exportUrl : String
    , htmlUrl : Nullable String
    }


decodeCodespaceExportDetails : Json.Decode.Decoder CodespaceExportDetails
decodeCodespaceExportDetails =
    Json.Decode.succeed
     (\state completedAt branch sha id exportUrl htmlUrl ->
         { state = state
         , completedAt = completedAt
         , branch = branch
         , sha = sha
         , id = id
         , exportUrl = exportUrl
         , htmlUrl = htmlUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "state"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "completed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "branch"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "sha"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "export_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "html_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeCodespaceExportDetails : CodespaceExportDetails -> Json.Encode.Value
encodeCodespaceExportDetails rec =
    Json.Encode.object
        [ ( "state"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.state
          )
        , ( "completed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.completedAt
          )
        , ( "branch"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.branch
          )
        , ( "sha"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.sha
          )
        , ( "id", Json.Encode.string rec.id )
        , ( "export_url", Json.Encode.string rec.exportUrl )
        , ( "html_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.htmlUrl
          )
        ]


type alias Codespace =
    { id : Int
    , name : String
    , displayName : Nullable String
    , environmentId : Nullable String
    , owner : SimpleUser
    , billableOwner : SimpleUser
    , repository : MinimalRepository
    , machine : Debug.Todo
    , devcontainerPath : Nullable String
    , prebuild : Nullable Bool
    , createdAt : String
    , updatedAt : String
    , lastUsedAt : String
    , state : String
    , url : String
    , gitStatus :
        { ahead : Int
        , behind : Int
        , hasUnpushedChanges : Bool
        , hasUncommittedChanges : Bool
        , ref : String
        }
    , location : String
    , idleTimeoutMinutes : Nullable Int
    , webUrl : String
    , machinesUrl : String
    , startUrl : String
    , stopUrl : String
    , pullsUrl : Nullable String
    , recentFolders : List String
    , runtimeConstraints :
        { allowedPortPrivacySettings : Nullable (List String) }
    , pendingOperation : Nullable Bool
    , pendingOperationDisabledReason : Nullable String
    , idleTimeoutNotice : Nullable String
    , retentionPeriodMinutes : Nullable Int
    , retentionExpiresAt : Nullable String
    , lastKnownStopNotice : Nullable String
    }


decodeCodespace : Json.Decode.Decoder Codespace
decodeCodespace =
    Json.Decode.succeed
     (\id name displayName environmentId owner billableOwner repository machine devcontainerPath prebuild createdAt updatedAt lastUsedAt state url gitStatus location idleTimeoutMinutes webUrl machinesUrl startUrl stopUrl pullsUrl recentFolders runtimeConstraints pendingOperation pendingOperationDisabledReason idleTimeoutNotice retentionPeriodMinutes retentionExpiresAt lastKnownStopNotice ->
         { id = id
         , name = name
         , displayName = displayName
         , environmentId = environmentId
         , owner = owner
         , billableOwner = billableOwner
         , repository = repository
         , machine = machine
         , devcontainerPath = devcontainerPath
         , prebuild = prebuild
         , createdAt = createdAt
         , updatedAt = updatedAt
         , lastUsedAt = lastUsedAt
         , state = state
         , url = url
         , gitStatus = gitStatus
         , location = location
         , idleTimeoutMinutes = idleTimeoutMinutes
         , webUrl = webUrl
         , machinesUrl = machinesUrl
         , startUrl = startUrl
         , stopUrl = stopUrl
         , pullsUrl = pullsUrl
         , recentFolders = recentFolders
         , runtimeConstraints = runtimeConstraints
         , pendingOperation = pendingOperation
         , pendingOperationDisabledReason = pendingOperationDisabledReason
         , idleTimeoutNotice = idleTimeoutNotice
         , retentionPeriodMinutes = retentionPeriodMinutes
         , retentionExpiresAt = retentionExpiresAt
         , lastKnownStopNotice = lastKnownStopNotice
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "display_name"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "environment_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "owner" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "billable_owner" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeMinimalRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "machine"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeCodespaceMachine
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "devcontainer_path"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "prebuild"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "last_used_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "git_status"
                (Json.Decode.succeed
                  (\ahead behind hasUnpushedChanges hasUncommittedChanges ref ->
                      { ahead = ahead
                      , behind = behind
                      , hasUnpushedChanges = hasUnpushedChanges
                      , hasUncommittedChanges = hasUncommittedChanges
                      , ref = ref
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "ahead" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "behind" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "has_unpushed_changes"
                            Json.Decode.bool
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "has_uncommitted_changes"
                            Json.Decode.bool
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "ref" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "location" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "idle_timeout_minutes"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "web_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "machines_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "start_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "stop_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pulls_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "recent_folders"
                (Json.Decode.list Json.Decode.string)
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "runtime_constraints"
                (Json.Decode.succeed
                    (\allowedPortPrivacySettings ->
                        { allowedPortPrivacySettings =
                            allowedPortPrivacySettings
                        }
                    )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "allowed_port_privacy_settings"
                            (Json.Decode.oneOf
                                [ Json.Decode.map
                                    Present
                                    (Json.Decode.list Json.Decode.string)
                                , Json.Decode.null Null
                                ]
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pending_operation"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.bool
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pending_operation_disabled_reason"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "idle_timeout_notice"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "retention_period_minutes"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "retention_expires_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "last_known_stop_notice"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeCodespace : Codespace -> Json.Encode.Value
encodeCodespace rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "name", Json.Encode.string rec.name )
        , ( "display_name"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.displayName
          )
        , ( "environment_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.environmentId
          )
        , ( "owner", encodeSimpleUser rec.owner )
        , ( "billable_owner", encodeSimpleUser rec.billableOwner )
        , ( "repository", encodeMinimalRepository rec.repository )
        , ( "machine", Debug.todo "decode anyOf" rec.machine )
        , ( "devcontainer_path"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.devcontainerPath
          )
        , ( "prebuild"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.prebuild
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "last_used_at", Json.Encode.string rec.lastUsedAt )
        , ( "state", Json.Encode.string rec.state )
        , ( "url", Json.Encode.string rec.url )
        , ( "git_status"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "ahead", Json.Encode.int rec0.ahead )
                    , ( "behind", Json.Encode.int rec0.behind )
                    , ( "has_unpushed_changes"
                      , Json.Encode.bool rec0.hasUnpushedChanges
                      )
                    , ( "has_uncommitted_changes"
                      , Json.Encode.bool rec0.hasUncommittedChanges
                      )
                    , ( "ref", Json.Encode.string rec0.ref )
                    ]
            )
                rec.gitStatus
          )
        , ( "location", Json.Encode.string rec.location )
        , ( "idle_timeout_minutes"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.idleTimeoutMinutes
          )
        , ( "web_url", Json.Encode.string rec.webUrl )
        , ( "machines_url", Json.Encode.string rec.machinesUrl )
        , ( "start_url", Json.Encode.string rec.startUrl )
        , ( "stop_url", Json.Encode.string rec.stopUrl )
        , ( "pulls_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.pullsUrl
          )
        , ( "recent_folders"
          , Json.Encode.list Json.Encode.string rec.recentFolders
          )
        , ( "runtime_constraints"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "allowed_port_privacy_settings"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.list Json.Encode.string value
                        )
                            rec0.allowedPortPrivacySettings
                      )
                    ]
            )
                rec.runtimeConstraints
          )
        , ( "pending_operation"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.bool value
            )
                rec.pendingOperation
          )
        , ( "pending_operation_disabled_reason"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.pendingOperationDisabledReason
          )
        , ( "idle_timeout_notice"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.idleTimeoutNotice
          )
        , ( "retention_period_minutes"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.retentionPeriodMinutes
          )
        , ( "retention_expires_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.retentionExpiresAt
          )
        , ( "last_known_stop_notice"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.lastKnownStopNotice
          )
        ]


type alias CodeownersErrors =
    { errors :
        List { line : Int
        , column : Int
        , source : String
        , kind : String
        , suggestion : Nullable String
        , message : String
        , path : String
        }
    }


decodeCodeownersErrors : Json.Decode.Decoder CodeownersErrors
decodeCodeownersErrors =
    Json.Decode.succeed (\errors -> { errors = errors })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "errors"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\line column source kind suggestion message path ->
                          { line = line
                          , column = column
                          , source = source
                          , kind = kind
                          , suggestion = suggestion
                          , message = message
                          , path = path
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "line" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "column" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "source" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "kind" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "suggestion"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "message" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "path" Json.Decode.string)
                    )
                )
            )


encodeCodeownersErrors : CodeownersErrors -> Json.Encode.Value
encodeCodeownersErrors rec =
    Json.Encode.object
        [ ( "errors"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "line", Json.Encode.int rec0.line )
                        , ( "column", Json.Encode.int rec0.column )
                        , ( "source", Json.Encode.string rec0.source )
                        , ( "kind", Json.Encode.string rec0.kind )
                        , ( "suggestion"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.string value
                            )
                                rec0.suggestion
                          )
                        , ( "message", Json.Encode.string rec0.message )
                        , ( "path", Json.Encode.string rec0.path )
                        ]
                )
                rec.errors
          )
        ]


type alias CodeSearchResultItem =
    { name : String
    , path : String
    , sha : String
    , url : String
    , gitUrl : String
    , htmlUrl : String
    , repository : MinimalRepository
    , score : Float
    , fileSize : Int
    , language : Nullable String
    , lastModifiedAt : String
    , lineNumbers : List String
    , textMatches : SearchResultTextMatches
    }


decodeCodeSearchResultItem : Json.Decode.Decoder CodeSearchResultItem
decodeCodeSearchResultItem =
    Json.Decode.succeed
     (\name path sha url gitUrl htmlUrl repository score fileSize language lastModifiedAt lineNumbers textMatches ->
         { name = name
         , path = path
         , sha = sha
         , url = url
         , gitUrl = gitUrl
         , htmlUrl = htmlUrl
         , repository = repository
         , score = score
         , fileSize = fileSize
         , language = language
         , lastModifiedAt = lastModifiedAt
         , lineNumbers = lineNumbers
         , textMatches = textMatches
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeMinimalRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "score" Json.Decode.float)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "file_size" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "language"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "last_modified_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "line_numbers"
                (Json.Decode.list Json.Decode.string)
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "text_matches" decodeSearchResultTextMatches)


encodeCodeSearchResultItem : CodeSearchResultItem -> Json.Encode.Value
encodeCodeSearchResultItem rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "path", Json.Encode.string rec.path )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "url", Json.Encode.string rec.url )
        , ( "git_url", Json.Encode.string rec.gitUrl )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "repository", encodeMinimalRepository rec.repository )
        , ( "score", Json.Encode.float rec.score )
        , ( "file_size", Json.Encode.int rec.fileSize )
        , ( "language"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.language
          )
        , ( "last_modified_at", Json.Encode.string rec.lastModifiedAt )
        , ( "line_numbers"
          , Json.Encode.list Json.Encode.string rec.lineNumbers
          )
        , ( "text_matches", encodeSearchResultTextMatches rec.textMatches )
        ]


type alias CodeScanningSarifsStatus =
    { processingStatus : String
    , analysesUrl : Nullable String
    , errors : Nullable (List String)
    }


decodeCodeScanningSarifsStatus : Json.Decode.Decoder CodeScanningSarifsStatus
decodeCodeScanningSarifsStatus =
    Json.Decode.succeed
     (\processingStatus analysesUrl errors ->
         { processingStatus = processingStatus
         , analysesUrl = analysesUrl
         , errors = errors
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "processing_status" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "analyses_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "errors"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list Json.Decode.string)
                    , Json.Decode.null Null
                    ]
                )
            )


encodeCodeScanningSarifsStatus : CodeScanningSarifsStatus -> Json.Encode.Value
encodeCodeScanningSarifsStatus rec =
    Json.Encode.object
        [ ( "processing_status", Json.Encode.string rec.processingStatus )
        , ( "analyses_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.analysesUrl
          )
        , ( "errors"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list Json.Encode.string value
            )
                rec.errors
          )
        ]


type alias CodeScanningSarifsReceipt =
    { id : CodeScanningAnalysisSarifId, url : String }


decodeCodeScanningSarifsReceipt : Json.Decode.Decoder CodeScanningSarifsReceipt
decodeCodeScanningSarifsReceipt =
    Json.Decode.succeed (\id url -> { id = id, url = url })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "id" decodeCodeScanningAnalysisSarifId)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)


encodeCodeScanningSarifsReceipt : CodeScanningSarifsReceipt -> Json.Encode.Value
encodeCodeScanningSarifsReceipt rec =
    Json.Encode.object
        [ ( "id", encodeCodeScanningAnalysisSarifId rec.id )
        , ( "url", Json.Encode.string rec.url )
        ]


type alias CodeScanningRef =
    String


decodeCodeScanningRef : Json.Decode.Decoder CodeScanningRef
decodeCodeScanningRef =
    Json.Decode.string


encodeCodeScanningRef : CodeScanningRef -> Json.Encode.Value
encodeCodeScanningRef =
    Json.Encode.string


type alias CodeScanningOrganizationAlertItems =
    { number : AlertNumber
    , createdAt : AlertCreatedAt
    , updatedAt : AlertUpdatedAt
    , url : AlertUrl
    , htmlUrl : AlertHtmlUrl
    , instancesUrl : AlertInstancesUrl
    , state : CodeScanningAlertState
    , fixedAt : AlertFixedAt
    , dismissedBy : Debug.Todo
    , dismissedAt : AlertDismissedAt
    , dismissedReason : CodeScanningAlertDismissedReason
    , dismissedComment : CodeScanningAlertDismissedComment
    , rule : CodeScanningAlertRule
    , tool : CodeScanningAnalysisTool
    , mostRecentInstance : CodeScanningAlertInstance
    , repository : SimpleRepository
    }


decodeCodeScanningOrganizationAlertItems :
    Json.Decode.Decoder CodeScanningOrganizationAlertItems
decodeCodeScanningOrganizationAlertItems =
    Json.Decode.succeed
     (\number createdAt updatedAt url htmlUrl instancesUrl state fixedAt dismissedBy dismissedAt dismissedReason dismissedComment rule tool mostRecentInstance repository ->
         { number = number
         , createdAt = createdAt
         , updatedAt = updatedAt
         , url = url
         , htmlUrl = htmlUrl
         , instancesUrl = instancesUrl
         , state = state
         , fixedAt = fixedAt
         , dismissedBy = dismissedBy
         , dismissedAt = dismissedAt
         , dismissedReason = dismissedReason
         , dismissedComment = dismissedComment
         , rule = rule
         , tool = tool
         , mostRecentInstance = mostRecentInstance
         , repository = repository
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "number" decodeAlertNumber)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" decodeAlertCreatedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" decodeAlertUpdatedAt)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" decodeAlertUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" decodeAlertHtmlUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "instances_url" decodeAlertInstancesUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" decodeCodeScanningAlertState)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "fixed_at" decodeAlertFixedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_by"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "dismissed_at" decodeAlertDismissedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_reason"
                decodeCodeScanningAlertDismissedReason
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_comment"
                decodeCodeScanningAlertDismissedComment
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "rule" decodeCodeScanningAlertRule)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tool" decodeCodeScanningAnalysisTool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "most_recent_instance"
                decodeCodeScanningAlertInstance
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeSimpleRepository)


encodeCodeScanningOrganizationAlertItems :
    CodeScanningOrganizationAlertItems -> Json.Encode.Value
encodeCodeScanningOrganizationAlertItems rec =
    Json.Encode.object
        [ ( "number", encodeAlertNumber rec.number )
        , ( "created_at", encodeAlertCreatedAt rec.createdAt )
        , ( "updated_at", encodeAlertUpdatedAt rec.updatedAt )
        , ( "url", encodeAlertUrl rec.url )
        , ( "html_url", encodeAlertHtmlUrl rec.htmlUrl )
        , ( "instances_url", encodeAlertInstancesUrl rec.instancesUrl )
        , ( "state", encodeCodeScanningAlertState rec.state )
        , ( "fixed_at", encodeAlertFixedAt rec.fixedAt )
        , ( "dismissed_by", Debug.todo "decode anyOf" rec.dismissedBy )
        , ( "dismissed_at", encodeAlertDismissedAt rec.dismissedAt )
        , ( "dismissed_reason"
          , encodeCodeScanningAlertDismissedReason rec.dismissedReason
          )
        , ( "dismissed_comment"
          , encodeCodeScanningAlertDismissedComment rec.dismissedComment
          )
        , ( "rule", encodeCodeScanningAlertRule rec.rule )
        , ( "tool", encodeCodeScanningAnalysisTool rec.tool )
        , ( "most_recent_instance"
          , encodeCodeScanningAlertInstance rec.mostRecentInstance
          )
        , ( "repository", encodeSimpleRepository rec.repository )
        ]


type alias CodeScanningCodeqlDatabase =
    { id : Int
    , name : String
    , language : String
    , uploader : SimpleUser
    , contentType : String
    , size : Int
    , createdAt : String
    , updatedAt : String
    , url : String
    }


decodeCodeScanningCodeqlDatabase :
    Json.Decode.Decoder CodeScanningCodeqlDatabase
decodeCodeScanningCodeqlDatabase =
    Json.Decode.succeed
     (\id name language uploader contentType size createdAt updatedAt url ->
         { id = id
         , name = name
         , language = language
         , uploader = uploader
         , contentType = contentType
         , size = size
         , createdAt = createdAt
         , updatedAt = updatedAt
         , url = url
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "language" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "uploader" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "content_type" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "size" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)


encodeCodeScanningCodeqlDatabase :
    CodeScanningCodeqlDatabase -> Json.Encode.Value
encodeCodeScanningCodeqlDatabase rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "name", Json.Encode.string rec.name )
        , ( "language", Json.Encode.string rec.language )
        , ( "uploader", encodeSimpleUser rec.uploader )
        , ( "content_type", Json.Encode.string rec.contentType )
        , ( "size", Json.Encode.int rec.size )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "url", Json.Encode.string rec.url )
        ]


type alias CodeScanningAnalysisUrl =
    String


decodeCodeScanningAnalysisUrl : Json.Decode.Decoder CodeScanningAnalysisUrl
decodeCodeScanningAnalysisUrl =
    Json.Decode.string


encodeCodeScanningAnalysisUrl : CodeScanningAnalysisUrl -> Json.Encode.Value
encodeCodeScanningAnalysisUrl =
    Json.Encode.string


type alias CodeScanningAnalysisToolVersion =
    Nullable String


decodeCodeScanningAnalysisToolVersion :
    Json.Decode.Decoder CodeScanningAnalysisToolVersion
decodeCodeScanningAnalysisToolVersion =
    Json.Decode.oneOf
        [ Json.Decode.map Present Json.Decode.string, Json.Decode.null Null ]


encodeCodeScanningAnalysisToolVersion :
    CodeScanningAnalysisToolVersion -> Json.Encode.Value
encodeCodeScanningAnalysisToolVersion nullableValue =
    case nullableValue of
        Null ->
            Json.Encode.null

        Present value ->
            Json.Encode.string value


type alias CodeScanningAnalysisToolName =
    String


decodeCodeScanningAnalysisToolName :
    Json.Decode.Decoder CodeScanningAnalysisToolName
decodeCodeScanningAnalysisToolName =
    Json.Decode.string


encodeCodeScanningAnalysisToolName :
    CodeScanningAnalysisToolName -> Json.Encode.Value
encodeCodeScanningAnalysisToolName =
    Json.Encode.string


type alias CodeScanningAnalysisToolGuid =
    Nullable String


decodeCodeScanningAnalysisToolGuid :
    Json.Decode.Decoder CodeScanningAnalysisToolGuid
decodeCodeScanningAnalysisToolGuid =
    Json.Decode.oneOf
        [ Json.Decode.map Present Json.Decode.string, Json.Decode.null Null ]


encodeCodeScanningAnalysisToolGuid :
    CodeScanningAnalysisToolGuid -> Json.Encode.Value
encodeCodeScanningAnalysisToolGuid nullableValue =
    case nullableValue of
        Null ->
            Json.Encode.null

        Present value ->
            Json.Encode.string value


type alias CodeScanningAnalysisTool =
    { name : CodeScanningAnalysisToolName
    , version : CodeScanningAnalysisToolVersion
    , guid : CodeScanningAnalysisToolGuid
    }


decodeCodeScanningAnalysisTool : Json.Decode.Decoder CodeScanningAnalysisTool
decodeCodeScanningAnalysisTool =
    Json.Decode.succeed
     (\name version guid -> { name = name, version = version, guid = guid })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" decodeCodeScanningAnalysisToolName)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "version" decodeCodeScanningAnalysisToolVersion)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "guid" decodeCodeScanningAnalysisToolGuid)


encodeCodeScanningAnalysisTool : CodeScanningAnalysisTool -> Json.Encode.Value
encodeCodeScanningAnalysisTool rec =
    Json.Encode.object
        [ ( "name", encodeCodeScanningAnalysisToolName rec.name )
        , ( "version", encodeCodeScanningAnalysisToolVersion rec.version )
        , ( "guid", encodeCodeScanningAnalysisToolGuid rec.guid )
        ]


type alias CodeScanningAnalysisSarifId =
    String


decodeCodeScanningAnalysisSarifId :
    Json.Decode.Decoder CodeScanningAnalysisSarifId
decodeCodeScanningAnalysisSarifId =
    Json.Decode.string


encodeCodeScanningAnalysisSarifId :
    CodeScanningAnalysisSarifId -> Json.Encode.Value
encodeCodeScanningAnalysisSarifId =
    Json.Encode.string


type alias CodeScanningAnalysisSarifFile =
    String


decodeCodeScanningAnalysisSarifFile :
    Json.Decode.Decoder CodeScanningAnalysisSarifFile
decodeCodeScanningAnalysisSarifFile =
    Json.Decode.string


encodeCodeScanningAnalysisSarifFile :
    CodeScanningAnalysisSarifFile -> Json.Encode.Value
encodeCodeScanningAnalysisSarifFile =
    Json.Encode.string


type alias CodeScanningAnalysisEnvironment =
    String


decodeCodeScanningAnalysisEnvironment :
    Json.Decode.Decoder CodeScanningAnalysisEnvironment
decodeCodeScanningAnalysisEnvironment =
    Json.Decode.string


encodeCodeScanningAnalysisEnvironment :
    CodeScanningAnalysisEnvironment -> Json.Encode.Value
encodeCodeScanningAnalysisEnvironment =
    Json.Encode.string


type alias CodeScanningAnalysisDeletion =
    { nextAnalysisUrl : Nullable String, confirmDeleteUrl : Nullable String }


decodeCodeScanningAnalysisDeletion :
    Json.Decode.Decoder CodeScanningAnalysisDeletion
decodeCodeScanningAnalysisDeletion =
    Json.Decode.succeed
     (\nextAnalysisUrl confirmDeleteUrl ->
         { nextAnalysisUrl = nextAnalysisUrl
         , confirmDeleteUrl = confirmDeleteUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "next_analysis_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "confirm_delete_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeCodeScanningAnalysisDeletion :
    CodeScanningAnalysisDeletion -> Json.Encode.Value
encodeCodeScanningAnalysisDeletion rec =
    Json.Encode.object
        [ ( "next_analysis_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.nextAnalysisUrl
          )
        , ( "confirm_delete_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.confirmDeleteUrl
          )
        ]


type alias CodeScanningAnalysisCreatedAt =
    String


decodeCodeScanningAnalysisCreatedAt :
    Json.Decode.Decoder CodeScanningAnalysisCreatedAt
decodeCodeScanningAnalysisCreatedAt =
    Json.Decode.string


encodeCodeScanningAnalysisCreatedAt :
    CodeScanningAnalysisCreatedAt -> Json.Encode.Value
encodeCodeScanningAnalysisCreatedAt =
    Json.Encode.string


type alias CodeScanningAnalysisCommitSha =
    String


decodeCodeScanningAnalysisCommitSha :
    Json.Decode.Decoder CodeScanningAnalysisCommitSha
decodeCodeScanningAnalysisCommitSha =
    Json.Decode.string


encodeCodeScanningAnalysisCommitSha :
    CodeScanningAnalysisCommitSha -> Json.Encode.Value
encodeCodeScanningAnalysisCommitSha =
    Json.Encode.string


type alias CodeScanningAnalysisCategory =
    String


decodeCodeScanningAnalysisCategory :
    Json.Decode.Decoder CodeScanningAnalysisCategory
decodeCodeScanningAnalysisCategory =
    Json.Decode.string


encodeCodeScanningAnalysisCategory :
    CodeScanningAnalysisCategory -> Json.Encode.Value
encodeCodeScanningAnalysisCategory =
    Json.Encode.string


type alias CodeScanningAnalysisAnalysisKey =
    String


decodeCodeScanningAnalysisAnalysisKey :
    Json.Decode.Decoder CodeScanningAnalysisAnalysisKey
decodeCodeScanningAnalysisAnalysisKey =
    Json.Decode.string


encodeCodeScanningAnalysisAnalysisKey :
    CodeScanningAnalysisAnalysisKey -> Json.Encode.Value
encodeCodeScanningAnalysisAnalysisKey =
    Json.Encode.string


type alias CodeScanningAnalysis =
    { ref : CodeScanningRef
    , commitSha : CodeScanningAnalysisCommitSha
    , analysisKey : CodeScanningAnalysisAnalysisKey
    , environment : CodeScanningAnalysisEnvironment
    , category : CodeScanningAnalysisCategory
    , error : String
    , createdAt : CodeScanningAnalysisCreatedAt
    , resultsCount : Int
    , rulesCount : Int
    , id : Int
    , url : CodeScanningAnalysisUrl
    , sarifId : CodeScanningAnalysisSarifId
    , tool : CodeScanningAnalysisTool
    , deletable : Bool
    , warning : String
    }


decodeCodeScanningAnalysis : Json.Decode.Decoder CodeScanningAnalysis
decodeCodeScanningAnalysis =
    Json.Decode.succeed
     (\ref commitSha analysisKey environment category error createdAt resultsCount rulesCount id url sarifId tool deletable warning ->
         { ref = ref
         , commitSha = commitSha
         , analysisKey = analysisKey
         , environment = environment
         , category = category
         , error = error
         , createdAt = createdAt
         , resultsCount = resultsCount
         , rulesCount = rulesCount
         , id = id
         , url = url
         , sarifId = sarifId
         , tool = tool
         , deletable = deletable
         , warning = warning
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ref" decodeCodeScanningRef)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commit_sha" decodeCodeScanningAnalysisCommitSha)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "analysis_key"
                decodeCodeScanningAnalysisAnalysisKey
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "environment"
                decodeCodeScanningAnalysisEnvironment
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "category" decodeCodeScanningAnalysisCategory)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "error" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" decodeCodeScanningAnalysisCreatedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "results_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "rules_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "url" decodeCodeScanningAnalysisUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "sarif_id" decodeCodeScanningAnalysisSarifId)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tool" decodeCodeScanningAnalysisTool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deletable" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "warning" Json.Decode.string)


encodeCodeScanningAnalysis : CodeScanningAnalysis -> Json.Encode.Value
encodeCodeScanningAnalysis rec =
    Json.Encode.object
        [ ( "ref", encodeCodeScanningRef rec.ref )
        , ( "commit_sha", encodeCodeScanningAnalysisCommitSha rec.commitSha )
        , ( "analysis_key"
          , encodeCodeScanningAnalysisAnalysisKey rec.analysisKey
          )
        , ( "environment"
          , encodeCodeScanningAnalysisEnvironment rec.environment
          )
        , ( "category", encodeCodeScanningAnalysisCategory rec.category )
        , ( "error", Json.Encode.string rec.error )
        , ( "created_at", encodeCodeScanningAnalysisCreatedAt rec.createdAt )
        , ( "results_count", Json.Encode.int rec.resultsCount )
        , ( "rules_count", Json.Encode.int rec.rulesCount )
        , ( "id", Json.Encode.int rec.id )
        , ( "url", encodeCodeScanningAnalysisUrl rec.url )
        , ( "sarif_id", encodeCodeScanningAnalysisSarifId rec.sarifId )
        , ( "tool", encodeCodeScanningAnalysisTool rec.tool )
        , ( "deletable", Json.Encode.bool rec.deletable )
        , ( "warning", Json.Encode.string rec.warning )
        ]


type alias CodeScanningAlertState =
    String


decodeCodeScanningAlertState : Json.Decode.Decoder CodeScanningAlertState
decodeCodeScanningAlertState =
    Json.Decode.string


encodeCodeScanningAlertState : CodeScanningAlertState -> Json.Encode.Value
encodeCodeScanningAlertState =
    Json.Encode.string


type alias CodeScanningAlertSetState =
    String


decodeCodeScanningAlertSetState : Json.Decode.Decoder CodeScanningAlertSetState
decodeCodeScanningAlertSetState =
    Json.Decode.string


encodeCodeScanningAlertSetState : CodeScanningAlertSetState -> Json.Encode.Value
encodeCodeScanningAlertSetState =
    Json.Encode.string


type alias CodeScanningAlertRuleSummary =
    { id : Nullable String
    , name : String
    , tags : Nullable (List String)
    , severity : Nullable String
    , description : String
    }


decodeCodeScanningAlertRuleSummary :
    Json.Decode.Decoder CodeScanningAlertRuleSummary
decodeCodeScanningAlertRuleSummary =
    Json.Decode.succeed
     (\id name tags severity description ->
         { id = id
         , name = name
         , tags = tags
         , severity = severity
         , description = description
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "tags"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list Json.Decode.string)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "severity"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "description" Json.Decode.string)


encodeCodeScanningAlertRuleSummary :
    CodeScanningAlertRuleSummary -> Json.Encode.Value
encodeCodeScanningAlertRuleSummary rec =
    Json.Encode.object
        [ ( "id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.id
          )
        , ( "name", Json.Encode.string rec.name )
        , ( "tags"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list Json.Encode.string value
            )
                rec.tags
          )
        , ( "severity"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.severity
          )
        , ( "description", Json.Encode.string rec.description )
        ]


type alias CodeScanningAlertRule =
    { id : Nullable String
    , name : String
    , severity : Nullable String
    , securitySeverityLevel : Nullable String
    , description : String
    , fullDescription : String
    , tags : Nullable (List String)
    , help : Nullable String
    , helpUri : Nullable String
    }


decodeCodeScanningAlertRule : Json.Decode.Decoder CodeScanningAlertRule
decodeCodeScanningAlertRule =
    Json.Decode.succeed
     (\id name severity securitySeverityLevel description fullDescription tags help helpUri ->
         { id = id
         , name = name
         , severity = severity
         , securitySeverityLevel = securitySeverityLevel
         , description = description
         , fullDescription = fullDescription
         , tags = tags
         , help = help
         , helpUri = helpUri
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "severity"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "security_severity_level"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "description" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "full_description" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "tags"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list Json.Decode.string)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "help"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "help_uri"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeCodeScanningAlertRule : CodeScanningAlertRule -> Json.Encode.Value
encodeCodeScanningAlertRule rec =
    Json.Encode.object
        [ ( "id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.id
          )
        , ( "name", Json.Encode.string rec.name )
        , ( "severity"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.severity
          )
        , ( "security_severity_level"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.securitySeverityLevel
          )
        , ( "description", Json.Encode.string rec.description )
        , ( "full_description", Json.Encode.string rec.fullDescription )
        , ( "tags"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list Json.Encode.string value
            )
                rec.tags
          )
        , ( "help"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.help
          )
        , ( "help_uri"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.helpUri
          )
        ]


type alias CodeScanningAlertLocation =
    { path : String
    , startLine : Int
    , endLine : Int
    , startColumn : Int
    , endColumn : Int
    }


decodeCodeScanningAlertLocation : Json.Decode.Decoder CodeScanningAlertLocation
decodeCodeScanningAlertLocation =
    Json.Decode.succeed
     (\path startLine endLine startColumn endColumn ->
         { path = path
         , startLine = startLine
         , endLine = endLine
         , startColumn = startColumn
         , endColumn = endColumn
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "start_line" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "end_line" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "start_column" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "end_column" Json.Decode.int)


encodeCodeScanningAlertLocation : CodeScanningAlertLocation -> Json.Encode.Value
encodeCodeScanningAlertLocation rec =
    Json.Encode.object
        [ ( "path", Json.Encode.string rec.path )
        , ( "start_line", Json.Encode.int rec.startLine )
        , ( "end_line", Json.Encode.int rec.endLine )
        , ( "start_column", Json.Encode.int rec.startColumn )
        , ( "end_column", Json.Encode.int rec.endColumn )
        ]


type alias CodeScanningAlertItems =
    { number : AlertNumber
    , createdAt : AlertCreatedAt
    , updatedAt : AlertUpdatedAt
    , url : AlertUrl
    , htmlUrl : AlertHtmlUrl
    , instancesUrl : AlertInstancesUrl
    , state : CodeScanningAlertState
    , fixedAt : AlertFixedAt
    , dismissedBy : Debug.Todo
    , dismissedAt : AlertDismissedAt
    , dismissedReason : CodeScanningAlertDismissedReason
    , dismissedComment : CodeScanningAlertDismissedComment
    , rule : CodeScanningAlertRuleSummary
    , tool : CodeScanningAnalysisTool
    , mostRecentInstance : CodeScanningAlertInstance
    }


decodeCodeScanningAlertItems : Json.Decode.Decoder CodeScanningAlertItems
decodeCodeScanningAlertItems =
    Json.Decode.succeed
     (\number createdAt updatedAt url htmlUrl instancesUrl state fixedAt dismissedBy dismissedAt dismissedReason dismissedComment rule tool mostRecentInstance ->
         { number = number
         , createdAt = createdAt
         , updatedAt = updatedAt
         , url = url
         , htmlUrl = htmlUrl
         , instancesUrl = instancesUrl
         , state = state
         , fixedAt = fixedAt
         , dismissedBy = dismissedBy
         , dismissedAt = dismissedAt
         , dismissedReason = dismissedReason
         , dismissedComment = dismissedComment
         , rule = rule
         , tool = tool
         , mostRecentInstance = mostRecentInstance
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "number" decodeAlertNumber)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" decodeAlertCreatedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" decodeAlertUpdatedAt)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" decodeAlertUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" decodeAlertHtmlUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "instances_url" decodeAlertInstancesUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" decodeCodeScanningAlertState)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "fixed_at" decodeAlertFixedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_by"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "dismissed_at" decodeAlertDismissedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_reason"
                decodeCodeScanningAlertDismissedReason
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_comment"
                decodeCodeScanningAlertDismissedComment
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "rule" decodeCodeScanningAlertRuleSummary)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tool" decodeCodeScanningAnalysisTool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "most_recent_instance"
                decodeCodeScanningAlertInstance
            )


encodeCodeScanningAlertItems : CodeScanningAlertItems -> Json.Encode.Value
encodeCodeScanningAlertItems rec =
    Json.Encode.object
        [ ( "number", encodeAlertNumber rec.number )
        , ( "created_at", encodeAlertCreatedAt rec.createdAt )
        , ( "updated_at", encodeAlertUpdatedAt rec.updatedAt )
        , ( "url", encodeAlertUrl rec.url )
        , ( "html_url", encodeAlertHtmlUrl rec.htmlUrl )
        , ( "instances_url", encodeAlertInstancesUrl rec.instancesUrl )
        , ( "state", encodeCodeScanningAlertState rec.state )
        , ( "fixed_at", encodeAlertFixedAt rec.fixedAt )
        , ( "dismissed_by", Debug.todo "decode anyOf" rec.dismissedBy )
        , ( "dismissed_at", encodeAlertDismissedAt rec.dismissedAt )
        , ( "dismissed_reason"
          , encodeCodeScanningAlertDismissedReason rec.dismissedReason
          )
        , ( "dismissed_comment"
          , encodeCodeScanningAlertDismissedComment rec.dismissedComment
          )
        , ( "rule", encodeCodeScanningAlertRuleSummary rec.rule )
        , ( "tool", encodeCodeScanningAnalysisTool rec.tool )
        , ( "most_recent_instance"
          , encodeCodeScanningAlertInstance rec.mostRecentInstance
          )
        ]


type alias CodeScanningAlertInstance =
    { ref : CodeScanningRef
    , analysisKey : CodeScanningAnalysisAnalysisKey
    , environment : CodeScanningAlertEnvironment
    , category : CodeScanningAnalysisCategory
    , state : CodeScanningAlertState
    , commitSha : String
    , message : { text : String }
    , location : CodeScanningAlertLocation
    , htmlUrl : String
    , classifications : List CodeScanningAlertClassification
    }


decodeCodeScanningAlertInstance : Json.Decode.Decoder CodeScanningAlertInstance
decodeCodeScanningAlertInstance =
    Json.Decode.succeed
     (\ref analysisKey environment category state commitSha message location htmlUrl classifications ->
         { ref = ref
         , analysisKey = analysisKey
         , environment = environment
         , category = category
         , state = state
         , commitSha = commitSha
         , message = message
         , location = location
         , htmlUrl = htmlUrl
         , classifications = classifications
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ref" decodeCodeScanningRef)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "analysis_key"
                decodeCodeScanningAnalysisAnalysisKey
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "environment" decodeCodeScanningAlertEnvironment)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "category" decodeCodeScanningAnalysisCategory)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" decodeCodeScanningAlertState)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commit_sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "message"
                (Json.Decode.succeed (\text -> { text = text })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "text" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "location" decodeCodeScanningAlertLocation)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "classifications"
                (Json.Decode.list decodeCodeScanningAlertClassification)
            )


encodeCodeScanningAlertInstance : CodeScanningAlertInstance -> Json.Encode.Value
encodeCodeScanningAlertInstance rec =
    Json.Encode.object
        [ ( "ref", encodeCodeScanningRef rec.ref )
        , ( "analysis_key"
          , encodeCodeScanningAnalysisAnalysisKey rec.analysisKey
          )
        , ( "environment", encodeCodeScanningAlertEnvironment rec.environment )
        , ( "category", encodeCodeScanningAnalysisCategory rec.category )
        , ( "state", encodeCodeScanningAlertState rec.state )
        , ( "commit_sha", Json.Encode.string rec.commitSha )
        , ( "message"
          , (\rec0 ->
                Json.Encode.object [ ( "text", Json.Encode.string rec0.text ) ]
            )
                rec.message
          )
        , ( "location", encodeCodeScanningAlertLocation rec.location )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "classifications"
          , Json.Encode.list encodeCodeScanningAlertClassification
                rec.classifications
          )
        ]


type alias CodeScanningAlertEnvironment =
    String


decodeCodeScanningAlertEnvironment :
    Json.Decode.Decoder CodeScanningAlertEnvironment
decodeCodeScanningAlertEnvironment =
    Json.Decode.string


encodeCodeScanningAlertEnvironment :
    CodeScanningAlertEnvironment -> Json.Encode.Value
encodeCodeScanningAlertEnvironment =
    Json.Encode.string


type alias CodeScanningAlertDismissedReason =
    Nullable String


decodeCodeScanningAlertDismissedReason :
    Json.Decode.Decoder CodeScanningAlertDismissedReason
decodeCodeScanningAlertDismissedReason =
    Json.Decode.oneOf
        [ Json.Decode.map Present Json.Decode.string, Json.Decode.null Null ]


encodeCodeScanningAlertDismissedReason :
    CodeScanningAlertDismissedReason -> Json.Encode.Value
encodeCodeScanningAlertDismissedReason nullableValue =
    case nullableValue of
        Null ->
            Json.Encode.null

        Present value ->
            Json.Encode.string value


type alias CodeScanningAlertDismissedComment =
    Nullable String


decodeCodeScanningAlertDismissedComment :
    Json.Decode.Decoder CodeScanningAlertDismissedComment
decodeCodeScanningAlertDismissedComment =
    Json.Decode.oneOf
        [ Json.Decode.map Present Json.Decode.string, Json.Decode.null Null ]


encodeCodeScanningAlertDismissedComment :
    CodeScanningAlertDismissedComment -> Json.Encode.Value
encodeCodeScanningAlertDismissedComment nullableValue =
    case nullableValue of
        Null ->
            Json.Encode.null

        Present value ->
            Json.Encode.string value


type alias CodeScanningAlertClassification =
    Nullable String


decodeCodeScanningAlertClassification :
    Json.Decode.Decoder CodeScanningAlertClassification
decodeCodeScanningAlertClassification =
    Json.Decode.oneOf
        [ Json.Decode.map Present Json.Decode.string, Json.Decode.null Null ]


encodeCodeScanningAlertClassification :
    CodeScanningAlertClassification -> Json.Encode.Value
encodeCodeScanningAlertClassification nullableValue =
    case nullableValue of
        Null ->
            Json.Encode.null

        Present value ->
            Json.Encode.string value


type alias CodeScanningAlert =
    { number : AlertNumber
    , createdAt : AlertCreatedAt
    , updatedAt : AlertUpdatedAt
    , url : AlertUrl
    , htmlUrl : AlertHtmlUrl
    , instancesUrl : AlertInstancesUrl
    , state : CodeScanningAlertState
    , fixedAt : AlertFixedAt
    , dismissedBy : Debug.Todo
    , dismissedAt : AlertDismissedAt
    , dismissedReason : CodeScanningAlertDismissedReason
    , dismissedComment : CodeScanningAlertDismissedComment
    , rule : CodeScanningAlertRule
    , tool : CodeScanningAnalysisTool
    , mostRecentInstance : CodeScanningAlertInstance
    }


decodeCodeScanningAlert : Json.Decode.Decoder CodeScanningAlert
decodeCodeScanningAlert =
    Json.Decode.succeed
     (\number createdAt updatedAt url htmlUrl instancesUrl state fixedAt dismissedBy dismissedAt dismissedReason dismissedComment rule tool mostRecentInstance ->
         { number = number
         , createdAt = createdAt
         , updatedAt = updatedAt
         , url = url
         , htmlUrl = htmlUrl
         , instancesUrl = instancesUrl
         , state = state
         , fixedAt = fixedAt
         , dismissedBy = dismissedBy
         , dismissedAt = dismissedAt
         , dismissedReason = dismissedReason
         , dismissedComment = dismissedComment
         , rule = rule
         , tool = tool
         , mostRecentInstance = mostRecentInstance
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "number" decodeAlertNumber)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" decodeAlertCreatedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" decodeAlertUpdatedAt)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" decodeAlertUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" decodeAlertHtmlUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "instances_url" decodeAlertInstancesUrl)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "state" decodeCodeScanningAlertState)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "fixed_at" decodeAlertFixedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_by"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "dismissed_at" decodeAlertDismissedAt)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_reason"
                decodeCodeScanningAlertDismissedReason
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dismissed_comment"
                decodeCodeScanningAlertDismissedComment
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "rule" decodeCodeScanningAlertRule)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "tool" decodeCodeScanningAnalysisTool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "most_recent_instance"
                decodeCodeScanningAlertInstance
            )


encodeCodeScanningAlert : CodeScanningAlert -> Json.Encode.Value
encodeCodeScanningAlert rec =
    Json.Encode.object
        [ ( "number", encodeAlertNumber rec.number )
        , ( "created_at", encodeAlertCreatedAt rec.createdAt )
        , ( "updated_at", encodeAlertUpdatedAt rec.updatedAt )
        , ( "url", encodeAlertUrl rec.url )
        , ( "html_url", encodeAlertHtmlUrl rec.htmlUrl )
        , ( "instances_url", encodeAlertInstancesUrl rec.instancesUrl )
        , ( "state", encodeCodeScanningAlertState rec.state )
        , ( "fixed_at", encodeAlertFixedAt rec.fixedAt )
        , ( "dismissed_by", Debug.todo "decode anyOf" rec.dismissedBy )
        , ( "dismissed_at", encodeAlertDismissedAt rec.dismissedAt )
        , ( "dismissed_reason"
          , encodeCodeScanningAlertDismissedReason rec.dismissedReason
          )
        , ( "dismissed_comment"
          , encodeCodeScanningAlertDismissedComment rec.dismissedComment
          )
        , ( "rule", encodeCodeScanningAlertRule rec.rule )
        , ( "tool", encodeCodeScanningAnalysisTool rec.tool )
        , ( "most_recent_instance"
          , encodeCodeScanningAlertInstance rec.mostRecentInstance
          )
        ]


type alias CodeOfConductSimple =
    { url : String, key : String, name : String, htmlUrl : Nullable String }


decodeCodeOfConductSimple : Json.Decode.Decoder CodeOfConductSimple
decodeCodeOfConductSimple =
    Json.Decode.succeed
     (\url key name htmlUrl ->
         { url = url, key = key, name = name, htmlUrl = htmlUrl }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "key" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "html_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeCodeOfConductSimple : CodeOfConductSimple -> Json.Encode.Value
encodeCodeOfConductSimple rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "key", Json.Encode.string rec.key )
        , ( "name", Json.Encode.string rec.name )
        , ( "html_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.htmlUrl
          )
        ]


type alias CodeOfConduct =
    { key : String
    , name : String
    , url : String
    , body : String
    , htmlUrl : Nullable String
    }


decodeCodeOfConduct : Json.Decode.Decoder CodeOfConduct
decodeCodeOfConduct =
    Json.Decode.succeed
     (\key name url body htmlUrl ->
         { key = key, name = name, url = url, body = body, htmlUrl = htmlUrl }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "key" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "body" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "html_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeCodeOfConduct : CodeOfConduct -> Json.Encode.Value
encodeCodeOfConduct rec =
    Json.Encode.object
        [ ( "key", Json.Encode.string rec.key )
        , ( "name", Json.Encode.string rec.name )
        , ( "url", Json.Encode.string rec.url )
        , ( "body", Json.Encode.string rec.body )
        , ( "html_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.htmlUrl
          )
        ]


type alias CodeFrequencyStat =
    List Int


decodeCodeFrequencyStat : Json.Decode.Decoder CodeFrequencyStat
decodeCodeFrequencyStat =
    Json.Decode.list Json.Decode.int


encodeCodeFrequencyStat : CodeFrequencyStat -> Json.Encode.Value
encodeCodeFrequencyStat =
    Json.Encode.list Json.Encode.int


type alias CloneTraffic =
    { count : Int, uniques : Int, clones : List Traffic }


decodeCloneTraffic : Json.Decode.Decoder CloneTraffic
decodeCloneTraffic =
    Json.Decode.succeed
     (\count uniques clones ->
         { count = count, uniques = uniques, clones = clones }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "uniques" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "clones" (Json.Decode.list decodeTraffic))


encodeCloneTraffic : CloneTraffic -> Json.Encode.Value
encodeCloneTraffic rec =
    Json.Encode.object
        [ ( "count", Json.Encode.int rec.count )
        , ( "uniques", Json.Encode.int rec.uniques )
        , ( "clones", Json.Encode.list encodeTraffic rec.clones )
        ]


type alias CheckSuitePreference =
    { preferences : { autoTriggerChecks : List { appId : Int, setting : Bool } }
    , repository : MinimalRepository
    }


decodeCheckSuitePreference : Json.Decode.Decoder CheckSuitePreference
decodeCheckSuitePreference =
    Json.Decode.succeed
     (\preferences repository ->
         { preferences = preferences, repository = repository }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "preferences"
                (Json.Decode.succeed
                    (\autoTriggerChecks ->
                        { autoTriggerChecks = autoTriggerChecks }
                    )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "auto_trigger_checks"
                            (Json.Decode.list
                                (Json.Decode.succeed
                                  (\appId setting ->
                                      { appId = appId, setting = setting }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "app_id"
                                            Json.Decode.int
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "setting"
                                            Json.Decode.bool
                                        )
                                )
                            )
                        )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeMinimalRepository)


encodeCheckSuitePreference : CheckSuitePreference -> Json.Encode.Value
encodeCheckSuitePreference rec =
    Json.Encode.object
        [ ( "preferences"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "auto_trigger_checks"
                      , Json.Encode.list
                            (\rec_1_0_1_1_1_0_1_1_0_0 ->
                                Json.Encode.object
                                    [ ( "app_id"
                                      , Json.Encode.int
                                            rec_1_0_1_1_1_0_1_1_0_0.appId
                                      )
                                    , ( "setting"
                                      , Json.Encode.bool
                                            rec_1_0_1_1_1_0_1_1_0_0.setting
                                      )
                                    ]
                            )
                            rec0.autoTriggerChecks
                      )
                    ]
            )
                rec.preferences
          )
        , ( "repository", encodeMinimalRepository rec.repository )
        ]


type alias CheckSuite =
    { id : Int
    , nodeId : String
    , headBranch : Nullable String
    , headSha : String
    , status : Nullable String
    , conclusion : Nullable String
    , url : Nullable String
    , before : Nullable String
    , after : Nullable String
    , pullRequests : Nullable (List PullRequestMinimal)
    , app : Debug.Todo
    , repository : MinimalRepository
    , createdAt : Nullable String
    , updatedAt : Nullable String
    , headCommit : SimpleCommit
    , latestCheckRunsCount : Int
    , checkRunsUrl : String
    , rerequestable : Bool
    , runsRerequestable : Bool
    }


decodeCheckSuite : Json.Decode.Decoder CheckSuite
decodeCheckSuite =
    Json.Decode.succeed
     (\id nodeId headBranch headSha status conclusion url before after pullRequests app repository createdAt updatedAt headCommit latestCheckRunsCount checkRunsUrl rerequestable runsRerequestable ->
         { id = id
         , nodeId = nodeId
         , headBranch = headBranch
         , headSha = headSha
         , status = status
         , conclusion = conclusion
         , url = url
         , before = before
         , after = after
         , pullRequests = pullRequests
         , app = app
         , repository = repository
         , createdAt = createdAt
         , updatedAt = updatedAt
         , headCommit = headCommit
         , latestCheckRunsCount = latestCheckRunsCount
         , checkRunsUrl = checkRunsUrl
         , rerequestable = rerequestable
         , runsRerequestable = runsRerequestable
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "head_branch"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "head_sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "status"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "conclusion"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "before"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "after"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pull_requests"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list decodePullRequestMinimal)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository" decodeMinimalRepository)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "created_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "updated_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "head_commit" decodeSimpleCommit)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "latest_check_runs_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "check_runs_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "rerequestable" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "runs_rerequestable" Json.Decode.bool)


encodeCheckSuite : CheckSuite -> Json.Encode.Value
encodeCheckSuite rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "head_branch"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.headBranch
          )
        , ( "head_sha", Json.Encode.string rec.headSha )
        , ( "status"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.status
          )
        , ( "conclusion"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.conclusion
          )
        , ( "url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.url
          )
        , ( "before"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.before
          )
        , ( "after"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.after
          )
        , ( "pull_requests"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list encodePullRequestMinimal value
            )
                rec.pullRequests
          )
        , ( "app", Debug.todo "decode anyOf" rec.app )
        , ( "repository", encodeMinimalRepository rec.repository )
        , ( "created_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.createdAt
          )
        , ( "updated_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.updatedAt
          )
        , ( "head_commit", encodeSimpleCommit rec.headCommit )
        , ( "latest_check_runs_count"
          , Json.Encode.int rec.latestCheckRunsCount
          )
        , ( "check_runs_url", Json.Encode.string rec.checkRunsUrl )
        , ( "rerequestable", Json.Encode.bool rec.rerequestable )
        , ( "runs_rerequestable", Json.Encode.bool rec.runsRerequestable )
        ]


type alias CheckRun =
    { id : Int
    , headSha : String
    , nodeId : String
    , externalId : Nullable String
    , url : String
    , htmlUrl : Nullable String
    , detailsUrl : Nullable String
    , status : String
    , conclusion : Nullable String
    , startedAt : Nullable String
    , completedAt : Nullable String
    , output :
        { title : Nullable String
        , summary : Nullable String
        , text : Nullable String
        , annotationsCount : Int
        , annotationsUrl : String
        }
    , name : String
    , checkSuite : Nullable { id : Int }
    , app : Debug.Todo
    , pullRequests : List PullRequestMinimal
    , deployment : DeploymentSimple
    }


decodeCheckRun : Json.Decode.Decoder CheckRun
decodeCheckRun =
    Json.Decode.succeed
     (\id headSha nodeId externalId url htmlUrl detailsUrl status conclusion startedAt completedAt output name checkSuite app pullRequests deployment ->
         { id = id
         , headSha = headSha
         , nodeId = nodeId
         , externalId = externalId
         , url = url
         , htmlUrl = htmlUrl
         , detailsUrl = detailsUrl
         , status = status
         , conclusion = conclusion
         , startedAt = startedAt
         , completedAt = completedAt
         , output = output
         , name = name
         , checkSuite = checkSuite
         , app = app
         , pullRequests = pullRequests
         , deployment = deployment
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "head_sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "external_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "html_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "details_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "conclusion"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "started_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "completed_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "output"
                (Json.Decode.succeed
                  (\title summary text annotationsCount annotationsUrl ->
                      { title = title
                      , summary = summary
                      , text = text
                      , annotationsCount = annotationsCount
                      , annotationsUrl = annotationsUrl
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "title"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "summary"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "text"
                            (Json.Decode.oneOf
                                [ Json.Decode.map Present Json.Decode.string
                                , Json.Decode.null Null
                                ]
                            )
                        )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "annotations_count" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "annotations_url" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "check_suite"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.succeed (\id -> { id = id })
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "id" Json.Decode.int)
                        )
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "pull_requests"
                (Json.Decode.list decodePullRequestMinimal)
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deployment" decodeDeploymentSimple)


encodeCheckRun : CheckRun -> Json.Encode.Value
encodeCheckRun rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "head_sha", Json.Encode.string rec.headSha )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "external_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.externalId
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "html_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.htmlUrl
          )
        , ( "details_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.detailsUrl
          )
        , ( "status", Json.Encode.string rec.status )
        , ( "conclusion"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.conclusion
          )
        , ( "started_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.startedAt
          )
        , ( "completed_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.completedAt
          )
        , ( "output"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "title"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.title
                      )
                    , ( "summary"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.summary
                      )
                    , ( "text"
                      , (\nullableValue ->
                            case nullableValue of
                                Null ->
                                    Json.Encode.null

                                Present value ->
                                    Json.Encode.string value
                        )
                            rec0.text
                      )
                    , ( "annotations_count"
                      , Json.Encode.int rec0.annotationsCount
                      )
                    , ( "annotations_url"
                      , Json.Encode.string rec0.annotationsUrl
                      )
                    ]
            )
                rec.output
          )
        , ( "name", Json.Encode.string rec.name )
        , ( "check_suite"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        (\rec0 ->
                            Json.Encode.object
                                [ ( "id", Json.Encode.int rec0.id ) ]
                        )
                            value
            )
                rec.checkSuite
          )
        , ( "app", Debug.todo "decode anyOf" rec.app )
        , ( "pull_requests"
          , Json.Encode.list encodePullRequestMinimal rec.pullRequests
          )
        , ( "deployment", encodeDeploymentSimple rec.deployment )
        ]


type alias CheckAnnotation =
    { path : String
    , startLine : Int
    , endLine : Int
    , startColumn : Nullable Int
    , endColumn : Nullable Int
    , annotationLevel : Nullable String
    , title : Nullable String
    , message : Nullable String
    , rawDetails : Nullable String
    , blobHref : String
    }


decodeCheckAnnotation : Json.Decode.Decoder CheckAnnotation
decodeCheckAnnotation =
    Json.Decode.succeed
     (\path startLine endLine startColumn endColumn annotationLevel title message rawDetails blobHref ->
         { path = path
         , startLine = startLine
         , endLine = endLine
         , startColumn = startColumn
         , endColumn = endColumn
         , annotationLevel = annotationLevel
         , title = title
         , message = message
         , rawDetails = rawDetails
         , blobHref = blobHref
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "path" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "start_line" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "end_line" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "start_column"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "end_column"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "annotation_level"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "title"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "message"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "raw_details"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "blob_href" Json.Decode.string)


encodeCheckAnnotation : CheckAnnotation -> Json.Encode.Value
encodeCheckAnnotation rec =
    Json.Encode.object
        [ ( "path", Json.Encode.string rec.path )
        , ( "start_line", Json.Encode.int rec.startLine )
        , ( "end_line", Json.Encode.int rec.endLine )
        , ( "start_column"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.startColumn
          )
        , ( "end_column"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.endColumn
          )
        , ( "annotation_level"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.annotationLevel
          )
        , ( "title"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.title
          )
        , ( "message"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.message
          )
        , ( "raw_details"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.rawDetails
          )
        , ( "blob_href", Json.Encode.string rec.blobHref )
        ]


type alias BranchWithProtection =
    { name : String
    , commit : Commit
    , links : { html : String, self : String }
    , protected : Bool
    , protection : BranchProtection
    , protectionUrl : String
    , pattern : String
    , requiredApprovingReviewCount : Int
    }


decodeBranchWithProtection : Json.Decode.Decoder BranchWithProtection
decodeBranchWithProtection =
    Json.Decode.succeed
     (\name commit links protected protection protectionUrl pattern requiredApprovingReviewCount ->
         { name = name
         , commit = commit
         , links = links
         , protected = protected
         , protection = protection
         , protectionUrl = protectionUrl
         , pattern = pattern
         , requiredApprovingReviewCount = requiredApprovingReviewCount
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "commit" decodeCommit)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "_links"
                (Json.Decode.succeed
                  (\html self -> { html = html, self = self })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "html" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "self" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "protected" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "protection" decodeBranchProtection)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "protection_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pattern" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "required_approving_review_count" Json.Decode.int
            )


encodeBranchWithProtection : BranchWithProtection -> Json.Encode.Value
encodeBranchWithProtection rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "commit", encodeCommit rec.commit )
        , ( "_links"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "html", Json.Encode.string rec0.html )
                    , ( "self", Json.Encode.string rec0.self )
                    ]
            )
                rec.links
          )
        , ( "protected", Json.Encode.bool rec.protected )
        , ( "protection", encodeBranchProtection rec.protection )
        , ( "protection_url", Json.Encode.string rec.protectionUrl )
        , ( "pattern", Json.Encode.string rec.pattern )
        , ( "required_approving_review_count"
          , Json.Encode.int rec.requiredApprovingReviewCount
          )
        ]


type alias BranchShort =
    { name : String, commit : { sha : String, url : String }, protected : Bool }


decodeBranchShort : Json.Decode.Decoder BranchShort
decodeBranchShort =
    Json.Decode.succeed
     (\name commit protected ->
         { name = name, commit = commit, protected = protected }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit"
                (Json.Decode.succeed (\sha url -> { sha = sha, url = url })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "sha" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "protected" Json.Decode.bool)


encodeBranchShort : BranchShort -> Json.Encode.Value
encodeBranchShort rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "commit"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "sha", Json.Encode.string rec0.sha )
                    , ( "url", Json.Encode.string rec0.url )
                    ]
            )
                rec.commit
          )
        , ( "protected", Json.Encode.bool rec.protected )
        ]


type alias BranchRestrictionPolicy =
    { url : String
    , usersUrl : String
    , teamsUrl : String
    , appsUrl : String
    , users :
        List { login : String
        , id : Int
        , nodeId : String
        , avatarUrl : String
        , gravatarId : String
        , url : String
        , htmlUrl : String
        , followersUrl : String
        , followingUrl : String
        , gistsUrl : String
        , starredUrl : String
        , subscriptionsUrl : String
        , organizationsUrl : String
        , reposUrl : String
        , eventsUrl : String
        , receivedEventsUrl : String
        , type_ : String
        , siteAdmin : Bool
        }
    , teams :
        List { id : Int
        , nodeId : String
        , url : String
        , htmlUrl : String
        , name : String
        , slug : String
        , description : Nullable String
        , privacy : String
        , permission : String
        , membersUrl : String
        , repositoriesUrl : String
        , parent : Nullable String
        }
    , apps :
        List { id : Int
        , slug : String
        , nodeId : String
        , owner :
            { login : String
            , id : Int
            , nodeId : String
            , url : String
            , reposUrl : String
            , eventsUrl : String
            , hooksUrl : String
            , issuesUrl : String
            , membersUrl : String
            , publicMembersUrl : String
            , avatarUrl : String
            , description : String
            , gravatarId : String
            , htmlUrl : String
            , followersUrl : String
            , followingUrl : String
            , gistsUrl : String
            , starredUrl : String
            , subscriptionsUrl : String
            , organizationsUrl : String
            , receivedEventsUrl : String
            , type_ : String
            , siteAdmin : Bool
            }
        , name : String
        , description : String
        , externalUrl : String
        , htmlUrl : String
        , createdAt : String
        , updatedAt : String
        , permissions :
            { metadata : String
            , contents : String
            , issues : String
            , singleFile : String
            }
        , events : List String
        }
    }


decodeBranchRestrictionPolicy : Json.Decode.Decoder BranchRestrictionPolicy
decodeBranchRestrictionPolicy =
    Json.Decode.succeed
     (\url usersUrl teamsUrl appsUrl users teams apps ->
         { url = url
         , usersUrl = usersUrl
         , teamsUrl = teamsUrl
         , appsUrl = appsUrl
         , users = users
         , teams = teams
         , apps = apps
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "users_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "teams_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "apps_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "users"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\login id nodeId avatarUrl gravatarId url htmlUrl followersUrl followingUrl gistsUrl starredUrl subscriptionsUrl organizationsUrl reposUrl eventsUrl receivedEventsUrl type_ siteAdmin ->
                          { login = login
                          , id = id
                          , nodeId = nodeId
                          , avatarUrl = avatarUrl
                          , gravatarId = gravatarId
                          , url = url
                          , htmlUrl = htmlUrl
                          , followersUrl = followersUrl
                          , followingUrl = followingUrl
                          , gistsUrl = gistsUrl
                          , starredUrl = starredUrl
                          , subscriptionsUrl = subscriptionsUrl
                          , organizationsUrl = organizationsUrl
                          , reposUrl = reposUrl
                          , eventsUrl = eventsUrl
                          , receivedEventsUrl = receivedEventsUrl
                          , type_ = type_
                          , siteAdmin = siteAdmin
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "login" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "id" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "node_id" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "avatar_url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "gravatar_id" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "html_url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "followers_url"
                                Json.Decode.string
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "following_url"
                                Json.Decode.string
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "gists_url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "starred_url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "subscriptions_url"
                                Json.Decode.string
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "organizations_url"
                                Json.Decode.string
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "repos_url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "events_url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "received_events_url"
                                Json.Decode.string
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "type" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "site_admin" Json.Decode.bool)
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "teams"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\id nodeId url htmlUrl name slug description privacy permission membersUrl repositoriesUrl parent ->
                          { id = id
                          , nodeId = nodeId
                          , url = url
                          , htmlUrl = htmlUrl
                          , name = name
                          , slug = slug
                          , description = description
                          , privacy = privacy
                          , permission = permission
                          , membersUrl = membersUrl
                          , repositoriesUrl = repositoriesUrl
                          , parent = parent
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "id" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "node_id" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "html_url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "name" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "slug" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "description"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "privacy" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "permission" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "members_url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "repositories_url"
                                Json.Decode.string
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "parent"
                                (Json.Decode.oneOf
                                    [ Json.Decode.map Present Json.Decode.string
                                    , Json.Decode.null Null
                                    ]
                                )
                            )
                    )
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "apps"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\id slug nodeId owner name description externalUrl htmlUrl createdAt updatedAt permissions events ->
                          { id = id
                          , slug = slug
                          , nodeId = nodeId
                          , owner = owner
                          , name = name
                          , description = description
                          , externalUrl = externalUrl
                          , htmlUrl = htmlUrl
                          , createdAt = createdAt
                          , updatedAt = updatedAt
                          , permissions = permissions
                          , events = events
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "id" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "slug" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "node_id" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "owner"
                                (Json.Decode.succeed
                                  (\login id nodeId url reposUrl eventsUrl hooksUrl issuesUrl membersUrl publicMembersUrl avatarUrl description gravatarId htmlUrl followersUrl followingUrl gistsUrl starredUrl subscriptionsUrl organizationsUrl receivedEventsUrl type_ siteAdmin ->
                                      { login = login
                                      , id = id
                                      , nodeId = nodeId
                                      , url = url
                                      , reposUrl = reposUrl
                                      , eventsUrl = eventsUrl
                                      , hooksUrl = hooksUrl
                                      , issuesUrl = issuesUrl
                                      , membersUrl = membersUrl
                                      , publicMembersUrl = publicMembersUrl
                                      , avatarUrl = avatarUrl
                                      , description = description
                                      , gravatarId = gravatarId
                                      , htmlUrl = htmlUrl
                                      , followersUrl = followersUrl
                                      , followingUrl = followingUrl
                                      , gistsUrl = gistsUrl
                                      , starredUrl = starredUrl
                                      , subscriptionsUrl = subscriptionsUrl
                                      , organizationsUrl = organizationsUrl
                                      , receivedEventsUrl = receivedEventsUrl
                                      , type_ = type_
                                      , siteAdmin = siteAdmin
                                      }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "login"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field "id" Json.Decode.int)
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "node_id"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "repos_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "events_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "hooks_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "issues_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "members_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "public_members_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "avatar_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "description"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "gravatar_id"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "html_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "followers_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "following_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "gists_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "starred_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "subscriptions_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "organizations_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "received_events_url"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "type"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "site_admin"
                                            Json.Decode.bool
                                        )
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "name" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "description" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "external_url" Json.Decode.string
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "html_url" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "created_at" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "updated_at" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "permissions"
                                (Json.Decode.succeed
                                  (\metadata contents issues singleFile ->
                                      { metadata = metadata
                                      , contents = contents
                                      , issues = issues
                                      , singleFile = singleFile
                                      }
                                  )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "metadata"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "contents"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "issues"
                                            Json.Decode.string
                                        )
                                    |> Json.Decode.Extra.andMap
                                        (Json.Decode.field
                                            "single_file"
                                            Json.Decode.string
                                        )
                                )
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "events"
                                (Json.Decode.list Json.Decode.string)
                            )
                    )
                )
            )


encodeBranchRestrictionPolicy : BranchRestrictionPolicy -> Json.Encode.Value
encodeBranchRestrictionPolicy rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "users_url", Json.Encode.string rec.usersUrl )
        , ( "teams_url", Json.Encode.string rec.teamsUrl )
        , ( "apps_url", Json.Encode.string rec.appsUrl )
        , ( "users"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "login", Json.Encode.string rec0.login )
                        , ( "id", Json.Encode.int rec0.id )
                        , ( "node_id", Json.Encode.string rec0.nodeId )
                        , ( "avatar_url", Json.Encode.string rec0.avatarUrl )
                        , ( "gravatar_id", Json.Encode.string rec0.gravatarId )
                        , ( "url", Json.Encode.string rec0.url )
                        , ( "html_url", Json.Encode.string rec0.htmlUrl )
                        , ( "followers_url"
                          , Json.Encode.string rec0.followersUrl
                          )
                        , ( "following_url"
                          , Json.Encode.string rec0.followingUrl
                          )
                        , ( "gists_url", Json.Encode.string rec0.gistsUrl )
                        , ( "starred_url", Json.Encode.string rec0.starredUrl )
                        , ( "subscriptions_url"
                          , Json.Encode.string rec0.subscriptionsUrl
                          )
                        , ( "organizations_url"
                          , Json.Encode.string rec0.organizationsUrl
                          )
                        , ( "repos_url", Json.Encode.string rec0.reposUrl )
                        , ( "events_url", Json.Encode.string rec0.eventsUrl )
                        , ( "received_events_url"
                          , Json.Encode.string rec0.receivedEventsUrl
                          )
                        , ( "type", Json.Encode.string rec0.type_ )
                        , ( "site_admin", Json.Encode.bool rec0.siteAdmin )
                        ]
                )
                rec.users
          )
        , ( "teams"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "id", Json.Encode.int rec0.id )
                        , ( "node_id", Json.Encode.string rec0.nodeId )
                        , ( "url", Json.Encode.string rec0.url )
                        , ( "html_url", Json.Encode.string rec0.htmlUrl )
                        , ( "name", Json.Encode.string rec0.name )
                        , ( "slug", Json.Encode.string rec0.slug )
                        , ( "description"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.string value
                            )
                                rec0.description
                          )
                        , ( "privacy", Json.Encode.string rec0.privacy )
                        , ( "permission", Json.Encode.string rec0.permission )
                        , ( "members_url", Json.Encode.string rec0.membersUrl )
                        , ( "repositories_url"
                          , Json.Encode.string rec0.repositoriesUrl
                          )
                        , ( "parent"
                          , (\nullableValue ->
                                case nullableValue of
                                    Null ->
                                        Json.Encode.null

                                    Present value ->
                                        Json.Encode.string value
                            )
                                rec0.parent
                          )
                        ]
                )
                rec.teams
          )
        , ( "apps"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "id", Json.Encode.int rec0.id )
                        , ( "slug", Json.Encode.string rec0.slug )
                        , ( "node_id", Json.Encode.string rec0.nodeId )
                        , ( "owner"
                          , (\rec_0_4_1_1_1_0_7_1_0_0 ->
                                Json.Encode.object
                                    [ ( "login"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.login
                                      )
                                    , ( "id"
                                      , Json.Encode.int
                                            rec_0_4_1_1_1_0_7_1_0_0.id
                                      )
                                    , ( "node_id"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.nodeId
                                      )
                                    , ( "url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.url
                                      )
                                    , ( "repos_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.reposUrl
                                      )
                                    , ( "events_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.eventsUrl
                                      )
                                    , ( "hooks_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.hooksUrl
                                      )
                                    , ( "issues_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.issuesUrl
                                      )
                                    , ( "members_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.membersUrl
                                      )
                                    , ( "public_members_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.publicMembersUrl
                                      )
                                    , ( "avatar_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.avatarUrl
                                      )
                                    , ( "description"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.description
                                      )
                                    , ( "gravatar_id"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.gravatarId
                                      )
                                    , ( "html_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.htmlUrl
                                      )
                                    , ( "followers_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.followersUrl
                                      )
                                    , ( "following_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.followingUrl
                                      )
                                    , ( "gists_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.gistsUrl
                                      )
                                    , ( "starred_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.starredUrl
                                      )
                                    , ( "subscriptions_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.subscriptionsUrl
                                      )
                                    , ( "organizations_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.organizationsUrl
                                      )
                                    , ( "received_events_url"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.receivedEventsUrl
                                      )
                                    , ( "type"
                                      , Json.Encode.string
                                            rec_0_4_1_1_1_0_7_1_0_0.type_
                                      )
                                    , ( "site_admin"
                                      , Json.Encode.bool
                                            rec_0_4_1_1_1_0_7_1_0_0.siteAdmin
                                      )
                                    ]
                            )
                                rec0.owner
                          )
                        , ( "name", Json.Encode.string rec0.name )
                        , ( "description", Json.Encode.string rec0.description )
                        , ( "external_url"
                          , Json.Encode.string rec0.externalUrl
                          )
                        , ( "html_url", Json.Encode.string rec0.htmlUrl )
                        , ( "created_at", Json.Encode.string rec0.createdAt )
                        , ( "updated_at", Json.Encode.string rec0.updatedAt )
                        , ( "permissions"
                          , (\rec_0_11_1_1_1_0_7_1_0_0 ->
                                Json.Encode.object
                                    [ ( "metadata"
                                      , Json.Encode.string
                                            rec_0_11_1_1_1_0_7_1_0_0.metadata
                                      )
                                    , ( "contents"
                                      , Json.Encode.string
                                            rec_0_11_1_1_1_0_7_1_0_0.contents
                                      )
                                    , ( "issues"
                                      , Json.Encode.string
                                            rec_0_11_1_1_1_0_7_1_0_0.issues
                                      )
                                    , ( "single_file"
                                      , Json.Encode.string
                                            rec_0_11_1_1_1_0_7_1_0_0.singleFile
                                      )
                                    ]
                            )
                                rec0.permissions
                          )
                        , ( "events"
                          , Json.Encode.list Json.Encode.string rec0.events
                          )
                        ]
                )
                rec.apps
          )
        ]


type alias BranchProtection =
    { url : String
    , enabled : Bool
    , requiredStatusChecks : ProtectedBranchRequiredStatusCheck
    , enforceAdmins : ProtectedBranchAdminEnforced
    , requiredPullRequestReviews : ProtectedBranchPullRequestReview
    , restrictions : BranchRestrictionPolicy
    , requiredLinearHistory : { enabled : Bool }
    , allowForcePushes : { enabled : Bool }
    , allowDeletions : { enabled : Bool }
    , blockCreations : { enabled : Bool }
    , requiredConversationResolution : { enabled : Bool }
    , name : String
    , protectionUrl : String
    , requiredSignatures : { url : String, enabled : Bool }
    }


decodeBranchProtection : Json.Decode.Decoder BranchProtection
decodeBranchProtection =
    Json.Decode.succeed
     (\url enabled requiredStatusChecks enforceAdmins requiredPullRequestReviews restrictions requiredLinearHistory allowForcePushes allowDeletions blockCreations requiredConversationResolution name protectionUrl requiredSignatures ->
         { url = url
         , enabled = enabled
         , requiredStatusChecks = requiredStatusChecks
         , enforceAdmins = enforceAdmins
         , requiredPullRequestReviews = requiredPullRequestReviews
         , restrictions = restrictions
         , requiredLinearHistory = requiredLinearHistory
         , allowForcePushes = allowForcePushes
         , allowDeletions = allowDeletions
         , blockCreations = blockCreations
         , requiredConversationResolution = requiredConversationResolution
         , name = name
         , protectionUrl = protectionUrl
         , requiredSignatures = requiredSignatures
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "enabled" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "required_status_checks"
                decodeProtectedBranchRequiredStatusCheck
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "enforce_admins"
                decodeProtectedBranchAdminEnforced
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "required_pull_request_reviews"
                decodeProtectedBranchPullRequestReview
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "restrictions" decodeBranchRestrictionPolicy)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "required_linear_history"
                (Json.Decode.succeed (\enabled -> { enabled = enabled })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enabled" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "allow_force_pushes"
                (Json.Decode.succeed (\enabled -> { enabled = enabled })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enabled" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "allow_deletions"
                (Json.Decode.succeed (\enabled -> { enabled = enabled })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enabled" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "block_creations"
                (Json.Decode.succeed (\enabled -> { enabled = enabled })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enabled" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "required_conversation_resolution"
                (Json.Decode.succeed (\enabled -> { enabled = enabled })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enabled" Json.Decode.bool)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "protection_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "required_signatures"
                (Json.Decode.succeed
                  (\url enabled -> { url = url, enabled = enabled })
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "enabled" Json.Decode.bool)
                )
            )


encodeBranchProtection : BranchProtection -> Json.Encode.Value
encodeBranchProtection rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "enabled", Json.Encode.bool rec.enabled )
        , ( "required_status_checks"
          , encodeProtectedBranchRequiredStatusCheck rec.requiredStatusChecks
          )
        , ( "enforce_admins"
          , encodeProtectedBranchAdminEnforced rec.enforceAdmins
          )
        , ( "required_pull_request_reviews"
          , encodeProtectedBranchPullRequestReview
                rec.requiredPullRequestReviews
          )
        , ( "restrictions", encodeBranchRestrictionPolicy rec.restrictions )
        , ( "required_linear_history"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "enabled", Json.Encode.bool rec0.enabled ) ]
            )
                rec.requiredLinearHistory
          )
        , ( "allow_force_pushes"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "enabled", Json.Encode.bool rec0.enabled ) ]
            )
                rec.allowForcePushes
          )
        , ( "allow_deletions"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "enabled", Json.Encode.bool rec0.enabled ) ]
            )
                rec.allowDeletions
          )
        , ( "block_creations"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "enabled", Json.Encode.bool rec0.enabled ) ]
            )
                rec.blockCreations
          )
        , ( "required_conversation_resolution"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "enabled", Json.Encode.bool rec0.enabled ) ]
            )
                rec.requiredConversationResolution
          )
        , ( "name", Json.Encode.string rec.name )
        , ( "protection_url", Json.Encode.string rec.protectionUrl )
        , ( "required_signatures"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "url", Json.Encode.string rec0.url )
                    , ( "enabled", Json.Encode.bool rec0.enabled )
                    ]
            )
                rec.requiredSignatures
          )
        ]


type alias Blob =
    { content : String
    , encoding : String
    , url : String
    , sha : String
    , size : Nullable Int
    , nodeId : String
    , highlightedContent : String
    }


decodeBlob : Json.Decode.Decoder Blob
decodeBlob =
    Json.Decode.succeed
     (\content encoding url sha size nodeId highlightedContent ->
         { content = content
         , encoding = encoding
         , url = url
         , sha = sha
         , size = size
         , nodeId = nodeId
         , highlightedContent = highlightedContent
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "content" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "encoding" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "sha" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "size"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.int
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "highlighted_content" Json.Decode.string)


encodeBlob : Blob -> Json.Encode.Value
encodeBlob rec =
    Json.Encode.object
        [ ( "content", Json.Encode.string rec.content )
        , ( "encoding", Json.Encode.string rec.encoding )
        , ( "url", Json.Encode.string rec.url )
        , ( "sha", Json.Encode.string rec.sha )
        , ( "size"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.int value
            )
                rec.size
          )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "highlighted_content", Json.Encode.string rec.highlightedContent )
        ]


type alias BasicError =
    { message : String
    , documentationUrl : String
    , url : String
    , status : String
    }


decodeBasicError : Json.Decode.Decoder BasicError
decodeBasicError =
    Json.Decode.succeed
     (\message documentationUrl url status ->
         { message = message
         , documentationUrl = documentationUrl
         , url = url
         , status = status
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "message" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "documentation_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "status" Json.Decode.string)


encodeBasicError : BasicError -> Json.Encode.Value
encodeBasicError rec =
    Json.Encode.object
        [ ( "message", Json.Encode.string rec.message )
        , ( "documentation_url", Json.Encode.string rec.documentationUrl )
        , ( "url", Json.Encode.string rec.url )
        , ( "status", Json.Encode.string rec.status )
        ]


type alias BaseGist =
    { url : String
    , forksUrl : String
    , commitsUrl : String
    , id : String
    , nodeId : String
    , gitPullUrl : String
    , gitPushUrl : String
    , htmlUrl : String
    , files : {}
    , public : Bool
    , createdAt : String
    , updatedAt : String
    , description : Nullable String
    , comments : Int
    , user : Debug.Todo
    , commentsUrl : String
    , owner : SimpleUser
    , truncated : Bool
    , forks : List Json.Encode.Value
    , history : List Json.Encode.Value
    }


decodeBaseGist : Json.Decode.Decoder BaseGist
decodeBaseGist =
    Json.Decode.succeed
     (\url forksUrl commitsUrl id nodeId gitPullUrl gitPushUrl htmlUrl files public createdAt updatedAt description comments user commentsUrl owner truncated forks history ->
         { url = url
         , forksUrl = forksUrl
         , commitsUrl = commitsUrl
         , id = id
         , nodeId = nodeId
         , gitPullUrl = gitPullUrl
         , gitPushUrl = gitPushUrl
         , htmlUrl = htmlUrl
         , files = files
         , public = public
         , createdAt = createdAt
         , updatedAt = updatedAt
         , description = description
         , comments = comments
         , user = user
         , commentsUrl = commentsUrl
         , owner = owner
         , truncated = truncated
         , forks = forks
         , history = history
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "commits_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_pull_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git_push_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "html_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "files" (Json.Decode.succeed {}))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "public" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "description"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "comments_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "owner" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "truncated" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "forks" (Json.Decode.list Json.Decode.value))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "history" (Json.Decode.list Json.Decode.value))


encodeBaseGist : BaseGist -> Json.Encode.Value
encodeBaseGist rec =
    Json.Encode.object
        [ ( "url", Json.Encode.string rec.url )
        , ( "forks_url", Json.Encode.string rec.forksUrl )
        , ( "commits_url", Json.Encode.string rec.commitsUrl )
        , ( "id", Json.Encode.string rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "git_pull_url", Json.Encode.string rec.gitPullUrl )
        , ( "git_push_url", Json.Encode.string rec.gitPushUrl )
        , ( "html_url", Json.Encode.string rec.htmlUrl )
        , ( "files", (\rec0 -> Json.Encode.object []) rec.files )
        , ( "public", Json.Encode.bool rec.public )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "description"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.description
          )
        , ( "comments", Json.Encode.int rec.comments )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "comments_url", Json.Encode.string rec.commentsUrl )
        , ( "owner", encodeSimpleUser rec.owner )
        , ( "truncated", Json.Encode.bool rec.truncated )
        , ( "forks", Json.Encode.list Json.Decode.value rec.forks )
        , ( "history", Json.Encode.list Json.Decode.value rec.history )
        ]


type alias Autolink =
    { id : Int
    , keyPrefix : String
    , urlTemplate : String
    , isAlphanumeric : Bool
    }


decodeAutolink : Json.Decode.Decoder Autolink
decodeAutolink =
    Json.Decode.succeed
     (\id keyPrefix urlTemplate isAlphanumeric ->
         { id = id
         , keyPrefix = keyPrefix
         , urlTemplate = urlTemplate
         , isAlphanumeric = isAlphanumeric
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "key_prefix" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "url_template" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "is_alphanumeric" Json.Decode.bool)


encodeAutolink : Autolink -> Json.Encode.Value
encodeAutolink rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "key_prefix", Json.Encode.string rec.keyPrefix )
        , ( "url_template", Json.Encode.string rec.urlTemplate )
        , ( "is_alphanumeric", Json.Encode.bool rec.isAlphanumeric )
        ]


type alias AutoMerge =
    Nullable { enabledBy : SimpleUser
    , mergeMethod : String
    , commitTitle : String
    , commitMessage : String
    }


decodeAutoMerge : Json.Decode.Decoder AutoMerge
decodeAutoMerge =
    Json.Decode.oneOf
        [ Json.Decode.map
            Present
            (Json.Decode.succeed
              (\enabledBy mergeMethod commitTitle commitMessage ->
                  { enabledBy = enabledBy
                  , mergeMethod = mergeMethod
                  , commitTitle = commitTitle
                  , commitMessage = commitMessage
                  }
              )
                |> Json.Decode.Extra.andMap
                    (Json.Decode.field "enabled_by" decodeSimpleUser)
                |> Json.Decode.Extra.andMap
                    (Json.Decode.field "merge_method" Json.Decode.string)
                |> Json.Decode.Extra.andMap
                    (Json.Decode.field "commit_title" Json.Decode.string)
                |> Json.Decode.Extra.andMap
                    (Json.Decode.field "commit_message" Json.Decode.string)
            )
        , Json.Decode.null Null
        ]


encodeAutoMerge : AutoMerge -> Json.Encode.Value
encodeAutoMerge nullableValue =
    case nullableValue of
        Null ->
            Json.Encode.null

        Present value ->
            (\rec ->
                Json.Encode.object
                    [ ( "enabled_by", encodeSimpleUser rec.enabledBy )
                    , ( "merge_method", Json.Encode.string rec.mergeMethod )
                    , ( "commit_title", Json.Encode.string rec.commitTitle )
                    , ( "commit_message", Json.Encode.string rec.commitMessage )
                    ]
            )
                value


type alias Authorization =
    { id : Int
    , url : String
    , scopes : Nullable (List String)
    , token : String
    , tokenLastEight : Nullable String
    , hashedToken : Nullable String
    , app : { clientId : String, name : String, url : String }
    , note : Nullable String
    , noteUrl : Nullable String
    , updatedAt : String
    , createdAt : String
    , fingerprint : Nullable String
    , user : Debug.Todo
    , installation : Debug.Todo
    , expiresAt : Nullable String
    }


decodeAuthorization : Json.Decode.Decoder Authorization
decodeAuthorization =
    Json.Decode.succeed
     (\id url scopes token tokenLastEight hashedToken app note noteUrl updatedAt createdAt fingerprint user installation expiresAt ->
         { id = id
         , url = url
         , scopes = scopes
         , token = token
         , tokenLastEight = tokenLastEight
         , hashedToken = hashedToken
         , app = app
         , note = note
         , noteUrl = noteUrl
         , updatedAt = updatedAt
         , createdAt = createdAt
         , fingerprint = fingerprint
         , user = user
         , installation = installation
         , expiresAt = expiresAt
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "scopes"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.list Json.Decode.string)
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "token" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "token_last_eight"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "hashed_token"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "app"
                (Json.Decode.succeed
                  (\clientId name url ->
                      { clientId = clientId, name = name, url = url }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "client_id" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "note"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "note_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "fingerprint"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "user"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeSimpleUser
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "installation"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeScopedInstallation
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "expires_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )


encodeAuthorization : Authorization -> Json.Encode.Value
encodeAuthorization rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "url", Json.Encode.string rec.url )
        , ( "scopes"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.list Json.Encode.string value
            )
                rec.scopes
          )
        , ( "token", Json.Encode.string rec.token )
        , ( "token_last_eight"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.tokenLastEight
          )
        , ( "hashed_token"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.hashedToken
          )
        , ( "app"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "client_id", Json.Encode.string rec0.clientId )
                    , ( "name", Json.Encode.string rec0.name )
                    , ( "url", Json.Encode.string rec0.url )
                    ]
            )
                rec.app
          )
        , ( "note"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.note
          )
        , ( "note_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.noteUrl
          )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "fingerprint"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.fingerprint
          )
        , ( "user", Debug.todo "decode anyOf" rec.user )
        , ( "installation", Debug.todo "decode anyOf" rec.installation )
        , ( "expires_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.expiresAt
          )
        ]


type alias AuthorAssociation =
    String


decodeAuthorAssociation : Json.Decode.Decoder AuthorAssociation
decodeAuthorAssociation =
    Json.Decode.string


encodeAuthorAssociation : AuthorAssociation -> Json.Encode.Value
encodeAuthorAssociation =
    Json.Encode.string


type alias AuthenticationToken =
    { token : String
    , expiresAt : String
    , permissions : {}
    , repositories : List Repository
    , singleFile : Nullable String
    , repositorySelection : String
    }


decodeAuthenticationToken : Json.Decode.Decoder AuthenticationToken
decodeAuthenticationToken =
    Json.Decode.succeed
     (\token expiresAt permissions repositories singleFile repositorySelection ->
         { token = token
         , expiresAt = expiresAt
         , permissions = permissions
         , repositories = repositories
         , singleFile = singleFile
         , repositorySelection = repositorySelection
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "token" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "expires_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "permissions" (Json.Decode.succeed {}))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "repositories"
                (Json.Decode.list decodeRepository)
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "single_file"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_selection" Json.Decode.string)


encodeAuthenticationToken : AuthenticationToken -> Json.Encode.Value
encodeAuthenticationToken rec =
    Json.Encode.object
        [ ( "token", Json.Encode.string rec.token )
        , ( "expires_at", Json.Encode.string rec.expiresAt )
        , ( "permissions", (\rec0 -> Json.Encode.object []) rec.permissions )
        , ( "repositories", Json.Encode.list encodeRepository rec.repositories )
        , ( "single_file"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.singleFile
          )
        , ( "repository_selection", Json.Encode.string rec.repositorySelection )
        ]


type alias AssignedIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Integration
    , assignee : SimpleUser
    , assigner : SimpleUser
    }


decodeAssignedIssueEvent : Json.Decode.Decoder AssignedIssueEvent
decodeAssignedIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp assignee assigner ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , assignee = assignee
         , assigner = assigner
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "performed_via_github_app" decodeIntegration)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assignee" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "assigner" decodeSimpleUser)


encodeAssignedIssueEvent : AssignedIssueEvent -> Json.Encode.Value
encodeAssignedIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , encodeIntegration rec.performedViaGithubApp
          )
        , ( "assignee", encodeSimpleUser rec.assignee )
        , ( "assigner", encodeSimpleUser rec.assigner )
        ]


type alias Artifact =
    { id : Int
    , nodeId : String
    , name : String
    , sizeInBytes : Int
    , url : String
    , archiveDownloadUrl : String
    , expired : Bool
    , createdAt : Nullable String
    , expiresAt : Nullable String
    , updatedAt : Nullable String
    , workflowRun :
        Nullable { id : Int
        , repositoryId : Int
        , headRepositoryId : Int
        , headBranch : String
        , headSha : String
        }
    }


decodeArtifact : Json.Decode.Decoder Artifact
decodeArtifact =
    Json.Decode.succeed
     (\id nodeId name sizeInBytes url archiveDownloadUrl expired createdAt expiresAt updatedAt workflowRun ->
         { id = id
         , nodeId = nodeId
         , name = name
         , sizeInBytes = sizeInBytes
         , url = url
         , archiveDownloadUrl = archiveDownloadUrl
         , expired = expired
         , createdAt = createdAt
         , expiresAt = expiresAt
         , updatedAt = updatedAt
         , workflowRun = workflowRun
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "size_in_bytes" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "archive_download_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "expired" Json.Decode.bool)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "created_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "expires_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "updated_at"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "workflow_run"
                (Json.Decode.oneOf
                    [ Json.Decode.map
                        Present
                        (Json.Decode.succeed
                          (\id repositoryId headRepositoryId headBranch headSha ->
                              { id = id
                              , repositoryId = repositoryId
                              , headRepositoryId = headRepositoryId
                              , headBranch = headBranch
                              , headSha = headSha
                              }
                          )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "id" Json.Decode.int)
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "repository_id"
                                    Json.Decode.int
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "head_repository_id"
                                    Json.Decode.int
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field
                                    "head_branch"
                                    Json.Decode.string
                                )
                            |> Json.Decode.Extra.andMap
                                (Json.Decode.field "head_sha" Json.Decode.string
                                )
                        )
                    , Json.Decode.null Null
                    ]
                )
            )


encodeArtifact : Artifact -> Json.Encode.Value
encodeArtifact rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "name", Json.Encode.string rec.name )
        , ( "size_in_bytes", Json.Encode.int rec.sizeInBytes )
        , ( "url", Json.Encode.string rec.url )
        , ( "archive_download_url", Json.Encode.string rec.archiveDownloadUrl )
        , ( "expired", Json.Encode.bool rec.expired )
        , ( "created_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.createdAt
          )
        , ( "expires_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.expiresAt
          )
        , ( "updated_at"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.updatedAt
          )
        , ( "workflow_run"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        (\rec0 ->
                            Json.Encode.object
                                [ ( "id", Json.Encode.int rec0.id )
                                , ( "repository_id"
                                  , Json.Encode.int rec0.repositoryId
                                  )
                                , ( "head_repository_id"
                                  , Json.Encode.int rec0.headRepositoryId
                                  )
                                , ( "head_branch"
                                  , Json.Encode.string rec0.headBranch
                                  )
                                , ( "head_sha"
                                  , Json.Encode.string rec0.headSha
                                  )
                                ]
                        )
                            value
            )
                rec.workflowRun
          )
        ]


type alias AppPermissions =
    { actions : String
    , administration : String
    , checks : String
    , contents : String
    , deployments : String
    , environments : String
    , issues : String
    , metadata : String
    , packages : String
    , pages : String
    , pullRequests : String
    , repositoryHooks : String
    , repositoryProjects : String
    , secretScanningAlerts : String
    , secrets : String
    , securityEvents : String
    , singleFile : String
    , statuses : String
    , vulnerabilityAlerts : String
    , workflows : String
    , members : String
    , organizationAdministration : String
    , organizationCustomRoles : String
    , organizationHooks : String
    , organizationPlan : String
    , organizationProjects : String
    , organizationPackages : String
    , organizationSecrets : String
    , organizationSelfHostedRunners : String
    , organizationUserBlocking : String
    , teamDiscussions : String
    }


decodeAppPermissions : Json.Decode.Decoder AppPermissions
decodeAppPermissions =
    Json.Decode.succeed
     (\actions administration checks contents deployments environments issues metadata packages pages pullRequests repositoryHooks repositoryProjects secretScanningAlerts secrets securityEvents singleFile statuses vulnerabilityAlerts workflows members organizationAdministration organizationCustomRoles organizationHooks organizationPlan organizationProjects organizationPackages organizationSecrets organizationSelfHostedRunners organizationUserBlocking teamDiscussions ->
         { actions = actions
         , administration = administration
         , checks = checks
         , contents = contents
         , deployments = deployments
         , environments = environments
         , issues = issues
         , metadata = metadata
         , packages = packages
         , pages = pages
         , pullRequests = pullRequests
         , repositoryHooks = repositoryHooks
         , repositoryProjects = repositoryProjects
         , secretScanningAlerts = secretScanningAlerts
         , secrets = secrets
         , securityEvents = securityEvents
         , singleFile = singleFile
         , statuses = statuses
         , vulnerabilityAlerts = vulnerabilityAlerts
         , workflows = workflows
         , members = members
         , organizationAdministration = organizationAdministration
         , organizationCustomRoles = organizationCustomRoles
         , organizationHooks = organizationHooks
         , organizationPlan = organizationPlan
         , organizationProjects = organizationProjects
         , organizationPackages = organizationPackages
         , organizationSecrets = organizationSecrets
         , organizationSelfHostedRunners = organizationSelfHostedRunners
         , organizationUserBlocking = organizationUserBlocking
         , teamDiscussions = teamDiscussions
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "actions" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "administration" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "checks" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "contents" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "deployments" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "environments" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "issues" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "metadata" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "packages" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pages" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pull_requests" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_hooks" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "repository_projects" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "secret_scanning_alerts" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "secrets" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "security_events" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "single_file" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "statuses" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "vulnerability_alerts" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "workflows" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "members" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_administration" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_custom_roles" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_hooks" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_plan" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_projects" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_packages" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_secrets" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "organization_self_hosted_runners"
                Json.Decode.string
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "organization_user_blocking" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "team_discussions" Json.Decode.string)


encodeAppPermissions : AppPermissions -> Json.Encode.Value
encodeAppPermissions rec =
    Json.Encode.object
        [ ( "actions", Json.Encode.string rec.actions )
        , ( "administration", Json.Encode.string rec.administration )
        , ( "checks", Json.Encode.string rec.checks )
        , ( "contents", Json.Encode.string rec.contents )
        , ( "deployments", Json.Encode.string rec.deployments )
        , ( "environments", Json.Encode.string rec.environments )
        , ( "issues", Json.Encode.string rec.issues )
        , ( "metadata", Json.Encode.string rec.metadata )
        , ( "packages", Json.Encode.string rec.packages )
        , ( "pages", Json.Encode.string rec.pages )
        , ( "pull_requests", Json.Encode.string rec.pullRequests )
        , ( "repository_hooks", Json.Encode.string rec.repositoryHooks )
        , ( "repository_projects", Json.Encode.string rec.repositoryProjects )
        , ( "secret_scanning_alerts"
          , Json.Encode.string rec.secretScanningAlerts
          )
        , ( "secrets", Json.Encode.string rec.secrets )
        , ( "security_events", Json.Encode.string rec.securityEvents )
        , ( "single_file", Json.Encode.string rec.singleFile )
        , ( "statuses", Json.Encode.string rec.statuses )
        , ( "vulnerability_alerts", Json.Encode.string rec.vulnerabilityAlerts )
        , ( "workflows", Json.Encode.string rec.workflows )
        , ( "members", Json.Encode.string rec.members )
        , ( "organization_administration"
          , Json.Encode.string rec.organizationAdministration
          )
        , ( "organization_custom_roles"
          , Json.Encode.string rec.organizationCustomRoles
          )
        , ( "organization_hooks", Json.Encode.string rec.organizationHooks )
        , ( "organization_plan", Json.Encode.string rec.organizationPlan )
        , ( "organization_projects"
          , Json.Encode.string rec.organizationProjects
          )
        , ( "organization_packages"
          , Json.Encode.string rec.organizationPackages
          )
        , ( "organization_secrets", Json.Encode.string rec.organizationSecrets )
        , ( "organization_self_hosted_runners"
          , Json.Encode.string rec.organizationSelfHostedRunners
          )
        , ( "organization_user_blocking"
          , Json.Encode.string rec.organizationUserBlocking
          )
        , ( "team_discussions", Json.Encode.string rec.teamDiscussions )
        ]


type alias ApiOverview =
    { verifiablePasswordAuthentication : Bool
    , sshKeyFingerprints :
        { sHA256RSA : String
        , sHA256DSA : String
        , sHA256ECDSA : String
        , sHA256ED25519 : String
        }
    , sshKeys : List String
    , hooks : List String
    , web : List String
    , api : List String
    , git : List String
    , packages : List String
    , pages : List String
    , importer : List String
    , actions : List String
    , dependabot : List String
    }


decodeApiOverview : Json.Decode.Decoder ApiOverview
decodeApiOverview =
    Json.Decode.succeed
     (\verifiablePasswordAuthentication sshKeyFingerprints sshKeys hooks web api git packages pages importer actions dependabot ->
         { verifiablePasswordAuthentication = verifiablePasswordAuthentication
         , sshKeyFingerprints = sshKeyFingerprints
         , sshKeys = sshKeys
         , hooks = hooks
         , web = web
         , api = api
         , git = git
         , packages = packages
         , pages = pages
         , importer = importer
         , actions = actions
         , dependabot = dependabot
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "verifiable_password_authentication"
                Json.Decode.bool
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "ssh_key_fingerprints"
                (Json.Decode.succeed
                  (\sHA256RSA sHA256DSA sHA256ECDSA sHA256ED25519 ->
                      { sHA256RSA = sHA256RSA
                      , sHA256DSA = sHA256DSA
                      , sHA256ECDSA = sHA256ECDSA
                      , sHA256ED25519 = sHA256ED25519
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "SHA256_RSA" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "SHA256_DSA" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "SHA256_ECDSA" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "SHA256_ED25519" Json.Decode.string)
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "ssh_keys" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "hooks" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "web" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "api" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "git" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "packages" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "pages" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "importer" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "actions" (Json.Decode.list Json.Decode.string))
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "dependabot"
                (Json.Decode.list Json.Decode.string)
            )


encodeApiOverview : ApiOverview -> Json.Encode.Value
encodeApiOverview rec =
    Json.Encode.object
        [ ( "verifiable_password_authentication"
          , Json.Encode.bool rec.verifiablePasswordAuthentication
          )
        , ( "ssh_key_fingerprints"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "SHA256_RSA", Json.Encode.string rec0.sHA256RSA )
                    , ( "SHA256_DSA", Json.Encode.string rec0.sHA256DSA )
                    , ( "SHA256_ECDSA", Json.Encode.string rec0.sHA256ECDSA )
                    , ( "SHA256_ED25519"
                      , Json.Encode.string rec0.sHA256ED25519
                      )
                    ]
            )
                rec.sshKeyFingerprints
          )
        , ( "ssh_keys", Json.Encode.list Json.Encode.string rec.sshKeys )
        , ( "hooks", Json.Encode.list Json.Encode.string rec.hooks )
        , ( "web", Json.Encode.list Json.Encode.string rec.web )
        , ( "api", Json.Encode.list Json.Encode.string rec.api )
        , ( "git", Json.Encode.list Json.Encode.string rec.git )
        , ( "packages", Json.Encode.list Json.Encode.string rec.packages )
        , ( "pages", Json.Encode.list Json.Encode.string rec.pages )
        , ( "importer", Json.Encode.list Json.Encode.string rec.importer )
        , ( "actions", Json.Encode.list Json.Encode.string rec.actions )
        , ( "dependabot", Json.Encode.list Json.Encode.string rec.dependabot )
        ]


type alias AllowedActions =
    String


decodeAllowedActions : Json.Decode.Decoder AllowedActions
decodeAllowedActions =
    Json.Decode.string


encodeAllowedActions : AllowedActions -> Json.Encode.Value
encodeAllowedActions =
    Json.Encode.string


type alias AlertUrl =
    String


decodeAlertUrl : Json.Decode.Decoder AlertUrl
decodeAlertUrl =
    Json.Decode.string


encodeAlertUrl : AlertUrl -> Json.Encode.Value
encodeAlertUrl =
    Json.Encode.string


type alias AlertUpdatedAt =
    String


decodeAlertUpdatedAt : Json.Decode.Decoder AlertUpdatedAt
decodeAlertUpdatedAt =
    Json.Decode.string


encodeAlertUpdatedAt : AlertUpdatedAt -> Json.Encode.Value
encodeAlertUpdatedAt =
    Json.Encode.string


type alias AlertNumber =
    Int


decodeAlertNumber : Json.Decode.Decoder AlertNumber
decodeAlertNumber =
    Json.Decode.int


encodeAlertNumber : AlertNumber -> Json.Encode.Value
encodeAlertNumber =
    Json.Encode.int


type alias AlertInstancesUrl =
    String


decodeAlertInstancesUrl : Json.Decode.Decoder AlertInstancesUrl
decodeAlertInstancesUrl =
    Json.Decode.string


encodeAlertInstancesUrl : AlertInstancesUrl -> Json.Encode.Value
encodeAlertInstancesUrl =
    Json.Encode.string


type alias AlertHtmlUrl =
    String


decodeAlertHtmlUrl : Json.Decode.Decoder AlertHtmlUrl
decodeAlertHtmlUrl =
    Json.Decode.string


encodeAlertHtmlUrl : AlertHtmlUrl -> Json.Encode.Value
encodeAlertHtmlUrl =
    Json.Encode.string


type alias AlertFixedAt =
    Nullable String


decodeAlertFixedAt : Json.Decode.Decoder AlertFixedAt
decodeAlertFixedAt =
    Json.Decode.oneOf
        [ Json.Decode.map Present Json.Decode.string, Json.Decode.null Null ]


encodeAlertFixedAt : AlertFixedAt -> Json.Encode.Value
encodeAlertFixedAt nullableValue =
    case nullableValue of
        Null ->
            Json.Encode.null

        Present value ->
            Json.Encode.string value


type alias AlertDismissedAt =
    Nullable String


decodeAlertDismissedAt : Json.Decode.Decoder AlertDismissedAt
decodeAlertDismissedAt =
    Json.Decode.oneOf
        [ Json.Decode.map Present Json.Decode.string, Json.Decode.null Null ]


encodeAlertDismissedAt : AlertDismissedAt -> Json.Encode.Value
encodeAlertDismissedAt nullableValue =
    case nullableValue of
        Null ->
            Json.Encode.null

        Present value ->
            Json.Encode.string value


type alias AlertCreatedAt =
    String


decodeAlertCreatedAt : Json.Decode.Decoder AlertCreatedAt
decodeAlertCreatedAt =
    Json.Decode.string


encodeAlertCreatedAt : AlertCreatedAt -> Json.Encode.Value
encodeAlertCreatedAt =
    Json.Encode.string


type alias AdvancedSecurityActiveCommittersUser =
    { userLogin : String, lastPushedDate : String }


decodeAdvancedSecurityActiveCommittersUser :
    Json.Decode.Decoder AdvancedSecurityActiveCommittersUser
decodeAdvancedSecurityActiveCommittersUser =
    Json.Decode.succeed
     (\userLogin lastPushedDate ->
         { userLogin = userLogin, lastPushedDate = lastPushedDate }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "user_login" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "last_pushed_date" Json.Decode.string)


encodeAdvancedSecurityActiveCommittersUser :
    AdvancedSecurityActiveCommittersUser -> Json.Encode.Value
encodeAdvancedSecurityActiveCommittersUser rec =
    Json.Encode.object
        [ ( "user_login", Json.Encode.string rec.userLogin )
        , ( "last_pushed_date", Json.Encode.string rec.lastPushedDate )
        ]


type alias AdvancedSecurityActiveCommittersRepository =
    { name : String
    , advancedSecurityCommitters : Int
    , advancedSecurityCommittersBreakdown :
        List AdvancedSecurityActiveCommittersUser
    }


decodeAdvancedSecurityActiveCommittersRepository :
    Json.Decode.Decoder AdvancedSecurityActiveCommittersRepository
decodeAdvancedSecurityActiveCommittersRepository =
    Json.Decode.succeed
     (\name advancedSecurityCommitters advancedSecurityCommittersBreakdown ->
         { name = name
         , advancedSecurityCommitters = advancedSecurityCommitters
         , advancedSecurityCommittersBreakdown =
             advancedSecurityCommittersBreakdown
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "advanced_security_committers" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "advanced_security_committers_breakdown"
                (Json.Decode.list decodeAdvancedSecurityActiveCommittersUser)
            )


encodeAdvancedSecurityActiveCommittersRepository :
    AdvancedSecurityActiveCommittersRepository -> Json.Encode.Value
encodeAdvancedSecurityActiveCommittersRepository rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "advanced_security_committers"
          , Json.Encode.int rec.advancedSecurityCommitters
          )
        , ( "advanced_security_committers_breakdown"
          , Json.Encode.list encodeAdvancedSecurityActiveCommittersUser
                rec.advancedSecurityCommittersBreakdown
          )
        ]


type alias AdvancedSecurityActiveCommitters =
    { totalAdvancedSecurityCommitters : Int
    , totalCount : Int
    , repositories : List AdvancedSecurityActiveCommittersRepository
    }


decodeAdvancedSecurityActiveCommitters :
    Json.Decode.Decoder AdvancedSecurityActiveCommitters
decodeAdvancedSecurityActiveCommitters =
    Json.Decode.succeed
     (\totalAdvancedSecurityCommitters totalCount repositories ->
         { totalAdvancedSecurityCommitters = totalAdvancedSecurityCommitters
         , totalCount = totalCount
         , repositories = repositories
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "total_advanced_security_committers"
                Json.Decode.int
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "total_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "repositories"
                (Json.Decode.list
                    decodeAdvancedSecurityActiveCommittersRepository
                )
            )


encodeAdvancedSecurityActiveCommitters :
    AdvancedSecurityActiveCommitters -> Json.Encode.Value
encodeAdvancedSecurityActiveCommitters rec =
    Json.Encode.object
        [ ( "total_advanced_security_committers"
          , Json.Encode.int rec.totalAdvancedSecurityCommitters
          )
        , ( "total_count", Json.Encode.int rec.totalCount )
        , ( "repositories"
          , Json.Encode.list encodeAdvancedSecurityActiveCommittersRepository
                rec.repositories
          )
        ]


type alias AddedToProjectIssueEvent =
    { id : Int
    , nodeId : String
    , url : String
    , actor : SimpleUser
    , event : String
    , commitId : Nullable String
    , commitUrl : Nullable String
    , createdAt : String
    , performedViaGithubApp : Debug.Todo
    , projectCard :
        { id : Int
        , url : String
        , projectId : Int
        , projectUrl : String
        , columnName : String
        , previousColumnName : String
        }
    }


decodeAddedToProjectIssueEvent : Json.Decode.Decoder AddedToProjectIssueEvent
decodeAddedToProjectIssueEvent =
    Json.Decode.succeed
     (\id nodeId url actor event commitId commitUrl createdAt performedViaGithubApp projectCard ->
         { id = id
         , nodeId = nodeId
         , url = url
         , actor = actor
         , event = event
         , commitId = commitId
         , commitUrl = commitUrl
         , createdAt = createdAt
         , performedViaGithubApp = performedViaGithubApp
         , projectCard = projectCard
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "node_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "actor" decodeSimpleUser)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "event" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "commit_url"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "performed_via_github_app"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present decodeIntegration
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "project_card"
                (Json.Decode.succeed
                  (\id url projectId projectUrl columnName previousColumnName ->
                      { id = id
                      , url = url
                      , projectId = projectId
                      , projectUrl = projectUrl
                      , columnName = columnName
                      , previousColumnName = previousColumnName
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "id" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "project_id" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "project_url" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "column_name" Json.Decode.string)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field
                            "previous_column_name"
                            Json.Decode.string
                        )
                )
            )


encodeAddedToProjectIssueEvent : AddedToProjectIssueEvent -> Json.Encode.Value
encodeAddedToProjectIssueEvent rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "node_id", Json.Encode.string rec.nodeId )
        , ( "url", Json.Encode.string rec.url )
        , ( "actor", encodeSimpleUser rec.actor )
        , ( "event", Json.Encode.string rec.event )
        , ( "commit_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitId
          )
        , ( "commit_url"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.commitUrl
          )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "performed_via_github_app"
          , Debug.todo "decode anyOf" rec.performedViaGithubApp
          )
        , ( "project_card"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "id", Json.Encode.int rec0.id )
                    , ( "url", Json.Encode.string rec0.url )
                    , ( "project_id", Json.Encode.int rec0.projectId )
                    , ( "project_url", Json.Encode.string rec0.projectUrl )
                    , ( "column_name", Json.Encode.string rec0.columnName )
                    , ( "previous_column_name"
                      , Json.Encode.string rec0.previousColumnName
                      )
                    ]
            )
                rec.projectCard
          )
        ]


type alias Actor =
    { id : Int
    , login : String
    , displayLogin : String
    , gravatarId : Nullable String
    , url : String
    , avatarUrl : String
    }


decodeActor : Json.Decode.Decoder Actor
decodeActor =
    Json.Decode.succeed
     (\id login displayLogin gravatarId url avatarUrl ->
         { id = id
         , login = login
         , displayLogin = displayLogin
         , gravatarId = gravatarId
         , url = url
         , avatarUrl = avatarUrl
         }
     )
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "login" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "display_login" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "gravatar_id"
                (Json.Decode.oneOf
                    [ Json.Decode.map Present Json.Decode.string
                    , Json.Decode.null Null
                    ]
                )
            )
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "avatar_url" Json.Decode.string)


encodeActor : Actor -> Json.Encode.Value
encodeActor rec =
    Json.Encode.object
        [ ( "id", Json.Encode.int rec.id )
        , ( "login", Json.Encode.string rec.login )
        , ( "display_login", Json.Encode.string rec.displayLogin )
        , ( "gravatar_id"
          , (\nullableValue ->
                case nullableValue of
                    Null ->
                        Json.Encode.null

                    Present value ->
                        Json.Encode.string value
            )
                rec.gravatarId
          )
        , ( "url", Json.Encode.string rec.url )
        , ( "avatar_url", Json.Encode.string rec.avatarUrl )
        ]


type alias ActionsWorkflowAccessToRepository =
    { accessLevel : String }


decodeActionsWorkflowAccessToRepository :
    Json.Decode.Decoder ActionsWorkflowAccessToRepository
decodeActionsWorkflowAccessToRepository =
    Json.Decode.succeed (\accessLevel -> { accessLevel = accessLevel })
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "access_level" Json.Decode.string)


encodeActionsWorkflowAccessToRepository :
    ActionsWorkflowAccessToRepository -> Json.Encode.Value
encodeActionsWorkflowAccessToRepository rec =
    Json.Encode.object
        [ ( "access_level", Json.Encode.string rec.accessLevel ) ]


type alias ActionsSetDefaultWorkflowPermissions =
    { defaultWorkflowPermissions : ActionsDefaultWorkflowPermissions
    , canApprovePullRequestReviews : ActionsCanApprovePullRequestReviews
    }


decodeActionsSetDefaultWorkflowPermissions :
    Json.Decode.Decoder ActionsSetDefaultWorkflowPermissions
decodeActionsSetDefaultWorkflowPermissions =
    Json.Decode.succeed
     (\defaultWorkflowPermissions canApprovePullRequestReviews ->
         { defaultWorkflowPermissions = defaultWorkflowPermissions
         , canApprovePullRequestReviews = canApprovePullRequestReviews
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "default_workflow_permissions"
                decodeActionsDefaultWorkflowPermissions
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "can_approve_pull_request_reviews"
                decodeActionsCanApprovePullRequestReviews
            )


encodeActionsSetDefaultWorkflowPermissions :
    ActionsSetDefaultWorkflowPermissions -> Json.Encode.Value
encodeActionsSetDefaultWorkflowPermissions rec =
    Json.Encode.object
        [ ( "default_workflow_permissions"
          , encodeActionsDefaultWorkflowPermissions
                rec.defaultWorkflowPermissions
          )
        , ( "can_approve_pull_request_reviews"
          , encodeActionsCanApprovePullRequestReviews
                rec.canApprovePullRequestReviews
          )
        ]


type alias ActionsSecret =
    { name : String, createdAt : String, updatedAt : String }


decodeActionsSecret : Json.Decode.Decoder ActionsSecret
decodeActionsSecret =
    Json.Decode.succeed
     (\name createdAt updatedAt ->
         { name = name, createdAt = createdAt, updatedAt = updatedAt }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "updated_at" Json.Decode.string)


encodeActionsSecret : ActionsSecret -> Json.Encode.Value
encodeActionsSecret rec =
    Json.Encode.object
        [ ( "name", Json.Encode.string rec.name )
        , ( "created_at", Json.Encode.string rec.createdAt )
        , ( "updated_at", Json.Encode.string rec.updatedAt )
        ]


type alias ActionsRepositoryPermissions =
    { enabled : ActionsEnabled
    , allowedActions : AllowedActions
    , selectedActionsUrl : SelectedActionsUrl
    }


decodeActionsRepositoryPermissions :
    Json.Decode.Decoder ActionsRepositoryPermissions
decodeActionsRepositoryPermissions =
    Json.Decode.succeed
     (\enabled allowedActions selectedActionsUrl ->
         { enabled = enabled
         , allowedActions = allowedActions
         , selectedActionsUrl = selectedActionsUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "enabled" decodeActionsEnabled)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allowed_actions" decodeAllowedActions)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "selected_actions_url" decodeSelectedActionsUrl)


encodeActionsRepositoryPermissions :
    ActionsRepositoryPermissions -> Json.Encode.Value
encodeActionsRepositoryPermissions rec =
    Json.Encode.object
        [ ( "enabled", encodeActionsEnabled rec.enabled )
        , ( "allowed_actions", encodeAllowedActions rec.allowedActions )
        , ( "selected_actions_url"
          , encodeSelectedActionsUrl rec.selectedActionsUrl
          )
        ]


type alias ActionsPublicKey =
    { keyId : String
    , key : String
    , id : Int
    , url : String
    , title : String
    , createdAt : String
    }


decodeActionsPublicKey : Json.Decode.Decoder ActionsPublicKey
decodeActionsPublicKey =
    Json.Decode.succeed
     (\keyId key id url title createdAt ->
         { keyId = keyId
         , key = key
         , id = id
         , url = url
         , title = title
         , createdAt = createdAt
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "key_id" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "key" Json.Decode.string)
        |> Json.Decode.Extra.andMap (Json.Decode.field "id" Json.Decode.int)
        |> Json.Decode.Extra.andMap (Json.Decode.field "url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "title" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "created_at" Json.Decode.string)


encodeActionsPublicKey : ActionsPublicKey -> Json.Encode.Value
encodeActionsPublicKey rec =
    Json.Encode.object
        [ ( "key_id", Json.Encode.string rec.keyId )
        , ( "key", Json.Encode.string rec.key )
        , ( "id", Json.Encode.int rec.id )
        , ( "url", Json.Encode.string rec.url )
        , ( "title", Json.Encode.string rec.title )
        , ( "created_at", Json.Encode.string rec.createdAt )
        ]


type alias ActionsOrganizationPermissions =
    { enabledRepositories : EnabledRepositories
    , selectedRepositoriesUrl : String
    , allowedActions : AllowedActions
    , selectedActionsUrl : SelectedActionsUrl
    }


decodeActionsOrganizationPermissions :
    Json.Decode.Decoder ActionsOrganizationPermissions
decodeActionsOrganizationPermissions =
    Json.Decode.succeed
     (\enabledRepositories selectedRepositoriesUrl allowedActions selectedActionsUrl ->
         { enabledRepositories = enabledRepositories
         , selectedRepositoriesUrl = selectedRepositoriesUrl
         , allowedActions = allowedActions
         , selectedActionsUrl = selectedActionsUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "enabled_repositories" decodeEnabledRepositories)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "selected_repositories_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allowed_actions" decodeAllowedActions)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "selected_actions_url" decodeSelectedActionsUrl)


encodeActionsOrganizationPermissions :
    ActionsOrganizationPermissions -> Json.Encode.Value
encodeActionsOrganizationPermissions rec =
    Json.Encode.object
        [ ( "enabled_repositories"
          , encodeEnabledRepositories rec.enabledRepositories
          )
        , ( "selected_repositories_url"
          , Json.Encode.string rec.selectedRepositoriesUrl
          )
        , ( "allowed_actions", encodeAllowedActions rec.allowedActions )
        , ( "selected_actions_url"
          , encodeSelectedActionsUrl rec.selectedActionsUrl
          )
        ]


type alias ActionsGetDefaultWorkflowPermissions =
    { defaultWorkflowPermissions : ActionsDefaultWorkflowPermissions
    , canApprovePullRequestReviews : ActionsCanApprovePullRequestReviews
    }


decodeActionsGetDefaultWorkflowPermissions :
    Json.Decode.Decoder ActionsGetDefaultWorkflowPermissions
decodeActionsGetDefaultWorkflowPermissions =
    Json.Decode.succeed
     (\defaultWorkflowPermissions canApprovePullRequestReviews ->
         { defaultWorkflowPermissions = defaultWorkflowPermissions
         , canApprovePullRequestReviews = canApprovePullRequestReviews
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "default_workflow_permissions"
                decodeActionsDefaultWorkflowPermissions
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "can_approve_pull_request_reviews"
                decodeActionsCanApprovePullRequestReviews
            )


encodeActionsGetDefaultWorkflowPermissions :
    ActionsGetDefaultWorkflowPermissions -> Json.Encode.Value
encodeActionsGetDefaultWorkflowPermissions rec =
    Json.Encode.object
        [ ( "default_workflow_permissions"
          , encodeActionsDefaultWorkflowPermissions
                rec.defaultWorkflowPermissions
          )
        , ( "can_approve_pull_request_reviews"
          , encodeActionsCanApprovePullRequestReviews
                rec.canApprovePullRequestReviews
          )
        ]


type alias ActionsEnterprisePermissions =
    { enabledOrganizations : EnabledOrganizations
    , selectedOrganizationsUrl : String
    , allowedActions : AllowedActions
    , selectedActionsUrl : SelectedActionsUrl
    }


decodeActionsEnterprisePermissions :
    Json.Decode.Decoder ActionsEnterprisePermissions
decodeActionsEnterprisePermissions =
    Json.Decode.succeed
     (\enabledOrganizations selectedOrganizationsUrl allowedActions selectedActionsUrl ->
         { enabledOrganizations = enabledOrganizations
         , selectedOrganizationsUrl = selectedOrganizationsUrl
         , allowedActions = allowedActions
         , selectedActionsUrl = selectedActionsUrl
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "enabled_organizations"
                decodeEnabledOrganizations
            )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "selected_organizations_url" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "allowed_actions" decodeAllowedActions)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "selected_actions_url" decodeSelectedActionsUrl)


encodeActionsEnterprisePermissions :
    ActionsEnterprisePermissions -> Json.Encode.Value
encodeActionsEnterprisePermissions rec =
    Json.Encode.object
        [ ( "enabled_organizations"
          , encodeEnabledOrganizations rec.enabledOrganizations
          )
        , ( "selected_organizations_url"
          , Json.Encode.string rec.selectedOrganizationsUrl
          )
        , ( "allowed_actions", encodeAllowedActions rec.allowedActions )
        , ( "selected_actions_url"
          , encodeSelectedActionsUrl rec.selectedActionsUrl
          )
        ]


type alias ActionsEnabled =
    Bool


decodeActionsEnabled : Json.Decode.Decoder ActionsEnabled
decodeActionsEnabled =
    Json.Decode.bool


encodeActionsEnabled : ActionsEnabled -> Json.Encode.Value
encodeActionsEnabled =
    Json.Encode.bool


type alias ActionsDefaultWorkflowPermissions =
    String


decodeActionsDefaultWorkflowPermissions :
    Json.Decode.Decoder ActionsDefaultWorkflowPermissions
decodeActionsDefaultWorkflowPermissions =
    Json.Decode.string


encodeActionsDefaultWorkflowPermissions :
    ActionsDefaultWorkflowPermissions -> Json.Encode.Value
encodeActionsDefaultWorkflowPermissions =
    Json.Encode.string


type alias ActionsCanApprovePullRequestReviews =
    Bool


decodeActionsCanApprovePullRequestReviews :
    Json.Decode.Decoder ActionsCanApprovePullRequestReviews
decodeActionsCanApprovePullRequestReviews =
    Json.Decode.bool


encodeActionsCanApprovePullRequestReviews :
    ActionsCanApprovePullRequestReviews -> Json.Encode.Value
encodeActionsCanApprovePullRequestReviews =
    Json.Encode.bool


type alias ActionsCacheUsageOrgEnterprise =
    { totalActiveCachesCount : Int, totalActiveCachesSizeInBytes : Int }


decodeActionsCacheUsageOrgEnterprise :
    Json.Decode.Decoder ActionsCacheUsageOrgEnterprise
decodeActionsCacheUsageOrgEnterprise =
    Json.Decode.succeed
     (\totalActiveCachesCount totalActiveCachesSizeInBytes ->
         { totalActiveCachesCount = totalActiveCachesCount
         , totalActiveCachesSizeInBytes = totalActiveCachesSizeInBytes
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "total_active_caches_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "total_active_caches_size_in_bytes"
                Json.Decode.int
            )


encodeActionsCacheUsageOrgEnterprise :
    ActionsCacheUsageOrgEnterprise -> Json.Encode.Value
encodeActionsCacheUsageOrgEnterprise rec =
    Json.Encode.object
        [ ( "total_active_caches_count"
          , Json.Encode.int rec.totalActiveCachesCount
          )
        , ( "total_active_caches_size_in_bytes"
          , Json.Encode.int rec.totalActiveCachesSizeInBytes
          )
        ]


type alias ActionsCacheUsageByRepository =
    { fullName : String
    , activeCachesSizeInBytes : Int
    , activeCachesCount : Int
    }


decodeActionsCacheUsageByRepository :
    Json.Decode.Decoder ActionsCacheUsageByRepository
decodeActionsCacheUsageByRepository =
    Json.Decode.succeed
     (\fullName activeCachesSizeInBytes activeCachesCount ->
         { fullName = fullName
         , activeCachesSizeInBytes = activeCachesSizeInBytes
         , activeCachesCount = activeCachesCount
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "full_name" Json.Decode.string)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "active_caches_size_in_bytes" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "active_caches_count" Json.Decode.int)


encodeActionsCacheUsageByRepository :
    ActionsCacheUsageByRepository -> Json.Encode.Value
encodeActionsCacheUsageByRepository rec =
    Json.Encode.object
        [ ( "full_name", Json.Encode.string rec.fullName )
        , ( "active_caches_size_in_bytes"
          , Json.Encode.int rec.activeCachesSizeInBytes
          )
        , ( "active_caches_count", Json.Encode.int rec.activeCachesCount )
        ]


type alias ActionsCacheList =
    { totalCount : Int
    , actionsCaches :
        List { id : Int
        , ref : String
        , key : String
        , version : String
        , lastAccessedAt : String
        , createdAt : String
        , sizeInBytes : Int
        }
    }


decodeActionsCacheList : Json.Decode.Decoder ActionsCacheList
decodeActionsCacheList =
    Json.Decode.succeed
     (\totalCount actionsCaches ->
         { totalCount = totalCount, actionsCaches = actionsCaches }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "total_count" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "actions_caches"
                (Json.Decode.list
                    (Json.Decode.succeed
                      (\id ref key version lastAccessedAt createdAt sizeInBytes ->
                          { id = id
                          , ref = ref
                          , key = key
                          , version = version
                          , lastAccessedAt = lastAccessedAt
                          , createdAt = createdAt
                          , sizeInBytes = sizeInBytes
                          }
                      )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "id" Json.Decode.int)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "ref" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "key" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "version" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field
                                "last_accessed_at"
                                Json.Decode.string
                            )
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "created_at" Json.Decode.string)
                        |> Json.Decode.Extra.andMap
                            (Json.Decode.field "size_in_bytes" Json.Decode.int)
                    )
                )
            )


encodeActionsCacheList : ActionsCacheList -> Json.Encode.Value
encodeActionsCacheList rec =
    Json.Encode.object
        [ ( "total_count", Json.Encode.int rec.totalCount )
        , ( "actions_caches"
          , Json.Encode.list
                (\rec0 ->
                    Json.Encode.object
                        [ ( "id", Json.Encode.int rec0.id )
                        , ( "ref", Json.Encode.string rec0.ref )
                        , ( "key", Json.Encode.string rec0.key )
                        , ( "version", Json.Encode.string rec0.version )
                        , ( "last_accessed_at"
                          , Json.Encode.string rec0.lastAccessedAt
                          )
                        , ( "created_at", Json.Encode.string rec0.createdAt )
                        , ( "size_in_bytes", Json.Encode.int rec0.sizeInBytes )
                        ]
                )
                rec.actionsCaches
          )
        ]


type alias ActionsBillingUsage =
    { totalMinutesUsed : Int
    , totalPaidMinutesUsed : Int
    , includedMinutes : Int
    , minutesUsedBreakdown :
        { uBUNTU : Int
        , mACOS : Int
        , wINDOWS : Int
        , ubuntu4Core : Int
        , ubuntu8Core : Int
        , ubuntu16Core : Int
        , ubuntu32Core : Int
        , ubuntu64Core : Int
        , windows4Core : Int
        , windows8Core : Int
        , windows16Core : Int
        , windows32Core : Int
        , windows64Core : Int
        , total : Int
        }
    }


decodeActionsBillingUsage : Json.Decode.Decoder ActionsBillingUsage
decodeActionsBillingUsage =
    Json.Decode.succeed
     (\totalMinutesUsed totalPaidMinutesUsed includedMinutes minutesUsedBreakdown ->
         { totalMinutesUsed = totalMinutesUsed
         , totalPaidMinutesUsed = totalPaidMinutesUsed
         , includedMinutes = includedMinutes
         , minutesUsedBreakdown = minutesUsedBreakdown
         }
     )
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "total_minutes_used" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "total_paid_minutes_used" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field "included_minutes" Json.Decode.int)
        |> Json.Decode.Extra.andMap
            (Json.Decode.field
                "minutes_used_breakdown"
                (Json.Decode.succeed
                  (\uBUNTU mACOS wINDOWS ubuntu4Core ubuntu8Core ubuntu16Core ubuntu32Core ubuntu64Core windows4Core windows8Core windows16Core windows32Core windows64Core total ->
                      { uBUNTU = uBUNTU
                      , mACOS = mACOS
                      , wINDOWS = wINDOWS
                      , ubuntu4Core = ubuntu4Core
                      , ubuntu8Core = ubuntu8Core
                      , ubuntu16Core = ubuntu16Core
                      , ubuntu32Core = ubuntu32Core
                      , ubuntu64Core = ubuntu64Core
                      , windows4Core = windows4Core
                      , windows8Core = windows8Core
                      , windows16Core = windows16Core
                      , windows32Core = windows32Core
                      , windows64Core = windows64Core
                      , total = total
                      }
                  )
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "UBUNTU" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "MACOS" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "WINDOWS" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "ubuntu_4_core" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "ubuntu_8_core" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "ubuntu_16_core" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "ubuntu_32_core" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "ubuntu_64_core" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "windows_4_core" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "windows_8_core" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "windows_16_core" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "windows_32_core" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "windows_64_core" Json.Decode.int)
                    |> Json.Decode.Extra.andMap
                        (Json.Decode.field "total" Json.Decode.int)
                )
            )


encodeActionsBillingUsage : ActionsBillingUsage -> Json.Encode.Value
encodeActionsBillingUsage rec =
    Json.Encode.object
        [ ( "total_minutes_used", Json.Encode.int rec.totalMinutesUsed )
        , ( "total_paid_minutes_used"
          , Json.Encode.int rec.totalPaidMinutesUsed
          )
        , ( "included_minutes", Json.Encode.int rec.includedMinutes )
        , ( "minutes_used_breakdown"
          , (\rec0 ->
                Json.Encode.object
                    [ ( "UBUNTU", Json.Encode.int rec0.uBUNTU )
                    , ( "MACOS", Json.Encode.int rec0.mACOS )
                    , ( "WINDOWS", Json.Encode.int rec0.wINDOWS )
                    , ( "ubuntu_4_core", Json.Encode.int rec0.ubuntu4Core )
                    , ( "ubuntu_8_core", Json.Encode.int rec0.ubuntu8Core )
                    , ( "ubuntu_16_core", Json.Encode.int rec0.ubuntu16Core )
                    , ( "ubuntu_32_core", Json.Encode.int rec0.ubuntu32Core )
                    , ( "ubuntu_64_core", Json.Encode.int rec0.ubuntu64Core )
                    , ( "windows_4_core", Json.Encode.int rec0.windows4Core )
                    , ( "windows_8_core", Json.Encode.int rec0.windows8Core )
                    , ( "windows_16_core", Json.Encode.int rec0.windows16Core )
                    , ( "windows_32_core", Json.Encode.int rec0.windows32Core )
                    , ( "windows_64_core", Json.Encode.int rec0.windows64Core )
                    , ( "total", Json.Encode.int rec0.total )
                    ]
            )
                rec.minutesUsedBreakdown
          )
        ]


